<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>haridas.in</title><link href="http://haridas.in/" rel="alternate"></link><link href="http://haridas.in/feeds/articles.atom.xml" rel="self"></link><id>http://haridas.in/</id><updated>2013-01-21T00:40:14+05:30</updated><entry><title>Programming Strategies</title><link href="http://haridas.in/programming-strategies.html" rel="alternate"></link><updated>2013-01-21T00:40:14+05:30</updated><author><name>haridas</name></author><id>tag:haridas.in,2013-01-21:programming-strategies.html</id><summary type="html">&lt;p&gt;Here I want to share some of my thoughts that helps me make good decisions in
every point of my programming life. This might looks like obvious to some but
it was not in real life.&lt;/p&gt;
&lt;div class="section" id="use-of-exceptions-and-if-else"&gt;
&lt;h2&gt;1. Use of Exceptions and if/else&lt;/h2&gt;
&lt;p&gt;Give importance to the 90% of the cases and try to optize that. For the 10%
cases we don't need to optimize or waste our time to make it more optimal.&lt;/p&gt;
&lt;p&gt;While writing a program we have to make sure that it won't fail in the edge
cases. So usually what most of them do is put a if condition to check for
such scenarios. When the program runs, it has to check every time this
conditions to make sure that it's not the special case. If your language
has Exception handling system -- you can make use of it to handle the edge
cases.&lt;/p&gt;
&lt;p&gt;I'm not saying if/else is ugly. We have to use it optimally and same time
make use of the Exception handling statements.&lt;/p&gt;
&lt;p&gt;Simple exaple is -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pid_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file.pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Faild to Read file&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;WrongPID&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;SomeUnKnownError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can write the above code if/else also, it Exception system makes more
flexible and safe.&lt;/p&gt;
&lt;p&gt;In C, There is no exception handlers, so C uses if/else conditions to make sure
that it shouldn't miss an exceptional case or a condition check.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="number-of-lines-of-code"&gt;
&lt;h2&gt;2. Number of lines of code.&lt;/h2&gt;
&lt;p&gt;Don't try to reduce number of line of code, instead reduce number of lines
of code per one job/task. Write simple functions/methods clases that do only
one job, not multiple jobs if it not really requires.&lt;/p&gt;
&lt;p&gt;People usually try to reduce the number of lines by doing lot of jobs in single
code block and make the program  more complex. and also get all the required things for multiple cases under one code
block, may be that extra things are not required for most of the time. Or
some cases' pre requirement operations affecting the operations of other
ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="think-like-a-jit-compiler"&gt;
&lt;h2&gt;5. Think like a JIT compiler&lt;/h2&gt;
&lt;p&gt;Understand the use case of the program and understand which portion of your
code going to run more often.&lt;/p&gt;
&lt;p&gt;usually JIT will identify the hot spots in your code and try to optimise it
for us, so what is the point of doing this by programmer ?. That
optimization is not ideal though, if the programmer have an idea of how the
code going to run on machine then he/she can write it in such a way that the
compiler or Run time optimzers can do its job easily and make thing more better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="learn-more-about-operating-system"&gt;
&lt;h2&gt;4. Learn More about Operating System&lt;/h2&gt;
&lt;p&gt;Understand the machine and think from its side to know how to achive more
work with less cost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apply-basic-management-skills"&gt;
&lt;h2&gt;6. Apply basic Management skills&lt;/h2&gt;
&lt;p&gt;Apply the Management skills to the programming. Pick right tool for right
purpose and think agnostically. I'm not 100% agnostic, but i'm
working on it to reach that level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="negate-all-rules-described-above"&gt;
&lt;h2&gt;7. Negate all rules described above :).&lt;/h2&gt;
&lt;p&gt;If we know that the cost of time taking to achive the above level of
optimzation is not required you have skip them get in to the issue first.&lt;/p&gt;
&lt;p&gt;The last rule is about negating all the above rules :). And don't care at all.
the situation and violate all the rules specified
above and do the thing what ever way you want and get the thing done with in
the time bound. Just think about the rules and regulations after that :).
I very rarely went through such situations though, hmm... but I did.&lt;/p&gt;
&lt;p&gt;I know the dificulty of implementing these things much more tedius than wirting
and reading from here. But think positive and learn from experience.&lt;/p&gt;
&lt;p&gt;Reference :&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/328976/thorough-use-of-if-statements-or-try-catch-blocks"&gt;http://stackoverflow.com/questions/328976/thorough-use-of-if-statements-or-try-catch-blocks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry></feed>