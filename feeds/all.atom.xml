<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>haridas.in</title><link href="/" rel="alternate"></link><link href="//feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2012-08-16T22:18:51+05:30</updated><entry><title>How to put Encrypted Contents on Cloud Storages</title><link href="//how-to-put-encrypted-contents-on-cloud-storages.html" rel="alternate"></link><updated>2012-08-16T22:18:51+05:30</updated><author><name>haridas</name></author><id>//how-to-put-encrypted-contents-on-cloud-storages.html</id><summary type="html">&lt;p&gt;There is a plenty of cloud storage services out there for free.
It's very convenient and flexible that we can sync our local files with
remote storage. For simple and non-sensitive contents this  is very useful.
But we know that the contents on the net are being open. There is a chance for
those contents will get read by others.&lt;/p&gt;
&lt;p&gt;I use Dropbox with my Debian machine to sync my local documents.
But I'm worried about putting some of my documents on the cloud after
knowing that there is a chance of breach. Because of that I avoided putting
those contents on my cloud storage. Later I figured out that we can
put an encrypted contents. I tried to use GPG and other methods to encrypt
the contents and putting them on cloud. But those are all requires lot of work to
push contents each time. GPG mainly used for transferring encrypted contents
between sender and receiver, so that is not the good solution. We required
a method to add the encrypted documents only to our cloud storage and the same
time we want to access the actual copy of the document on our machine.&lt;/p&gt;
&lt;p&gt;Then I saw options for the ecrypted file systems like &lt;strong&gt;ecryptfs&lt;/strong&gt;,
&lt;strong&gt;encfs&lt;/strong&gt; are available under Linux file systems. Which provide
good flexibility that I required, and it only required pain of one time setup.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;encfs&lt;/em&gt; is a User space filesystem, but the &lt;em&gt;ecryptfs&lt;/em&gt; is working in the kernel space,
because of that ecryptfs is little difficult to setup. But ecryptfs is faster
and more secure than the encfs. Both of them using a passphrase as the initial
key to do all the encryption and decryption, we can keep this
passphrase with other file systems or even in external storage device, This is like
normal password required to initiate the encryption or decryption.&lt;/p&gt;
&lt;p&gt;Here I'm explaining how to use the ecryptfs,&lt;/p&gt;
&lt;p&gt;First install the packages required,&lt;/p&gt;
&lt;p&gt;From root user follow these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;apt-get install ecryptfs-utils
&lt;span class="gp"&gt;#&lt;/span&gt;modprobe cryptfs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm using Dropbox as my cloud storage. So inside your drobox folder just create
one folder named Encrypted.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/Dropbox/Encrypted
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/SecureDropbox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are going to keep our documents under the ~/SecureDropbox folder, and the
ecryptfs will generate the corresponding encrypted files on the
~/Dropbox/Encrypted folder. So Dropbox only see this Encrypted files.&lt;/p&gt;
&lt;p&gt;Actually in terms of ecryptfs the ~/Dropbox/Encrypted act as an encrypted
file system partition(like /dev/sda5) and the ~/SecureDrobox act as the mount
point where we can see the actual content of the files, we require the proper
passphrase to mount the encrypted file system to local folder.This mounting and
creation of the encrypted file system is explained bellow.&lt;/p&gt;
&lt;p&gt;To mount the encrypted device to the mount point, use the normal mount command
with ecryptfs as its filesystem. This step ask for set of questions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Mount command requires root privilage.&lt;/span&gt;
mount -t ecryptfs /home/haridas/Dropbox/Encrypted /home/haridas/SecureDropbox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check this console page to see the complete list of commands required to finish
the mounting operation.&lt;/p&gt;
&lt;img alt="/images/encryption-3.jpg" src="/images/encryption-3.jpg" /&gt;
&lt;p&gt;Now check the filesystem to see whether the encrypted filesystem got mounted
to the mount point, use df command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt; df -h
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if there is no error, you can now check for the file encryption by directly
adding one text file in to &lt;cite&gt;/home/haridas/SecureDropbox&lt;/cite&gt;, immediately you can see
the encrypted file with the same name under &lt;cite&gt;/home/haridas/Dropbox/Encrypted&lt;/cite&gt;.
Try out this.&lt;/p&gt;
&lt;p&gt;So we are done with the keeping only the encrypted files under Dropbox folder.
So don't need to worry about the sensitive documents. But one thing is that in
order to decrypt the files from other machines, you required the passphrase and
other machines should support the ecryptfs. You can't us mobile
devices to view the encrypted content.&lt;/p&gt;
&lt;p&gt;We need to mount the ecryptefs filesystem in the boot time to avoid that step
every time. That requires passphrase, and set of other configurations, that was
done while mounting the file system initially. We can pass this automatically by
putting it in a &lt;cite&gt;.ecryptfsrc&lt;/cite&gt; file under root home directory. So at boot time
we can see system can read it.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;/root/.ecryptfsrc&lt;/cite&gt; file should have the following lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;key=passphrase:passphrase_passwd_file=/home/haridas/.ecryptfs/.secret-passphrase.txt
ecryptfs_sig=b2f118ee01beb78b
ecryptfs_cipher=aes
ecryptfs_key_bytes=32
ecryptfs_passthrough=n
ecryptfs_enable_filename_crypto=n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After creating /root/.ecryptfsrc file, add the following line to &lt;cite&gt;/etc/fstab&lt;/cite&gt;
to automount at boot time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sr"&gt;/home/&lt;/span&gt;haridas&lt;span class="sr"&gt;/Dropbox/&lt;/span&gt;Encrypted &lt;span class="sr"&gt;/home/&lt;/span&gt;haridas/SecureDropbox  ecryptfs
defaults &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The passphrase is the important thing that you have to keep in your machine or
with external disk. Make sure that the passphrase is available to the system
when you are trying to mount it in the booting time itself.&lt;/p&gt;
&lt;p&gt;Keep the passphrase safe !. Which determines the strength of your encryption.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
</summary><category term="security"></category><category term="server"></category></entry><entry><title>Vim as your IDE</title><link href="//vim-as-your-ide.html" rel="alternate"></link><updated>2012-08-11T00:00:00+05:30</updated><author><name>haridas</name></author><id>//vim-as-your-ide.html</id><summary type="html">&lt;p&gt;To follow this article you required basic idea of how to use Vim and its command
based editing. And it focused on how to make it an IDE.&lt;/p&gt;
&lt;p&gt;Are you very eager to see how to &lt;a class="reference internal" href="#setup-vim-from-scratch"&gt;Setup Vim from Scratch&lt;/a&gt; ?&lt;/p&gt;
&lt;p&gt;In the first &lt;a class="reference external" href="http://haridas.in/how-i-came-in-to-vim.html"&gt;article&lt;/a&gt; I was describing how I came in to Vim editor and its
fundamental difference with other type of editors.
So on this article I'm trying to explain how to setup Vim as a common IDE for
different programming languages. I'm basically a Python
guy because of that this article is a little Python oriented. But most of them
are applicable to other programming languages also. Vim has bunch of plugins
and other supports available for all programming languages.
So no worry regarding that.&lt;/p&gt;
&lt;p&gt;Lets change the Vim as a simple powerful editor to an IDE with Vim special
capabilities.The default Vim installed on most of the Gnu/Linux destros are more than
enough to do our work. But if you want more eye catchy look and feel and some
handy tools to do your work more quickly then you need to install some Vim plugins,
good looking font's, color themes etc.&lt;/p&gt;
&lt;p&gt;The Gnu/Linux Console based Vim has some limitation to show good font's and
colors. So you have to use GTK version of the Vim(Gvim). Gvim gives you all
the super looking features to your Vim. Just take a look
at my konsole based Vim and Gvim screen shots.&lt;/p&gt;
&lt;div class="section" id="vim-on-kde-konsole"&gt;
&lt;h2&gt;Vim on KDE Konsole&lt;/h2&gt;
&lt;img alt="vim-on-console" class="align-left" src="/images/vim-console.jpg" style="width: 768px; height: 400px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="gvim"&gt;
&lt;h2&gt;Gvim&lt;/h2&gt;
&lt;img alt="Gvim image" class="align-left" src="/images/gvim.jpg" style="width: 768px; height: 400px;" /&gt;
&lt;p&gt;I configured my Vim with set of Vim plugins,color schemes and other settings
to make it more productive. below I'm explaining all of them, and how to use
my github vim settings available to all of you, so that finally you will get
all of theses extra addition to your vim.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="topics"&gt;
&lt;h3&gt;Topics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Plugins&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#minibuferexplorer"&gt;MinibuferExplorer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#command-t"&gt;Command-t&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#syntastic"&gt;Syntastic&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#snipmate"&gt;Snipmate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fugitive"&gt;Fugitive&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nerdtree"&gt;NerdTree&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nerdcommenter"&gt;Nerdcommenter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rope"&gt;Rope&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tagbar"&gt;Tagbar&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#simplepairs"&gt;SimplePairs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#others"&gt;Others&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference internal" href="#setup-vim-from-scratch"&gt;Setup Vim from Scratch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference internal" href="#some-vim-shortcuts"&gt;Some Vim Shortcuts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference internal" href="#summary"&gt;Summary&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;A Side Note&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In my .vimrc file, I disabled the use of arrow keys in the Vim command mode.
So that was force me to learn the Vim clasic hjkl arrow keys and I succed
in it. Now I don't required key board arrow keys any more even in Vim
editing mode.&lt;/p&gt;
&lt;p&gt;If you want to change this behaviour, just remove below sections from my
.vimrc file.&lt;/p&gt;
&lt;img alt="/images/vimrc1.jpg" src="/images/vimrc1.jpg" /&gt;
&lt;p&gt;Similarly, you can just go through my .vimrc file to see other options,
I tried to document my .vimrc file as much as possible. You can play
around with it to make it suitable for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="minibuferexplorer-file-tabs"&gt;
&lt;span id="minibuferexplorer"&gt;&lt;/span&gt;&lt;h2&gt;1. MinibuferExplorer (File Tabs)&lt;/h2&gt;
&lt;p&gt;This is like Tabs in other IDE's. We can see the opened files in vim using this
plugin. By default, we have to use &lt;cite&gt;:ls&lt;/cite&gt; to see opened buffers. So this
plugin makes it very convenient to see the opened files as tabs.&lt;/p&gt;
&lt;p&gt;Vim has slightly different concept regarding the Tabs, compared to other IDE's.
Vim has support for tabs by default. That tab is different from the normal
IDE's Tabs. Actually the difference is that the vim tabs are
a collection of opened buffers(or files.). So we can consider it as group of
tabs in other IDE context.&lt;/p&gt;
&lt;p&gt;But most of the time we only required one vim tab and set of opened
buffers(files.). MinibuferExplorar help you to see those opened buffers as
a virtual tabs. See the below screen.&lt;/p&gt;
&lt;img alt="/images/minibufexplorer.jpg" src="/images/minibufexplorer.jpg" style="width: 90%; height: 356px;" /&gt;
&lt;p&gt;You can use &lt;cite&gt;CTRL + h/j/k/l&lt;/cite&gt; or &lt;cite&gt;CTRL + w&lt;/cite&gt; to navigate around the different
split windows and the mini buffer Explorer. Try out that right away. To open
a hidden buffer in vertical split, just go in to the MinibuferExplorer and
choose corresponding file buffer(You can use normal &lt;cite&gt;hj&lt;/cite&gt; keys to move through
different tabs ) and press &lt;cite&gt;v&lt;/cite&gt;, to open it in vertical split
window. Press &lt;cite&gt;s&lt;/cite&gt; to show this in horizontal split window.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-t-file-search"&gt;
&lt;span id="command-t"&gt;&lt;/span&gt;&lt;h2&gt;2. Command-t (File Search)&lt;/h2&gt;
&lt;p&gt;Very awesome plugin for vim. Which help us to search the files very quickly.
Actually to get better speed it was implemented in C. To install this plugin
you need one extra compilation of this plugin because of C code. Don't worry
I explained this in the setup section.&lt;/p&gt;
&lt;img alt="images/command-t.jpg" src="images/command-t.jpg" style="width: 100%;" /&gt;
&lt;p&gt;Once we enabled this plugin you can see the search list using your
&lt;cite&gt;&amp;lt;leader&amp;gt; + t&lt;/cite&gt;. I'm using my leader key as &lt;strong&gt;,&lt;/strong&gt;, so for me it looks like &lt;cite&gt;,t&lt;/cite&gt;
(comma + t). Normally the leader key is &amp;quot;\&amp;quot;. You can change this in .vimrc
file.&lt;/p&gt;
&lt;p&gt;Actually the leader key provides a extension to use all the keys in the
keyboard as your own shortcuts. This leader key is activated in the normal mode of the
vim.&lt;/p&gt;
&lt;p&gt;Command-t also list the all opened buffers by &lt;cite&gt;,b&lt;/cite&gt;, and it also list the vim
jump list.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="syntastic-syntax-checker"&gt;
&lt;span id="syntastic"&gt;&lt;/span&gt;&lt;h2&gt;3. Syntastic (Syntax Checker)&lt;/h2&gt;
&lt;p&gt;Another very useful plugin for all types of programming languages.
This plugin will help you to keep the syntax of the program correct,
like auto correct in other IDE's. This package is general one,
and we can expand very easily. By default it support lot of programming
languages. So this plugin is a must one for Vim.&lt;/p&gt;
&lt;p&gt;For example, if your are editing an RST file (All my blog posts are in
reStructured Text format), if we made some syntax errors and when we
trying to save, the syntastic plugin show you the
location of the error and its reason very neatly.&lt;/p&gt;
&lt;p&gt;Take a look at the portion of rst file of this blog post. I made a syntax error
with image tag,&lt;/p&gt;
&lt;img alt="/images/syntastic.jpg" src="/images/syntastic.jpg" style="width: 100%;" /&gt;
&lt;p&gt;Similarly synstastic help you to follow a standard coding methods defined by the
programming communities. for eg; Python code has PEP8 standard, so while
writing python code, if you are not following it, synstastic will show you the
problem. After a while you will learn the PEP8 without an extra work :).&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="snipmate-code-templates"&gt;
&lt;span id="snipmate"&gt;&lt;/span&gt;&lt;h2&gt;4. Snipmate (Code Templates)&lt;/h2&gt;
&lt;p&gt;A simple way to avoid typing some repetitive sequence of words. For example, in
python, we initialize a class by typing &lt;cite&gt;class&lt;/cite&gt; keyword, name, etc... Instead
of doing all those drama, we can just populate the default set of class
structure from snipmate, by typing &lt;strong&gt;cl&lt;/strong&gt; &amp;lt;tab&amp;gt;. Try out by opening a python
test file.&lt;/p&gt;
&lt;p&gt;The snimpate plugin provide lot of such shortcuts for different programming
languages. We can also define our own snippets. For web developers this is very
useful to create &amp;lt;table&amp;gt;, &amp;lt;div&amp;gt; tag completions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vim test.py
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/python&lt;/span&gt;
&lt;span class="n"&gt;cl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After tying &lt;cite&gt;cl&lt;/cite&gt; press tab and see the magic of full class template.
similarly you can define your own snipmate. for eg;
&lt;cite&gt;for&lt;/cite&gt; &amp;lt;tab&amp;gt; to expand the &lt;cite&gt;for&lt;/cite&gt; statement completely for you language.&lt;/p&gt;
&lt;p&gt;You can see all the snipmate files inside this plugin folder, like
python.snipmate, ruby.snipmate etc.. The syntax of defining new snipmate for
your language is pretty interesting.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fugitive-git"&gt;
&lt;span id="fugitive"&gt;&lt;/span&gt;&lt;h2&gt;5. Fugitive (Git)&lt;/h2&gt;
&lt;p&gt;This is for git repo management inside vim itself. It provide set of short
commands, that we can directly typed in the vim command mode to see and do the
git related operations. We don't need to go outside the editing environment to
manage those stuffs.&lt;/p&gt;
&lt;p&gt;Also it have very nice git diff view inside vim itself, good looking and nice
to use.&lt;/p&gt;
&lt;p&gt;To see all available git commands under this plugin just type
&lt;cite&gt;:G&amp;lt;tab&amp;gt;&lt;/cite&gt;.Provided you are been inside a git repository.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nerdtree-file-browser"&gt;
&lt;span id="nerdtree"&gt;&lt;/span&gt;&lt;h2&gt;6. NerdTree (File Browser)&lt;/h2&gt;
&lt;p&gt;This will display your project directory structure in tree format.It provides
lot of shortcuts to navigate through the source tree easily.This is another
common thing required for an IDE. Check the below image to see how it looks
like.&lt;/p&gt;
&lt;p&gt;Shortcuts - I mapped the following keys in .vimrc file to show and hide the
nerdtree when ever required. My .vimrc file has this settings.
You can map this to your own choice.&lt;/p&gt;
&lt;img alt="/images/nerd_tree.jpg" src="/images/nerd_tree.jpg" /&gt;
&lt;p&gt;To open and close the nerdtree press &lt;em&gt;CTRL + n&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Also you can see other available commands for this plugin by typing,&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ESC + :NERD &amp;lt;tab&amp;gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nerdcommenter-commenting"&gt;
&lt;span id="nerdcommenter"&gt;&lt;/span&gt;&lt;h2&gt;7. NerdCommenter (Commenting)&lt;/h2&gt;
&lt;p&gt;This plugin is only to comment the multi line code blocks together. In normal
vim there is no such thing(Not sure), so if we want to comment multiple lines
we have to go through each lines.&lt;/p&gt;
&lt;p&gt;This plugin make it handy, so you only need to select the code block using
mouse or keyboard ( Vim visual mode) and type the following command to comment
it out.&lt;/p&gt;
&lt;p&gt;Comment entire selected code block : &lt;tt class="docutils literal"&gt;&amp;lt;leader&amp;gt;cc,&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Toggle the commented state : &lt;tt class="docutils literal"&gt;&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="rope"&gt;&lt;/span&gt;&lt;h2&gt;8. Rope&lt;/h2&gt;
&lt;p&gt;Rope is specially for python project navigation. Most of the IDE's have this
support to see the definition of a function or class by clicking on it(or
via shortcut key).&lt;/p&gt;
&lt;p&gt;By default, if we open a python project in Vim it won't have support for this
feature. When we trying to use this feature first time, the Rope prompt use to
create a ropeproject under our directory. This is just a simple settings file
under our project folder to specify different settings and path information.&lt;/p&gt;
&lt;p&gt;The Plugin help us to create it easily, after that we can use this plugin to
view definition of all function or classes comes under the rope project path.&lt;/p&gt;
&lt;p&gt;In my Vim I mapped the &lt;strong&gt;&amp;lt;leader&amp;gt;j&lt;/strong&gt; to :RopeGotoDefinition. For eg.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep your cursor on top of the &lt;cite&gt;os&lt;/cite&gt; and press the &amp;lt;leader&amp;gt;j or type
:RopeGotoDefinition, Vim will open the os file from the system path
into your the current Vim session as another buffer. Similarly we can go to
definition of any python entity comes under the Rope path settings.&lt;/p&gt;
&lt;p&gt;This plugin also required to meet the modern IDE feature list. :)&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tagbar-class-browser"&gt;
&lt;span id="tagbar"&gt;&lt;/span&gt;&lt;h2&gt;9. Tagbar (Class Browser)&lt;/h2&gt;
&lt;p&gt;This plugin is similar to the NerdTree, but instead of listing project
directory structure it list the objects and functions inside a file. Like Class
browser in other IDE's.&lt;/p&gt;
&lt;img alt="/images/tagbar.jpg" src="/images/tagbar.jpg" style="width: 100%;" /&gt;
&lt;p&gt;I mapped &lt;cite&gt;&amp;lt;leader&amp;gt;l&lt;/cite&gt; to open tagbar and same combination to close it also.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="simple-pairs"&gt;
&lt;span id="simplepairs"&gt;&lt;/span&gt;&lt;h2&gt;10. Simple Pairs.&lt;/h2&gt;
&lt;p&gt;This is a simple plugin to auto complete single quote, double quote,
parentheses. This is very handy to save some key press.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;span id="others"&gt;&lt;/span&gt;&lt;h2&gt;Others&lt;/h2&gt;
&lt;p&gt;This section is not to discus about plugin, but exploring already available
features build in with the Vim.You can consider me as beginner in that area :).
If you are looking for learning more advanced details of the Vim editor,
you don't need to search in google, you can find it out under its documentation
itself.&lt;/p&gt;
&lt;p&gt;To see the all documentation type &lt;cite&gt;ESC + :help&lt;/cite&gt;. The documentation is very
huge, so Vim provides search option across all its documentation. To see
a documentation about a topic, type &lt;cite&gt;ESC + :help &amp;lt;topic&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;For eg;&lt;/p&gt;
&lt;p&gt;To see about the documentation about &lt;em&gt;jumps&lt;/em&gt; , type : &lt;cite&gt;ESC + :help jumps&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;I wrote above example, because it is an another interesting feature required
for modern IDE. The thing is that it was build in with Vim.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Jump List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found this feature accidently. This is to jump across different files and
same time option for jump back through all the files we came across.&lt;/p&gt;
&lt;p&gt;To understand this feature - If we used Rope plugin to see definition of
a function outside the current file, it will open new buffer in Vim and
direct us to that file. What if we want to come back to the same location of
previous file ?. This requires jump back operation. Press &lt;cite&gt;CTRL + o&lt;/cite&gt;, you can
see the magic. Press &lt;cite&gt;CTRL + &amp;lt;tab&amp;gt;&lt;/cite&gt; to go forward again.&lt;/p&gt;
&lt;p&gt;There is much more things are there about jumplist, Vim internally keeps the
list of our locations across different files. you can see that by typing
&lt;cite&gt;:jumps&lt;/cite&gt; command and this list is available different instance of the Vim
editor.&lt;/p&gt;
&lt;p&gt;Similar to this, lot of things are out there to learn. This Others section
is not going to end here :). But for now I'm stopping here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the explanation of Vim feature is over for now, lets look at how to setup
the Vim to get all those above features, make Vim ready to extend with new
plugins.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="setup-vim-from-scratch"&gt;
&lt;h3&gt;Setup Vim from Scratch&lt;/h3&gt;
&lt;p&gt;These Vim pluins and all are there in my Vim &lt;a class="reference external" href="https://github.com/haridas/Dotfiles/tree/master/vim-files"&gt;github&lt;/a&gt; project. I put all those
settings and plugins in standard way. So you can extend or remove them when
ever required.&lt;/p&gt;
&lt;p&gt;Before doing this, please backup your current Vim settings from your home
directory.&lt;/p&gt;
&lt;p&gt;My git has already every vim related files. Only thing required is just clone
it and do some steps to go ahead with all the features that I discussed above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;git clone git://github.com/haridas/Dotfiles.git

&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;Dotfiles
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I kept all the required plugins as git submodules. So we will get the new
changes from the plugin projects by updating the submodule project.
While cloning my main repo won't retrieve the submodules or external plugin git
projects. But we have all the settings and paths in my git projects,
so we can easily fetch the current stable code from
all the external projects. To do that, type below command inside Dotfiles
folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;path to gitproject&amp;gt;/Dotfiles&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;git submodule init
&lt;span class="gp"&gt;$&lt;/span&gt;git submodule update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have all the files required to get start with vim, one more step left
is link my git files as your vim settings files. To do that just soft link
the files to git repo files. Here is the steps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;ln -s &amp;lt;path-to&amp;gt;Dotfiles/vim-files/vim .vim
&lt;span class="gp"&gt;$&lt;/span&gt;ln -s &amp;lt;path-to&amp;gt;Dotfiles/vim-files/vim/vimrc .vimrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it, now open your vim, you can see all the features described above are
available, except command-t. Because it required a compilation. It has been
implemented in C to improve the speed. The compilation step is very simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;path-to&amp;gt;Dotfiles/vim-files/vim/bundle/command-t/ruby/command-t
&lt;span class="gp"&gt;$&lt;/span&gt; ruby extconf.rb
&lt;span class="gp"&gt;$&lt;/span&gt; make
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The make will succeed only when you have gcc and ruby support with vim. To check
the vim has ruby support, open your vim and type,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;ruby&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is no error then you have ruby
support with your vim. The latest versions of vim has support with major
dynamic languages like Python, Ruby and others. So that won't give you any head ache.&lt;/p&gt;
&lt;p&gt;If the dynamic language support is not there with your Vim, then you have to
install complete vim from your package manager.&lt;/p&gt;
&lt;p&gt;If you are using Debian based system you can follow this command. Other
platforms has also the same option using their package manager tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;apt-cache search python | grep vim
&lt;span class="gp"&gt;$&lt;/span&gt;apt-cache search ruby | grep vim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the list install any of the GUI based package.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-vim-shortcuts"&gt;
&lt;h3&gt;Some Vim shortcuts&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In normal mode
==============

:23,30m200  -- move a section of code to another line.

df, (reverse dF,)   -- delete all characters till , on the current line.

I  -- go to beginning of the line as insert mode.

$   -- in command mode, go to end of the line.

gg  -- go to beginning of the file

G  -- go to end of the file.

CTRL + o, CTRL + i  -- Jumps back and forward, very useful.

CTRL + h/j/k/l  -- move the control to different split windows and
MinibuferExplorer.

CTRL + F    -- page down scroll.

CTRL + B    -- page back scroll.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;All these features and hard work to setup Vim is useful to you only when you
realize the fact that the Vim basic editing features will save lot of your time
and increase the productivity. For that you don't required above discussed
plugin features. The plugins will only reduce some
keystrokes, But it won't turn you from other editors to Vim. Vim default features
are more than enough to attract you from other editors.
I hope you understood that feeling. :)&lt;/p&gt;
&lt;p&gt;Enjoy the Vim hacking.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>How I came in to Vim</title><link href="//how-i-came-in-to-vim.html" rel="alternate"></link><updated>2012-05-27T16:30:00+05:30</updated><author><name>haridas</name></author><id>//how-i-came-in-to-vim.html</id><summary type="html">&lt;p&gt;I know most of them in the programming world are very fascinated to Vim editor
rather than typical IDE's like Eclipse, Visual Studios etc. Every one using Vim
has a story to tell, How they came in to Vim. Here is my story.&lt;/p&gt;
&lt;p&gt;I was started to use the Vim editor from my College time onwards. Since then for
a long time I was just used it whenever there is no  other option available, and
I did't realized the importance of Vim editor.&lt;/p&gt;
&lt;p&gt;After I started my Job as Server Administrator, I have to use Vim regularly to
work with servers and other configuration files. But I used it because there is
no other thing available at remote severs :). And some times when I watching
hackers video, most of them are using Vim editor to show their works,
I always wonder why they are using it instead of common IDE's. In the same time
I have an interest in Programming, so I tried to  automate my  works using
different Scripting and Programming languages, that eventually turned me to a Programmer.&lt;/p&gt;
&lt;p&gt;When I was started to working as a Django developer I used to work with Eclipse with
python binding. At these times I very rarely used the Vim editor, most of time
I was engaged in Eclipse editor. Then I moved to another company as
a Python and Django backend developer, there I met &lt;a class="reference external" href="http://twitter.com/satyajitranjeev"&gt;&amp;#64;Satyajit Ranjeev&lt;/a&gt; My Team
Lead and a Big fan of Vim, He already using Vim as his main editor and he encouraged me and others to use
the Vim editor. But for few weeks I didn't mind it, and was worked with eclipse
itself.&lt;/p&gt;
&lt;p&gt;Finally one day evening I realized the fact that why the Vim gets this much interest
among programmers and other hackers. That was a sudden move, with in that day
Itself I learned the basic navigation key bindings and &lt;a class="reference external" href="http://twitter.com/satyajitranjeev"&gt;&amp;#64;Satyajit Ranjeev&lt;/a&gt; helped
me to setup the Vim as a general IDE for all my works. After that we together
working and learning to improve the Vim skills every day and I'm enjoying the
facts that I'm using it for my project works right after the first day of my
basic learning. When I look back I can see that I missed the Vim editor
for long time. Any way right now I became a big fan of Vim :). I used Vim to
type this blog entry.&lt;/p&gt;
&lt;p&gt;The main facts that I liked with the Vim editors while comparing with other
editors are,&lt;/p&gt;
&lt;div class="section" id="basic-navigation"&gt;
&lt;h2&gt;Basic Navigation&lt;/h2&gt;
&lt;p&gt;Actually this feature is the one which brought me to Vim. There is no need to
use Mouse, We can do every thing using key board. The mouse usage is far less
productive and more stressful if we compare the same operation with keyboard.
Mouse has an importance when user has no or very less idea about the GUI, then
He/She can do better with mouse. But that case is valid for short term usage
only.&lt;/p&gt;
&lt;p&gt;If you are comfortable with touch typing then it's very easy to catch the Vim commands.
This includes, navigating through,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;li&gt;Pages&lt;/li&gt;
&lt;li&gt;Lines&lt;/li&gt;
&lt;li&gt;Words&lt;/li&gt;
&lt;li&gt;Characters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And do all &lt;strong&gt;CRUD&lt;/strong&gt; operations very quickly by using simple keystroke.&lt;/p&gt;
&lt;p&gt;You might think that, we can do that with the keyboard arrow keys, that is
possible, but vim has its own way to do it. It got different modes of
working, &lt;strong&gt;Insert Mode&lt;/strong&gt; - For typing contents, &lt;strong&gt;Command mode&lt;/strong&gt; - In this mode we use
different shortcuts to do lot of operations, &lt;strong&gt;Search Mode&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;p&gt;Using Vim is far faster and easy to work with any text editing
operations.Programmers are always doing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="availability"&gt;
&lt;h2&gt;Availability&lt;/h2&gt;
&lt;p&gt;By default all Gnu/Linux ship with the Vim editor. So we don't need to move to
other editors when you are working with Gnu/Linux. Mac and Windows also got Vim
editors so just download it and give a try.
Also you can integrate the Vim key bindings with all major IDE's like
&lt;a class="reference external" href="http://www.viplugin.com/viplugin/"&gt;Eclipse&lt;/a&gt;, &lt;a class="reference external" href="http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329"&gt;Visual Studio&lt;/a&gt;, etc..&lt;/p&gt;
&lt;p&gt;Also the vim keyboard bindings for navigation are also being used with web
browsers(&lt;a class="reference external" href="https://chrome.google.com/webstore/detail/dbepggeogbaibhgnhhndojpepiihcmeb"&gt;Chrome&lt;/a&gt;, &lt;a class="reference external" href="http://www.vimperator.org/vimperator"&gt;Firefox&lt;/a&gt;), and even you can use this key bindings with
OS command prompt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="light-weight-fast-and-highly-configurable"&gt;
&lt;h2&gt;Light weight, Fast and highly configurable&lt;/h2&gt;
&lt;p&gt;Even after adding lot of extensions with default Vim to make it general IDE
like look and feel, its size would be very less compared to other IDE's.And we
can customize the Vim editor very easily using its configuration file &lt;strong&gt;.vimrc&lt;/strong&gt;
under the user home directory. And of course Vim is very fast.&lt;/p&gt;
&lt;p&gt;One problem with Vim is, the learning curve. It has got lot of very advanced shortcuts
and key bindings that can  be understood after using it for a while,But the
basic shortcuts required to get start with Vim is very simple.
We will learn new and new keyboard bindings through out the life span :).&lt;/p&gt;
&lt;p&gt;You can have a look at this &lt;a class="reference external" href="http://kevinw.github.com/2010/12/15/this-is-your-brain-on-vim/"&gt;Article&lt;/a&gt; which describes how the Vim key bindings
became integral part of our life ;).&lt;/p&gt;
&lt;p&gt;My Vim Story-2 blog entry will come soon which describe the details how to
setup the Vim to make it suitable for all type of programmers.&lt;/p&gt;
&lt;p&gt;Till then... Bye :)&lt;/p&gt;
&lt;p&gt;EDIT:&lt;/p&gt;
&lt;p&gt;Finished the second part of my Vim blog - &lt;a class="reference external" href="http://haridas.in/vim-as-your-ide.html"&gt;How to setup Vim as your IDE&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="vim"></category><category term="editor"></category></entry><entry><title>Wordpress blog migrated to Pelican</title><link href="//wordpress-blog-migrated-to-pelican.html" rel="alternate"></link><updated>2012-05-07T13:33:00+05:30</updated><author><name>haridas</name></author><id>//wordpress-blog-migrated-to-pelican.html</id><summary type="html">&lt;p&gt;Initially this blog was running on wordpress, And you know the reasons for
that. Wordpress is the most successful and feature rich blog engine. So
I chose it without thinking twice, I didn't even search for a python alternative blog
engines at that time. But after a while I felt the difficulties while adding some
changes to the wordpress code, bugs with the wordpress plugins and more
importantly the Web based editor is very annoying while typing new contents.&lt;/p&gt;
&lt;p&gt;If we are considering the technical points, wordpress is a dynamic blog engine,
it is an overkill for simple blogs and other wiki based sites. Main issue is the speed of
page rendering.The static pages are way faster than the dynamic pages. I know
wordpress has caching feature to improve the speed of the page rendering,but it
is not a simple solution.&lt;/p&gt;
&lt;p&gt;Actually above points are all came to my mind after seeing the static site
generators and their awesome features.&lt;/p&gt;
&lt;div class="section" id="advantage-of-static-site-generators-over-dynamic-blog-engines"&gt;
&lt;h2&gt;Advantage of static site generators over Dynamic blog engines&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Serve html files directly, so very fast.&lt;/li&gt;
&lt;li&gt;Easy maintenance of the site, very less pain with server setup.&lt;/li&gt;
&lt;li&gt;Use your favourite text editor for blog posting. I'm a VIM fan :).&lt;/li&gt;
&lt;li&gt;It uses Markdown or Restructured Text Syntax for blog entry. So we just need to type
the post in normal text with simple formating. So we don't need to worry about the
html formatting while typing the content.This feature were attracted me more
because the wordpress web editor sucks, and here I can use Vim.&lt;/li&gt;
&lt;li&gt;Host it on Github,Bitbucket. The entire blog is a set of text files that
enables easy version controlling.&lt;/li&gt;
&lt;li&gt;Very easy to customize the Themes  or other internal structure.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next challenge that I faced was the selection of one static site generator from
bunch of choice. There are lot of them are implemented in
Python or Ruby. I was searched for few days to come up with a suitable one.
Finally I picked up a Python based engine &lt;a class="reference external" href="http://pelican.notmyidea.org/"&gt;Pelican&lt;/a&gt; as my favorite. It doesn't
mean that others are bad implementation, but Pelican suits my taste better.&lt;/p&gt;
&lt;p&gt;Here is the list of few major static site generators that I went through as
part of the selection process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jekyll"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll is a Ruby based system developed at github.com and it is very commonly
used in Ruby world. I tried to use it because of its native github
support, but finally I realized that we can do the same thing with other site
generators, And other problems that I found on Jekyll was,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Its structure is difficult compared to other site generators.&lt;/li&gt;
&lt;li&gt;It's a Ruby based one, I'm more comfortable with Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="hyde"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://hyde.github.com"&gt;Hyde&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hyde is a  Python based static site generator like Jekyll but less complex.
But Hyde lacks good documentation, and mainly a way to migrate from other
blog engines. I can see that the project getting more interest recently.
I hope it will get in to good position very soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pelican.notmyidea.org/"&gt;Pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After checking different static site generators I was very confused with
different types of static site generators that I came across. Finally I got the
one I'm looking for, Pelican (Another Python based static site generator.). The
reason for picking Pelican is very simple.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Good Documentation&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;li&gt;Very easy way to use the Markdown texts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The documentation has everything required to migrate your blog from other blog
engines.And I liked the way it structured the blog posts and its contents.It
got clear upper hand over other site generators, I don't need to think twice to
select it.&lt;/p&gt;
&lt;p&gt;Currently I hosted this site under Github, you can &lt;a class="reference external" href="https://github.com/haridas/haridas.github.com"&gt;fork&lt;/a&gt; this project and give
a fresh try to see how quickly you can setup a blog.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="wordpress"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Find the Absolute path in Shell Script</title><link href="//find-the-absolute-path-in-shell-script.html" rel="alternate"></link><updated>2011-11-19T06:01:00+05:30</updated><author><name>haridas</name></author><id>//find-the-absolute-path-in-shell-script.html</id><summary type="html">&lt;p&gt;This is a simple shell script snippet to get the full absolute path of
that file while running it in a shell environment.&lt;/p&gt;
&lt;p&gt;What is the use of this script -- Yeah, this script is really helpful
when you are looking for a stable deployment of a multi-file project in
a Unix based systems. For these type of deployments you have to deal
with the SYSTEM_PATH and PROJECT_HOME_DIR etc, to make our project run
properly by including relative files correctly from the system path.
Commonly what we do is, we hard code the SYSTEM PATH information to a
Global variable so that would resolve every relative path
properly. So how it would be, if we don't need to hard code the
Project Bases paths, instead the project configurations detect it
automatically :). So you could get this by using this shell script
snippet.&lt;/p&gt;
&lt;p&gt;Here we can test how a shell script identify itself where it's located
or its absolute path information.Please create a shell script with
following content and run it from different locations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#Add this content in a shell.sh,&lt;/span&gt;
&lt;span class="c"&gt;#and then run it from different directory level, you can see the&lt;/span&gt;
&lt;span class="c"&gt;#difference.&lt;/span&gt;

&lt;span class="nv"&gt;curr_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;dirname &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;FILE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;  &lt;span class="nv"&gt;$dir&lt;/span&gt;;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Path to this file : $FILE_PATH&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add this script to &lt;strong&gt;/usr/local/&lt;/strong&gt; and run it ( We know that
its current locations is &lt;strong&gt;/usr/local/&lt;/strong&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /
&lt;span class="gp"&gt;#&lt;/span&gt;sh /usr/local/shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr
&lt;span class="gp"&gt;#&lt;/span&gt; sh &lt;span class="nb"&gt;local&lt;/span&gt;/shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="nb"&gt;cd local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;sh shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope the output of the script explained every thing. So you can use
it in your projects to detect the current path automatically. Hope you
enjoyed this hack.&lt;/p&gt;
&lt;p&gt;See you next time.&lt;/p&gt;
</summary><category term="server admin"></category><category term="shell"></category></entry><entry><title>How to use Python Virtualenv and Ruby Version Manager</title><link href="//how-to-use-python-virtualenv-and-ruby-version-manager.html" rel="alternate"></link><updated>2011-08-31T06:20:00+05:30</updated><author><name>haridas</name></author><id>//how-to-use-python-virtualenv-and-ruby-version-manager.html</id><summary type="html">&lt;p&gt;First thing I want tell you that here I'm not comparing these two tools
instead only describing how to install and use them.&lt;/p&gt;
&lt;p&gt;We use these tools to isolate the multiple Python or Ruby versions from
system default Python or Ruby installation. We use Virtualenv for Python
and RVM(Ruby Version Manager) for Ruby.&lt;/p&gt;
&lt;p&gt;Let's consider, our server has slightly old version of packages but we
are currently working with latest version of Python or Ruby packages for
our project, then most probably our project package dependency might be
conflict with corresponding packages installed in the system default
path. To get this work, updating the system packages might not be a good
method, because it may broke our existing projects that depends up on
the system packages and it's very dangerous...!. This problem is common
now because of rapid development and feature updation of packages. To
solve this issues and use the packaging system more flexibly both Python
and Ruby providing their own tools.&lt;/p&gt;
&lt;p&gt;We can first checkout the Python Virtualenv tool for python projects.&lt;/p&gt;
&lt;div class="section" id="virtualenv"&gt;
&lt;h2&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Virtualenv package isolate python package system and corresponding
binaries in to a user defined folder.&lt;/p&gt;
&lt;p&gt;First install &lt;cite&gt;virtualenv&lt;/cite&gt; package by using default pythons package
installation tool or you can use &lt;cite&gt;pip&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create new virtual environment,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;virtualenv python_project
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will create new folder 'python_project', inside this
folder we have three other folders 'bin' for python and other binaries ,
'include' for python header files and finally 'lib' folder holds all
python standard packages. When we will install new python packages under
this virtual environment those files also been comes under this lib
folder.&lt;/p&gt;
&lt;p&gt;To activate and use this virtual environment,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python_project
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ./bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above command will change the current shell session by updating the
system PATH and it also change the shell prompt, to get a notion of we
are in the virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;(virtual)host@name$&lt;/span&gt; which python
&lt;span class="go"&gt;PATH-to-DIR/python_project/bin/python&lt;/span&gt;
&lt;span class="gp"&gt;(virtual)host@name$&lt;/span&gt; which easy_install
&lt;span class="go"&gt;PATH-to-DIR/python_project/bin/easy_install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can see that &lt;cite&gt;python&lt;/cite&gt; and &lt;cite&gt;easy_install&lt;/cite&gt; commands were from
our virtual environment. When creating a virtual environment the basic
python interpreter and package installation tools (&lt;cite&gt;easy_install&lt;/cite&gt;
and &lt;cite&gt;pip&lt;/cite&gt;) were created under the bin directory so you can directly
use them to install new packages under virtual environment easily that
never going to affect the python packages installed in the default
system path(/usr/lib/python-2.x/).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;(virtual)host@name$&lt;/span&gt; deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will deactivate our virtual environment and the control will be
return to system shell prompt, after removing all changes in the system
PATH variable.&lt;/p&gt;
&lt;p&gt;So like this you can create any number of virtual environments with
different package installed in it depending on your project
requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;There is another package 'virtualenvwrapper' to organize and use the
multiple virtual environments by single set of shell commands. Here is
the brief description about virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;To install virtualenvwrapper, as usual you can use easy_install or pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the installation append the following two lines to .bashrc or
.profile file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;export WORKON_HOME=&amp;quot;~/.virtualenvs&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;source /usr/local/bin/virtualenvwrapper.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now from next shell session onwards following commands would be
available to us, which helps to manage the multiple virtual
environments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Create a new virtual environment and enter into it.&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;mkvirtualenv test_proj

&lt;span class="go"&gt;To deactiave&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;deactivate

&lt;span class="go"&gt;If we created multiple virtual environments, to list it by using,&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;workon

&lt;span class="go"&gt;To Activate particular virtual environment from above list.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;workon

&lt;span class="go"&gt;To remove the virtual environment&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rmvirtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This package also provide PRE and POST hooks for all of its commands ,
we can use those hooks to inject our codes while running the
virtualenvwrapper commands.&lt;/p&gt;
&lt;p&gt;This viritualenvwrapper is an additional package that really help both
administrators and programmers to manage multiple project environments
with different versions of python packages were installed.&lt;/p&gt;
&lt;p&gt;Now take a look at how we can do the similar thing in Ruby ,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby-version-manager-rvm"&gt;
&lt;h2&gt;&lt;strong&gt;Ruby Version Manager - RVM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;RVM tool handle multiple ruby versions (ruby-1.8.2, ruby-1.9.1,
ruby-1.9.2 etc..) in our system and help us change the version of ruby
in our system without affecting the ruby installed in our system default
path. for eg; by default our system have ruby-1.8.2 installed, but we
want ruby-1.9.2 for our project. So after installing the ruby-1.9.2
using &lt;cite&gt;rvm&lt;/cite&gt; we can change system default ruby version to ruby-1.9.2,
we can revert this back to system ruby when we requires.&lt;/p&gt;
&lt;p&gt;So in this manner we can install multiple ruby versions and switch
between them, once we switch to a particular version of ruby then that
ruby is available for that system user. This is the brief description
how RVM works in our system. Lets move to setup part.&lt;/p&gt;
&lt;p&gt;You can install RVM from &lt;cite&gt;root&lt;/cite&gt; (Multi user mode)user privilege or
from a &lt;cite&gt;user&lt;/cite&gt; privilege(Single user mode). The single user mode were
recommended, because the RVM only avaiable to that user only, but in
Multi-user mode of RVM installation make it available to all users in
the system.Here we will install RVM in single user mode.&lt;/p&gt;
&lt;p&gt;To install RVM you can use git if it available in your system,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;bash &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -s https://rvm.beginrescueend.com/install/rvm&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OR (If we dont have git installed )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Fetch installer script and run it ourself.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; curl -s https://rvm.beginrescueend.com/install/rvm -o rvm-installer

&lt;span class="gp"&gt;$&lt;/span&gt;chmod +x rvm-installer
&lt;span class="gp"&gt;$&lt;/span&gt;./rvm-installer --version latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installation you can see that a folder (&lt;cite&gt;.rvm&lt;/cite&gt;) were created
in your home directory. This folder holds all RVM related files. Then to
activate &lt;cite&gt;rvm&lt;/cite&gt; command for this user you have do one more step.&lt;/p&gt;
&lt;p&gt;Add following line to your &lt;cite&gt;.bashrc&lt;/cite&gt; file, so new shell session
onwards the &lt;cite&gt;rvm&lt;/cite&gt; commands were available to this user. OR you can
just run bellow code in your current shell to activate it for this user
session only.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; source &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; #&lt;/span&gt;
&lt;span class="go"&gt;   This loads RVM into a shell session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open a new shell session,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;

&lt;span class="go"&gt;Current system ruby version&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm install 1.9.2

&lt;span class="go"&gt;This will install new ruby-1.9.2&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm install 1.9.1

&lt;span class="go"&gt;This will install new ruby-1.9.1&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm list
&lt;span class="go"&gt;rvm rubies&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.1-p431 [ i386 ]&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.2-p290 [ i386 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can see that we have three versions of ruby in our system,
ruby-1.9.1 and ruby-1.9.2 were installed via RVM and ruby-1.8.7 from our
system. To switch between these versions,&lt;/p&gt;
&lt;p&gt;To use ruby-1.9.1 in one shell session only, try bellow commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;rvm use 1.9.1
&lt;span class="gp"&gt;$&lt;/span&gt;ruby --version
&lt;span class="go"&gt;ruby 1.9.1p431 (2011-02-18 revision 30908) [i686-linux]&lt;/span&gt;
&lt;span class="go"&gt;[/shell]&lt;/span&gt;
&lt;span class="go"&gt;To make this version change permanent for all user shell sessions use,&lt;/span&gt;
&lt;span class="go"&gt;[shell]&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rvm --default use 1.9.1
&lt;span class="gp"&gt;$&lt;/span&gt;rvm default list
&lt;span class="go"&gt;rvm rubies&lt;/span&gt;
&lt;span class="go"&gt;=&amp;gt; ruby-1.9.1-p431 [ i386 ]&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.2-p290 [ i386 ]&lt;/span&gt;

&lt;span class="go"&gt;This change will available to current and all new current user&lt;/span&gt;
&lt;span class="go"&gt;   sessions.&lt;/span&gt;
&lt;span class="go"&gt;To get back to system ruby version&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rvm reset

&lt;span class="gp"&gt;$&lt;/span&gt;ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using RVM we can now set your suitable version of ruby, after that you
can install ruby gem packages using &lt;cite&gt;gem&lt;/cite&gt; command of current ruby
version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; gem --version
&lt;span class="go"&gt;1.3.7&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm --default use 1.9.2
&lt;span class="go"&gt;Using /home/haridas/.rvm/gems/ruby-1.9.2-p290&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; gem --version
&lt;span class="go"&gt;1.8.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check the gem versions while we switching between different version of
ruby.&lt;/p&gt;
&lt;p&gt;Ok, thats it. Try out these tools.... have a happy hacking....:)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="ruby"></category></entry><entry><title>RabbitChat - Web based chat system</title><link href="//rabbitchat-web-based-chat-system.html" rel="alternate"></link><updated>2011-07-28T12:10:00+05:30</updated><author><name>haridas</name></author><id>//rabbitchat-web-based-chat-system.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;RabbitChat&lt;/strong&gt; is a simple Web based chat system developed in Tornado
Hight speed Python web framework. It uses Websoket for Full-duplex
communication over http and RabbitMQ Broker for message transaction
between server and connected clients.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/RabbitChat-Arch.png" src="/images/RabbitChat-Arch.png" /&gt;
&lt;p class="caption"&gt;If you want to try this now, checkout a copy of project from this
github url &lt;cite&gt;git&amp;#64;github.com:haridas/RabbitChat.git&lt;/cite&gt;. Or download it
directly from &lt;a class="reference external" href="https://github.com/haridas/RabbitChat"&gt;https://github.com/haridas/RabbitChat&lt;/a&gt;. Please check
the README file for instructions about how to setup and run the
application. It has one branch also, I explained the difference in
README.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I tired to develop this same scenario in the gevent/twisted python
frameworks, but it lacks the support for good RabbitMQ clients. So after
long search I got an idea about how to implement this web based chat
system using Tornado Web Framework. I chose this because the python
RabbitMQ client Pika has good support for the tornado IOLoop, so that we
can integrate the RabbitMQ client with our web application and include
the WebSocket support easily.&lt;/p&gt;
&lt;p&gt;I found few other web based Chat implementations on Gevent, but they
are not using the RabbitMQ for the message passing instead they relay up
on simple data structures. But I want this should be a RabbitMQ. Another
important thing was I want to use Websocket, all frameworks like Gevent
or Twisted or Tornado has support for websocket. But in this case we
need RabbitMQ client support also. Pika is the good python RabbitMQ
client, it has different adapters to integrate it with RabbitMQ and
other frameworks. Adapter for Tornado is already there, so that makes
this implementation possible. The Pika adapters for other frameworks
will come soon.&lt;/p&gt;
&lt;p&gt;You may ask another question, why using RabbitMQ instead of a simple
Message passing data structures, Actually this application is a demo app
and I want to test the use of Websoxket with RabbitMQ. I'm looking
forward to develop a Realtime API's using this architectures. Google app
engine or other similar platforms( &lt;a class="reference external" href="http://code.google.com/p/typhoonae/"&gt;Typhoonae&lt;/a&gt;) using Websocket server
similar to this way. So you can also develop a good implementations
using this demo application.&lt;/p&gt;
&lt;p&gt;I hope this demo application helps you to get an idea about Real Time
Web application development.&lt;/p&gt;
</summary><category term="programming"></category><category term="python"></category><category term="Server Architecture"></category></entry><entry><title>Change and Migrate Django Models using South</title><link href="//change-and-migrate-django-models-using-south.html" rel="alternate"></link><updated>2011-06-17T10:41:00+05:30</updated><author><name>haridas</name></author><id>//change-and-migrate-django-models-using-south.html</id><summary type="html">&lt;img alt="/images/south.png" src="/images/south.png" /&gt;
&lt;p&gt;South is very handy django application to manage the django models. If
we are developing web projects using django we need to change the Django
model several times , In normal case we have to do these changes
manually by editing both django model and backend database
appropriately. This is very frustrating if we have to do it several
times.&lt;/p&gt;
&lt;p&gt;The South application makes it very easy to handle the model changes
and fill the initial data's into the database tables. To setup the South
application along with your django project, you need to do very simple
changes to the settings.py file of your django project. To make it
simple you have to do this step before adding any of your django apps to
the project.&lt;/p&gt;
&lt;p&gt;First of all install the south application to your system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install south
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then you have to add your south app to django settings.py file under&lt;/p&gt;
&lt;p&gt;INSTALLED_APPS veriable, ie;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.sites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c"&gt;# Uncomment the next line to enable the admin:&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c"&gt;# Uncomment the next line to enable admin documentation:&lt;/span&gt;
&lt;span class="c"&gt;# &amp;#39;django.contrib.admindocs&amp;#39;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;---HERE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we added the south app to our django project, the commands
associated with this app is comes under the manage.py.&lt;/p&gt;
&lt;p&gt;Next step is to sync all models to the backend database, for that you
have to use the usual method , ie;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Migrate all tables to backend database,&lt;/span&gt;
&lt;span class="go"&gt;it includes our south apps tables.&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it !. we are now ready to use south app for our apps model
management.&lt;/p&gt;
&lt;p&gt;Currently we added tables of default django apps and south app to
backend. Now we are ready to add our applications to django project.
After adding new django application to the sttings.py INSTALLED_APPS
variable, we need to migrate it's models using south management
commands,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Initially you have to add new app under south , for that,&lt;/span&gt;
&lt;span class="go"&gt;python manage.py schemamigration your_app --initial&lt;/span&gt;
&lt;span class="go"&gt;This will setup your app under south, need to run only once,&lt;/span&gt;
&lt;span class="go"&gt;Then migrate models to backend database,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py migrate your_app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the initial addition of your django app under south, to migrate
the future model changes under the same app, you have to do the bellow
steps,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;After any changes to your model,&lt;/span&gt;
&lt;span class="go"&gt;First detect those changes ,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py schemamigration your_app --auto

&lt;span class="go"&gt;Then Migrate to backend,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py migrate your_app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So using south app you are now manged model changes without touching
backend database. In this manner we can manage all django applications
under your project.&lt;/p&gt;
&lt;p&gt;Try this out ! and save your time.&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category><category term="south"></category></entry><entry><title>playing with timezone using pytz</title><link href="//playing-with-timezone-using-pytz.html" rel="alternate"></link><updated>2011-05-11T04:15:00+05:30</updated><author><name>haridas</name></author><id>//playing-with-timezone-using-pytz.html</id><summary type="html">&lt;p&gt;World Timezone Image from www.physicalgeography.net&lt;/p&gt;
&lt;img alt="/images/world_time2-300x172.gif" src="/images/world_time2-300x172.gif" /&gt;
&lt;p&gt;When we develop web applications some times we need multiple timezone
support. If we don’t have any previous experience then it might be a
tough and confusing job. Here I will help you to get some basics of
Timezone conversion.&lt;/p&gt;
&lt;p&gt;I have been used timezone with django application, but the concept is
same for all languages.So here I will explain things using python
timezone module &amp;quot;pytz&amp;quot;. You have to install this module first into your
system by using &amp;quot;easy_install&amp;quot;&lt;/p&gt;
&lt;p&gt;Install python timezone module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install pytz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This python module support all major timezones and it helps to convert
date and time in one timezone to any other timezones.You can use the
human readable tiemzone names in pytz module to represent the local
timezones.( like Asia/Kolkata, Europe/Paris, EST etc. ).&lt;/p&gt;
&lt;p&gt;When we deal with multiple timezone in our application, we might have
backend database where we store these date and time informations. Most
databases are support UTC as it's the common timezone format. And it's
better to keep a unique timezone information when saving the date and
time in database and database engines not going to support all timezone
formats directly. So we need to stick with commonly used &lt;strong&gt;UTC/GMT&lt;/strong&gt;
(Coordinated Universal Time) timezone format , it also helps to remove
the daylight saving issues.&lt;/p&gt;
&lt;p&gt;Here is the strategies used in web applications with multiple timezone
support :-&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Save Date and Time information’s in database as UTC format.&lt;/li&gt;
&lt;li&gt;Convert the UTC time to corresponding local timezones, based on the
user request and location.&lt;/li&gt;
&lt;li&gt;We take local timezone information from browser or user select a
timezone form the list of timezones that supported by our
application. We can collect this information easily with the help of
Javascript.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bellow I'm explaining some real scenarios where we need to change time
zone information's from UTC to local and vice versa,&lt;/p&gt;
&lt;div class="section" id="saving-date-and-time-in-database"&gt;
&lt;h2&gt;&lt;strong&gt;1. Saving Date and Time in Database :-&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We always save date and time information in database as UTC standard.
In django/Rails or other Framworks we have an option to set Projects
default tiemzone as UTC. So in our database the time and date are always
in UTC. If above methods are not working for your application you
manually need to convert the local system time into UTC format and then
save it. Below code sample explain things more clearly,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;haridas@haridas-debian:~$ python&lt;/span&gt;
&lt;span class="go"&gt;Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40)&lt;/span&gt;
&lt;span class="go"&gt;[GCC 4.4.5] on linux2&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#Get local system time and&lt;/span&gt;
&lt;span class="go"&gt;    date.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 7, 9, 42, 23, 751976)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# utcnow() function&lt;/span&gt;
&lt;span class="go"&gt;     give the UTC time of current local time.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="c"&gt;# But this date tupple doesn&amp;#39;t have the timezone&lt;/span&gt;
&lt;span class="go"&gt;      information.&lt;/span&gt;
&lt;span class="go"&gt;      datetime.datetime(2011, 5, 7, 5, 42, 49, 253618) #We call it as Naive&lt;/span&gt;
&lt;span class="go"&gt;     representation(Date object without Timezone information.)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="c"&gt;#This output None value or nothing.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#Adding&lt;/span&gt;
&lt;span class="go"&gt;     timezone information to &amp;quot;local_system_utc&amp;quot;&lt;/span&gt;

&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;
&lt;span class="go"&gt;     datetime.datetime(2011, 5, 7, 5, 42, 49, 253618, tzinfo=&amp;lt;UTC&amp;gt;) #you can&lt;/span&gt;
&lt;span class="go"&gt;     see the tzinfo variable included with the datetime tuple.&lt;/span&gt;
&lt;span class="go"&gt;     #But when saving UTC time inside DB you can use naive representation of&lt;/span&gt;
&lt;span class="go"&gt;     datetime object in UTC.&lt;/span&gt;
&lt;span class="go"&gt;     #You can do the tzinfo addition when retrieving the time from DB.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By this way we can save time and date in Database even-though users are
from different timezone. We need to consider them only when retrieving
the time object from database, ie; we need to convert our UTC time to
user specific timezone. So this conversion is only for view purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converstion-from-utc-to-localtime"&gt;
&lt;h2&gt;&lt;strong&gt;2. Converstion from UTC to localtime&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We need to convert UTC times to corresponding user timezone, follow the
bellow method,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#Our UTC naive time from DB,&lt;/span&gt;
&lt;span class="go"&gt;   for the time being here I&amp;#39;m taking it as current system UTC time..&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;
&lt;span class="go"&gt;    datetime.datetime(2011, 5, 9, 6, 36, 39, 883479) # UTC time in Naive&lt;/span&gt;
&lt;span class="go"&gt;   form.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Europe/Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#Our Local timezone, to&lt;/span&gt;
&lt;span class="go"&gt;   which we want to convert the UTC time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#Add Timezone information to&lt;/span&gt;
&lt;span class="go"&gt;   UTC time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 9, 6, 36, 39, 883479, tzinfo=&amp;lt;UTC&amp;gt;) # The&lt;/span&gt;
&lt;span class="go"&gt;   full datetime tuple&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now_utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;\&lt;span class="n"&gt;_tz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Convert to local&lt;/span&gt;
&lt;span class="go"&gt;   time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_time&lt;/span&gt; &lt;span class="c"&gt;#Current local time in Paris&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 9, 8, 36, 39, 883479, tzinfo=&amp;lt;DstTzInfo&lt;/span&gt;
&lt;span class="go"&gt;   &amp;#39;Europe/Paris&amp;#39; CEST+2:00:00 DST&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="manage-browser-local-time-at-server"&gt;
&lt;h2&gt;&lt;strong&gt;3. Manage Browser Local Time at Server&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Rather than just conversion of UTC time, some times we need to fetch
records from the Database in between particular interval of local time
time, for eg; From 07:00 Morning to 22:30 Evening of local time. Here
our data is in UTC format, so we need to get the corresponding UTC time
of these local time interval and then search the DB, you can follow
bellow method,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;From browser you will get time in epoch format (A unique number to
represent a particular time) or in string format ie; Y-M-D-H-M-S&lt;/li&gt;
&lt;li&gt;Convert this epoch time to python UTC time.&lt;/li&gt;
&lt;li&gt;Then search the Database.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can reconstruct the javascrpt string format of the date in to
python date object by,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   datetime.datetime(year=2011,month=6,day=7,hour=10,minute=26,second=45)&lt;/span&gt;
&lt;span class="go"&gt;    datetime.datetime(2011, 6, 7, 10, 26, 45)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="go"&gt;   datetime.datetime(year=2011,month=6,day=7,hour=10,minute=26,second=45)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;#From DB we will get the corresponding users timezone information , for&lt;/span&gt;
&lt;span class="go"&gt;   eg; we can take &amp;#39;America/Chicago&amp;#39; as our local timezone.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;America/Chicago&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_std_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;\&lt;span class="n"&gt;_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt;\&lt;span class="n"&gt;_dst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_std_date&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 6, 7, 10, 26, 45, tzinfo=&amp;lt;DstTzInfo&lt;/span&gt;
&lt;span class="go"&gt;   &amp;#39;America/Chicago&amp;#39; CDT-1 day, 19:00:00 DST&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;#Now you have standard localtime and it can be easily converted to the&lt;/span&gt;
&lt;span class="go"&gt;   UTC and then do the Database search and other things.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_std&lt;/span&gt;\&lt;span class="n"&gt;_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_utc&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 6, 7, 15, 26, 45, tzinfo=&amp;lt;UTC&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pytz"></category><category term="timezone"></category></entry><entry><title>Programming Vs. Scripting.</title><link href="//programming-vs-scripting.html" rel="alternate"></link><updated>2010-09-28T09:21:00+05:30</updated><author><name>haridas</name></author><id>//programming-vs-scripting.html</id><summary type="html">&lt;p&gt;When I was started to learn C programming language, I only know the term
Programming. After some time I learned basics of the Javascript and perl for
some internal projects, from there onwards I started to use the two
terms Scripting and Programming. I found some books of Javascript and
Perl describing about this at the beginning. But most of them are
not clearly specifying the difference correctly.&lt;/p&gt;
&lt;p&gt;I think these terms were came  due to the difference of how these codes
are being running under the machine, ie; codes running under Interpreter
were normally called as Scripts and in Compilers were called as
Programs.The codes written in scripting languages are very simple to
understand compared to compiled languages like C/C++ or Java.&lt;/p&gt;
&lt;p&gt;We are using these languages to solve or implement all types of problems. There we
need to give importance to the problems and how well we can solve it using an
efficient algorithm, It also counts the speed of the language, memory
usage, etc. The important is the &lt;cite&gt;Algorithm&lt;/cite&gt;, if it is an optimal algorithm
then you can select any language that you like. Currently all major
Scripting languages like &lt;cite&gt;Python, Perl ,Ruby&lt;/cite&gt; and &lt;cite&gt;Tcl/Tk&lt;/cite&gt; are being
used for general purposes along with famous programming languages like
&lt;cite&gt;C/C++&lt;/cite&gt; and &lt;cite&gt;Java&lt;/cite&gt;.Other scripting languages are &lt;cite&gt;Php&lt;/cite&gt; (Web
based applications ), &lt;cite&gt;Lua Script&lt;/cite&gt; (Embedded language , very fast,low
memory foot print).&lt;/p&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can call different Computer Languages as Scripting language or
Programming language, but remember that the Scripting language can do any
thing that a programming language could accomplish. And after all we have to be
more rational while picking good tool set to solve our problem.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="programming"></category><category term="scripting"></category></entry></feed>