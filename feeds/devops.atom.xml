<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HN - devops</title><link href="https://haridas.in/" rel="alternate"></link><link href="https://haridas.in/feeds/devops.atom.xml" rel="self"></link><id>https://haridas.in/</id><updated>2012-07-27T00:00:00+05:30</updated><entry><title>How to put Encrypted Contents on Cloud Storages</title><link href="https://haridas.in/how-to-put-encrypted-contents-on-cloud-storages.html" rel="alternate"></link><published>2012-07-27T00:00:00+05:30</published><updated>2012-07-27T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2012-07-27:/how-to-put-encrypted-contents-on-cloud-storages.html</id><summary type="html">&lt;p&gt;There is a plenty of cloud storage services out there for free.
It's very convenient and flexible that we can sync our local files with
remote storage. For simple and non-sensitive contents this  is very useful.
But we know that the contents on the net are being open. There is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is a plenty of cloud storage services out there for free.
It's very convenient and flexible that we can sync our local files with
remote storage. For simple and non-sensitive contents this  is very useful.
But we know that the contents on the net are being open. There is a chance for
those contents will get read by others.&lt;/p&gt;
&lt;p&gt;I use Dropbox with my Debian machine to sync my local documents.
But I'm worried about putting some of my documents on the cloud after
knowing that there is a chance of breach. Because of that I avoided putting
those contents on my cloud storage. Later I figured out that we can
put an encrypted contents. I tried to use GPG and other methods to encrypt
the contents and putting them on cloud. But those are all requires lot of work to
push contents each time. GPG mainly used for transferring encrypted contents
between sender and receiver, so that is not the good solution. We required
a method to add the encrypted documents only to our cloud storage and the same
time we want to access the actual copy of the document on our machine.&lt;/p&gt;
&lt;p&gt;Then I saw options for the ecrypted file systems like &lt;strong&gt;ecryptfs&lt;/strong&gt;,
&lt;strong&gt;encfs&lt;/strong&gt; are available under Linux file systems. Which provide
good flexibility that I required, and it only required pain of one time setup.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;encfs&lt;/em&gt; is a User space filesystem, but the &lt;em&gt;ecryptfs&lt;/em&gt; is working in the kernel space,
because of that ecryptfs is little difficult to setup. But ecryptfs is faster
and more secure than the encfs. Both of them using a passphrase as the initial
key to do all the encryption and decryption, we can keep this
passphrase with other file systems or even in external storage device, This is like
normal password required to initiate the encryption or decryption.&lt;/p&gt;
&lt;p&gt;Here I'm explaining how to use the ecryptfs,&lt;/p&gt;
&lt;p&gt;First install the packages required,&lt;/p&gt;
&lt;p&gt;From root user follow these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;apt-get install ecryptfs-utils
&lt;span class="gp"&gt;#&lt;/span&gt;modprobe cryptfs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm using Dropbox as my cloud storage. So inside your drobox folder just create
one folder named Encrypted.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/Dropbox/Encrypted
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/SecureDropbox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are going to keep our documents under the ~/SecureDropbox folder, and the
ecryptfs will generate the corresponding encrypted files on the
~/Dropbox/Encrypted folder. So Dropbox only see this Encrypted files.&lt;/p&gt;
&lt;p&gt;Actually in terms of ecryptfs the ~/Dropbox/Encrypted act as an encrypted
file system partition(like /dev/sda5) and the ~/SecureDrobox act as the mount
point where we can see the actual content of the files, we require the proper
passphrase to mount the encrypted file system to local folder.This mounting and
creation of the encrypted file system is explained bellow.&lt;/p&gt;
&lt;p&gt;To mount the encrypted device to the mount point, use the normal mount command
with ecryptfs as its filesystem. This step ask for set of questions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Mount command requires root privilage.&lt;/span&gt;
mount -t ecryptfs /home/haridas/Dropbox/Encrypted /home/haridas/SecureDropbox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check this console page to see the complete list of commands required to finish
the mounting operation.&lt;/p&gt;
&lt;img alt="" src="/images/encryption-3.jpg" style="width: 100%;" /&gt;
&lt;p&gt;Now check the filesystem to see whether the encrypted filesystem got mounted
to the mount point, use df command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; df -h
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if there is no error, you can now check for the file encryption by directly
adding one text file in to &lt;cite&gt;/home/haridas/SecureDropbox&lt;/cite&gt;, immediately you can see
the encrypted file with the same name under &lt;cite&gt;/home/haridas/Dropbox/Encrypted&lt;/cite&gt;.
Try out this.&lt;/p&gt;
&lt;p&gt;So we are done with the keeping only the encrypted files under Dropbox folder.
So don't need to worry about the sensitive documents. But one thing is that in
order to decrypt the files from other machines, you required the passphrase and
other machines should support the ecryptfs. You can't us mobile
devices to view the encrypted content.&lt;/p&gt;
&lt;p&gt;We need to mount the ecryptefs filesystem in the boot time to avoid that step
every time. That requires passphrase, and set of other configurations, that was
done while mounting the file system initially. We can pass this automatically by
putting it in a &lt;cite&gt;.ecryptfsrc&lt;/cite&gt; file under root home directory. So at boot time
we can see system can read it.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;/root/.ecryptfsrc&lt;/cite&gt; file should have the following lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;key=passphrase:passphrase_passwd_file=/home/haridas/.ecryptfs/.secret-passphrase.txt
ecryptfs_sig=b2f118ee01beb78b
ecryptfs_cipher=aes
ecryptfs_key_bytes=32
ecryptfs_passthrough=n
ecryptfs_enable_filename_crypto=n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After creating /root/.ecryptfsrc file, add the following line to &lt;cite&gt;/etc/fstab&lt;/cite&gt;
to automount at boot time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sr"&gt;/home/&lt;/span&gt;haridas&lt;span class="sr"&gt;/Dropbox/&lt;/span&gt;Encrypted &lt;span class="sr"&gt;/home/&lt;/span&gt;haridas/SecureDropbox  ecryptfs
defaults &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The passphrase is the important thing that you have to keep in your machine or
with external disk. Make sure that the passphrase is available to the system
when you are trying to mount it in the booting time itself.&lt;/p&gt;
&lt;p&gt;Keep the passphrase safe !. Which determines the strength of your encryption.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;NOTE:&lt;/dt&gt;
&lt;dd&gt;Please check the comments by &amp;quot;Jean-Sébastien Iker&amp;quot;, He suggested a good
alternative of encrypting entire home directory using the inbuilt tool
available with the ecryptfs utils package. sdfasd&lt;/dd&gt;
&lt;/dl&gt;
</content><category term="security"></category><category term="server"></category></entry><entry><title>Find the Absolute path in Shell Script</title><link href="https://haridas.in/find-the-absolute-path-in-shell-script.html" rel="alternate"></link><published>2011-11-19T06:01:00+05:30</published><updated>2011-11-19T06:01:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2011-11-19:/find-the-absolute-path-in-shell-script.html</id><summary type="html">&lt;p&gt;This is a simple shell script snippet to get the full absolute path of
that file while running it in a shell environment.&lt;/p&gt;
&lt;p&gt;What is the use of this script -- Yeah, this script is really helpful
when you are looking for a stable deployment of a multi-file project in
a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a simple shell script snippet to get the full absolute path of
that file while running it in a shell environment.&lt;/p&gt;
&lt;p&gt;What is the use of this script -- Yeah, this script is really helpful
when you are looking for a stable deployment of a multi-file project in
a Unix based systems. For these type of deployments you have to deal
with the SYSTEM_PATH and PROJECT_HOME_DIR etc, to make our project run
properly by including relative files correctly from the system path.
Commonly what we do is, we hard code the SYSTEM PATH information to a
Global variable so that would resolve every relative path
properly. So how it would be, if we don't need to hard code the
Project Bases paths, instead the project configurations detect it
automatically :). So you could get this by using this shell script
snippet.&lt;/p&gt;
&lt;p&gt;Here we can test how a shell script identify itself where it's located
or its absolute path information.Please create a shell script with
following content and run it from different locations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Add this content in a shell.sh,&lt;/span&gt;
&lt;span class="c1"&gt;#and then run it from different directory level, you can see the&lt;/span&gt;
&lt;span class="c1"&gt;#difference.&lt;/span&gt;

&lt;span class="nv"&gt;curr_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;dirname &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;FILE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;  &lt;span class="nv"&gt;$dir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Path to this file : &lt;/span&gt;&lt;span class="nv"&gt;$FILE_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add this script to &lt;strong&gt;/usr/local/&lt;/strong&gt; and run it ( We know that
its current locations is &lt;strong&gt;/usr/local/&lt;/strong&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /
&lt;span class="gp"&gt;#&lt;/span&gt;sh /usr/local/shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr
&lt;span class="gp"&gt;#&lt;/span&gt; sh local/shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;sh shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope the output of the script explained every thing. So you can use
it in your projects to detect the current path automatically. Hope you
enjoyed this hack.&lt;/p&gt;
</content><category term="server admin"></category><category term="shell"></category></entry></feed>