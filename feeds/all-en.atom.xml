<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>haridas.in</title><link href="/" rel="alternate"></link><link href="//feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2011-06-17T10:41:00+05:30</updated><entry><title>Change and Migrate Django Models using South</title><link href="//change-and-migrate-django-models-using-south.html" rel="alternate"></link><updated>2011-06-17T10:41:00+05:30</updated><author><name>haridas</name></author><id>//change-and-migrate-django-models-using-south.html</id><summary type="html">&lt;img alt="/images/south.png" src="/images/south.png" /&gt;
&lt;p&gt;South is very handy django application to manage the django models. If
we are developing web projects using django we need to change the Django
model several times , In normal case we have to do these changes
manually by editing both django model and backend database
appropriately. This is very frustrating if we have to do it several
times.&lt;/p&gt;
&lt;p&gt;The South application makes it very easy to handle the model changes
and fill the initial data's into the database tables. To setup the South
application along with your django project, you need to do very simple
changes to the settings.py file of your django project. To make it
simple you have to do this step before adding any of your django apps to
the project.&lt;/p&gt;
&lt;p&gt;First of all install the south application to your system.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
easy_install south
&lt;/pre&gt;
&lt;p&gt;then you have to add your south app to django settings.py file under&lt;/p&gt;
&lt;p&gt;INSTALLED_APPS veriable, ie;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
INSTALLED\_APPS = (
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.sites',
'django.contrib.messages',
'django.contrib.staticfiles',
# Uncomment the next line to enable the admin:
'django.contrib.admin',
# Uncomment the next line to enable admin documentation:
# 'django.contrib.admindocs',
'south', # &amp;lt;---HERE
)
&lt;/pre&gt;
&lt;p&gt;Now we added the south app to our django project, the commands
associated with this app is comes under the manage.py.&lt;/p&gt;
&lt;p&gt;Next step is to sync all models to the backend database, for that you
have to use the usual method , ie;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#Migrate all tables to backend database,
#it includes our south apps tables.
python manage.py syncdb
&lt;/pre&gt;
&lt;p&gt;That's it !. we are now ready to use south app for our apps model
management.&lt;/p&gt;
&lt;p&gt;Currently we added tables of default django apps and south app to
backend. Now we are ready to add our applications to django project.
After adding new django application to the sttings.py INSTALLED_APPS
variable, we need to migrate it's models using south management
commands:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#Initially you have to add new app under south , for that,
python manage.py schemamigration your\_app --initial
#This will setup your app under south, need to run only once,
#Then migrate models to backend database,
python manage.py migrate your\_app
&lt;/pre&gt;
&lt;p&gt;After the initial addition of your django app under south, to migrate
the future model changes under the same app, you have to do the bellow
steps,:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#After any changes to your model,
#First detect those changes ,
python manage.py schemamigration your\_app --auto
#Then Migrate to backend,
python manage.py migrate your\_app
&lt;/pre&gt;
&lt;p&gt;So using south app you are now manged model changes without touching
backend database. In this manner we can manage all django applications
under your project.&lt;/p&gt;
&lt;p&gt;Try this out ! and save your time.&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category><category term="south"></category></entry><entry><title>Programming Vs. Scripting.</title><link href="//programming-vs-scripting.html" rel="alternate"></link><updated>2010-09-28T09:21:00+05:30</updated><author><name>haridas</name></author><id>//programming-vs-scripting.html</id><summary type="html">&lt;img alt="/images/scrpt_vs_pgrms2-300x165.jpg" src="/images/scrpt_vs_pgrms2-300x165.jpg" /&gt;
&lt;p&gt;When I was started to learn C programming language, I only know the term
Programming. After some time I learned about the Javascript and perl for
some internal projects, from there onwards I started to use the two
terms Scripting and Programming. I found some books of Javascript and
Perl describing about this at the beginning itself. But most of them are
not clearly specifying the difference correctly.&lt;/p&gt;
&lt;p&gt;I think these terms were came  due to the difference of how these codes
are being running under the machine, ie; codes running under Interpreter
were normally called as Scripts and in Compilers were called as
Programs.The codes written in scripting languages are very simple to
understand when compared with compiled languages like C/C++ or Java. But
Java and other dynamic languages like Python have both interpretor and
compilers to run its codes, even though we call Python as Scripting
language. From this we can say that the naming hasn't any importance.&lt;/p&gt;
&lt;p&gt;We are using these languages to solve or implement all types of logics.Here we
need to give importance to the problems and how well we can solve it
based on, which algorithm is being used, speed of the language, memory
usage, etc...The important thing is the &lt;cite&gt;Algorithm&lt;/cite&gt;, if it is optimal
then you can select any language that you like. Currently all major
Scripting languages like &lt;cite&gt;Python, Perl ,Ruby&lt;/cite&gt; and &lt;cite&gt;Tcl/Tk&lt;/cite&gt; are being
used for general purposes along with famous programming languages like
&lt;cite&gt;C/C++&lt;/cite&gt; and &lt;cite&gt;Java&lt;/cite&gt;.Other scripting languages are &lt;cite&gt;Php&lt;/cite&gt; (Web
based applications ), &lt;cite&gt;Lua Script&lt;/cite&gt; (Embedded language , very fast,low
memory foot print and also used for Game developments).&lt;/p&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can call the Computer Languages as Scripting language or
Programming language, but remember the Scripting languages can do any
thing and we should not consider it as a secondary one.&lt;/p&gt;
&lt;/div&gt;
</summary></entry></feed>