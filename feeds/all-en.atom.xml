<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>haridas.in</title><link href="/" rel="alternate"></link><link href="//feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2012-05-20T12:53:06+05:30</updated><entry><title>Wordpress blog migrated to Pelican</title><link href="//wordpress-blog-migrated-to-pelican.html" rel="alternate"></link><updated>2012-05-20T12:53:06+05:30</updated><author><name>haridas</name></author><id>//wordpress-blog-migrated-to-pelican.html</id><summary type="html">&lt;p&gt;Initially this blog was a wordpress blog. As you know the reasons for
that. Wordpress is the most successful and feature rich blogging engine. So
I chose it without any doubt. I didn't even search for a python alternative blog
engine at that time. But after a while I felt the dificulties while adding some
changes to the wordpress code, bugs with the wordpress plugins and more
importantly the Web UI is very annoying while typing new contents.&lt;/p&gt;
&lt;p&gt;If we are considering the technical points, wordpress is a dynamic blog engine,
it is an over killing for blogs and other wiki based sites. Main issue is with speed of
page rendering.The static pages are way faster compared to the dynamic contents. I know
wordpress has caching plugins to make the static pages out of dynamic one but
that are not a very reliable solution.&lt;/p&gt;
&lt;p&gt;Actually above points are all come to my mind after seeing the static site
generators and their awesome features and flexibility.&lt;/p&gt;
&lt;div class="section" id="advantages-of-static-site-generators-over-dynamic-blog-engines"&gt;
&lt;h2&gt;Advantages of static site generators over Dynamic blog engines&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Serve html directly, so very fast.&lt;/li&gt;
&lt;li&gt;Easy maintenance of the site, very less pain with server setup.&lt;/li&gt;
&lt;li&gt;Use your favourite Text editors for blog posting. I use VIM :).&lt;/li&gt;
&lt;li&gt;It use Markdown and Restructured Text Syntaxes for blog entry. So we just need to type
the post in normal text with simple formating. So don't worry about the
html formatting while typing the content.&lt;/li&gt;
&lt;li&gt;Host it on Github,  and very easy version control and site backup.&lt;/li&gt;
&lt;li&gt;Very easy to customize the Themes  or other internals if you want.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next step was which static site generator I will choose for my site. There are
a lot of them were implemented in Python and Ruby. I went through some of them
and finally chose &lt;a class="reference external" href="http://pelican.notmyidea.org/"&gt;Pelican&lt;/a&gt; a Python based static site generator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jekyll"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll is a Ruby based system developed at github.com and it is very commonly
used in the Ruby world. I tried to use it because of its native github
support, but finally realized that we can do the same thing with other site
generators. And other problems I found with Jekyll was,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Its structure is difficult  compared to other site generators.&lt;/li&gt;
&lt;li&gt;It's a Ruby based one, I'm more comfortable with Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="hyde"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://hyde.github.com"&gt;Hyde&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hyde is a  Python based static site generator like Jekyll and it removes some
of the difficulties with Jekyll. But it lacks good documentation, and mainly
a way to migrate from other blog engines like wordpress. I can see
that the project is evolving lately and got github site for documentation. But
it only covers the basics right now. I hope it will get good documentation very
soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pelican.notmyidea.org/"&gt;Pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was very confused with different choices of static site generators, I came across
Pelican (Another Python based static site generator.). It attracted me quickly
because of its,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Good Documentation&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;li&gt;Very easy way to use the Markdown texts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The documentation has everything required to migrate your blog from other blog
engines.And I liked the way it structured the blog posts and its contents.It
got clear upper hand over other site generators, I don't need to think twice to
select it.&lt;/p&gt;
&lt;p&gt;Currently I hosted this site under Github, you can &lt;a class="reference external" href="https://github.com/haridas/haridas.github.com"&gt;fork&lt;/a&gt; the project and give
a fresh try to see how quickly you can setup a blog.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="wordpress"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Find the Absolute path in Shell Script</title><link href="//find-the-absolute-path-in-shell-script.html" rel="alternate"></link><updated>2011-11-19T06:01:00+05:30</updated><author><name>haridas</name></author><id>//find-the-absolute-path-in-shell-script.html</id><summary type="html">&lt;p&gt;This is a simple shell script snippet to get the full absolute path of
that file while running it in a shell environment.&lt;/p&gt;
&lt;p&gt;What is the use of this script -- Yeah, this script is really helpful
when you are looking for a stable deployment of a multi-file project in
a Unix based systems. For these type of deployments you have to deal
with the SYSTEM PATH and PROJECT HOME DIR etc, to make our project run
properly by including relative files correctly from the system path.
Commonly what we do is, we hard code the SYSTEM PATH information to a
Global variable so that would be resolve every relative path
resolutions. So how it would be, if we don't need to hard code the
Project Bases paths, instead the project configurations detect it
automatically :). So you could get this by using this shell script
snippet.&lt;/p&gt;
&lt;p&gt;Here we can test how a shell script identify itself where it's located
or its absolute path information.Please create a shell script with
following content and run it from different locations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#Add this content in a shell.sh,&lt;/span&gt;
&lt;span class="c"&gt;#and then run it from different directory level, you can see the&lt;/span&gt;
&lt;span class="c"&gt;#difference.&lt;/span&gt;

&lt;span class="nv"&gt;curr_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;dirname &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Absolute PATH : `cd $dir; pwd` &amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add this script to &lt;strong&gt;/usr/local/&lt;/strong&gt; and run it ( We know that
its current locations is &lt;strong&gt;/usr/local/&lt;/strong&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /
&lt;span class="gp"&gt;#&lt;/span&gt;sh /usr/local/shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr
&lt;span class="gp"&gt;#&lt;/span&gt; sh &lt;span class="nb"&gt;local&lt;/span&gt;/shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="nb"&gt;cd local&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;sh shell.sh
&lt;span class="go"&gt;Absolute PATH : /usr/local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope the output of the script explained every thing. So you can use
it in your projects to detect the current path automatically. Hope you
enjoyed this hack.&lt;/p&gt;
&lt;p&gt;See you next time.&lt;/p&gt;
</summary><category term="server admin"></category><category term="shell"></category></entry><entry><title>How to use Python Virtualenv and Ruby Version Manager</title><link href="//how-to-use-python-virtualenv-and-ruby-version-manager.html" rel="alternate"></link><updated>2011-08-31T06:20:00+05:30</updated><author><name>haridas</name></author><id>//how-to-use-python-virtualenv-and-ruby-version-manager.html</id><summary type="html">&lt;p&gt;First thing I want tell you that here I'm not comparing these two tools
instead only describing how to install and use them.&lt;/p&gt;
&lt;p&gt;We use these tools to isolate the multiple Python or Ruby versions from
system default Python or Ruby installation. We use Virtualenv for Python
and RVM(Ruby Version Manager) for Ruby.&lt;/p&gt;
&lt;p&gt;Let's consider, our server has slightly old version of packages but we
are currently working with latest version of Python or Ruby packages for
our project, then most probably our project package dependency might be
conflict with corresponding packages installed in the system default
path. To get this work, updating the system packages might not be a good
method, because it may broke our existing projects that depends up on
the system packages and it's very dangerous...!. This problem is common
now because of rapid development and feature updation of packages. To
solve this issues and use the packaging system more flexibly both Python
and Ruby providing their own tools.&lt;/p&gt;
&lt;p&gt;We can first checkout the Python Virtualenv tool for python projects.&lt;/p&gt;
&lt;div class="section" id="virtualenv"&gt;
&lt;h2&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Virtualenv package isolate python package system and corresponding
binaries in to a user defined folder.&lt;/p&gt;
&lt;p&gt;First install &lt;cite&gt;virtualenv&lt;/cite&gt; package by using default pythons package
installation tool or you can use &lt;cite&gt;pip&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create new virtual environment,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;virtualenv python_project
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will create new folder 'python_project', inside this
folder we have three other folders 'bin' for python and other binaries ,
'include' for python header files and finally 'lib' folder holds all
python standard packages. When we will install new python packages under
this virtual environment those files also been comes under this lib
folder.&lt;/p&gt;
&lt;p&gt;To activate and use this virtual environment,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python_project
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ./bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above command will change the current shell session by updating the
system PATH and it also change the shell prompt, to get a notion of we
are in the virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;(virtual)host@name$&lt;/span&gt; which python
&lt;span class="go"&gt;PATH-to-DIR/python_project/bin/python&lt;/span&gt;
&lt;span class="gp"&gt;(virtual)host@name$&lt;/span&gt; which easy_install
&lt;span class="go"&gt;PATH-to-DIR/python_project/bin/easy_install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can see that &lt;cite&gt;python&lt;/cite&gt; and &lt;cite&gt;easy_install&lt;/cite&gt; commands were from
our virtual environment. When creating a virtual environment the basic
python interpreter and package installation tools (&lt;cite&gt;easy_install&lt;/cite&gt;
and &lt;cite&gt;pip&lt;/cite&gt;) were created under the bin directory so you can directly
use them to install new packages under virtual environment easily that
never going to affect the python packages installed in the default
system path(/usr/lib/python-2.x/).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;(virtual)host@name$&lt;/span&gt; deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will deactivate our virtual environment and the control will be
return to system shell prompt, after removing all changes in the system
PATH variable.&lt;/p&gt;
&lt;p&gt;So like this you can create any number of virtual environments with
different package installed in it depending on your project
requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;There is another package 'virtualenvwrapper' to organize and use the
multiple virtual environments by single set of shell commands. Here is
the brief description about virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;To install virtualenvwrapper, as usual you can use easy_install or pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the installation append the following two lines to .bashrc or
.profile file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;export WORKON_HOME=&amp;quot;~/.virtualenvs&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;source /usr/local/bin/virtualenvwrapper.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now from next shell session onwards following commands would be
available to us, which helps to manage the multiple virtual
environments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Create a new virtual environment and enter into it.&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;mkvirtualenv test_proj

&lt;span class="go"&gt;To deactiave&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;deactivate

&lt;span class="go"&gt;If we created multiple virtual environments, to list it by using,&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;workon

&lt;span class="go"&gt;To Activate particular virtual environment from above list.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;workon

&lt;span class="go"&gt;To remove the virtual environment&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rmvirtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This package also provide PRE and POST hooks for all of its commands ,
we can use those hooks to inject our codes while running the
virtualenvwrapper commands.&lt;/p&gt;
&lt;p&gt;This viritualenvwrapper is an additional package that really help both
administrators and programmers to manage multiple project environments
with different versions of python packages were installed.&lt;/p&gt;
&lt;p&gt;Now take a look at how we can do the similar thing in Ruby ,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby-version-manager-rvm"&gt;
&lt;h2&gt;&lt;strong&gt;Ruby Version Manager - RVM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;RVM tool handle multiple ruby versions (ruby-1.8.2, ruby-1.9.1,
ruby-1.9.2 etc..) in our system and help us change the version of ruby
in our system without affecting the ruby installed in our system default
path. for eg; by default our system have ruby-1.8.2 installed, but we
want ruby-1.9.2 for our project. So after installing the ruby-1.9.2
using &lt;cite&gt;rvm&lt;/cite&gt; we can change system default ruby version to ruby-1.9.2,
we can revert this back to system ruby when we requires.&lt;/p&gt;
&lt;p&gt;So in this manner we can install multiple ruby versions and switch
between them, once we switch to a particular version of ruby then that
ruby is available for that system user. This is the brief description
how RVM works in our system. Lets move to setup part.&lt;/p&gt;
&lt;p&gt;You can install RVM from &lt;cite&gt;root&lt;/cite&gt; (Multi user mode)user privilege or
from a &lt;cite&gt;user&lt;/cite&gt; privilege(Single user mode). The single user mode were
recommended, because the RVM only avaiable to that user only, but in
Multi-user mode of RVM installation make it available to all users in
the system.Here we will install RVM in single user mode.&lt;/p&gt;
&lt;p&gt;To install RVM you can use git if it available in your system,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;bash &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -s https://rvm.beginrescueend.com/install/rvm&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OR (If we dont have git installed )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Fetch installer script and run it ourself.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; curl -s https://rvm.beginrescueend.com/install/rvm -o rvm-installer

&lt;span class="gp"&gt;$&lt;/span&gt;chmod +x rvm-installer
&lt;span class="gp"&gt;$&lt;/span&gt;./rvm-installer --version latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installation you can see that a folder (&lt;cite&gt;.rvm&lt;/cite&gt;) were created
in your home directory. This folder holds all RVM related files. Then to
activate &lt;cite&gt;rvm&lt;/cite&gt; command for this user you have do one more step.&lt;/p&gt;
&lt;p&gt;Add following line to your &lt;cite&gt;.bashrc&lt;/cite&gt; file, so new shell session
onwards the &lt;cite&gt;rvm&lt;/cite&gt; commands were available to this user. OR you can
just run bellow code in your current shell to activate it for this user
session only.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; source &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; #&lt;/span&gt;
&lt;span class="go"&gt;   This loads RVM into a shell session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open a new shell session,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;

&lt;span class="go"&gt;Current system ruby version&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm install 1.9.2

&lt;span class="go"&gt;This will install new ruby-1.9.2&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm install 1.9.1

&lt;span class="go"&gt;This will install new ruby-1.9.1&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm list
&lt;span class="go"&gt;rvm rubies&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.1-p431 [ i386 ]&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.2-p290 [ i386 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can see that we have three versions of ruby in our system,
ruby-1.9.1 and ruby-1.9.2 were installed via RVM and ruby-1.8.7 from our
system. To switch between these versions,&lt;/p&gt;
&lt;p&gt;To use ruby-1.9.1 in one shell session only, try bellow commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;rvm use 1.9.1
&lt;span class="gp"&gt;$&lt;/span&gt;ruby --version
&lt;span class="go"&gt;ruby 1.9.1p431 (2011-02-18 revision 30908) [i686-linux]&lt;/span&gt;
&lt;span class="go"&gt;[/shell]&lt;/span&gt;
&lt;span class="go"&gt;To make this version change permanent for all user shell sessions use,&lt;/span&gt;
&lt;span class="go"&gt;[shell]&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rvm --default use 1.9.1
&lt;span class="gp"&gt;$&lt;/span&gt;rvm default list
&lt;span class="go"&gt;rvm rubies&lt;/span&gt;
&lt;span class="go"&gt;=&amp;gt; ruby-1.9.1-p431 [ i386 ]&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.2-p290 [ i386 ]&lt;/span&gt;

&lt;span class="go"&gt;This change will available to current and all new current user&lt;/span&gt;
&lt;span class="go"&gt;   sessions.&lt;/span&gt;
&lt;span class="go"&gt;To get back to system ruby version&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rvm reset

&lt;span class="gp"&gt;$&lt;/span&gt;ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using RVM we can now set your suitable version of ruby, after that you
can install ruby gem packages using &lt;cite&gt;gem&lt;/cite&gt; command of current ruby
version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; gem --version
&lt;span class="go"&gt;1.3.7&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm --default use 1.9.2
&lt;span class="go"&gt;Using /home/haridas/.rvm/gems/ruby-1.9.2-p290&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; gem --version
&lt;span class="go"&gt;1.8.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check the gem versions while we switching between different version of
ruby.&lt;/p&gt;
&lt;p&gt;Ok, thats it. Try out these tools.... have a happy hacking....:)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="ruby"></category></entry><entry><title>RabbitChat - Web based chat system</title><link href="//rabbitchat-web-based-chat-system.html" rel="alternate"></link><updated>2011-07-28T12:10:00+05:30</updated><author><name>haridas</name></author><id>//rabbitchat-web-based-chat-system.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;RabbitChat&lt;/strong&gt; is a simple Web based chat system developed in Tornado
Hight speed Python web framework. It uses Websoket for Full-duplex
communication over http and RabbitMQ Broker for message transaction
between server and connected clients.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/RabbitChat-Arch.png" src="/images/RabbitChat-Arch.png" /&gt;
&lt;p class="caption"&gt;If you want to try this now, checkout a copy of project from this
github url &lt;cite&gt;git&amp;#64;github.com:haridas/RabbitChat.git&lt;/cite&gt;. Or download it
directly from &lt;a class="reference external" href="https://github.com/haridas/RabbitChat"&gt;https://github.com/haridas/RabbitChat&lt;/a&gt;. Please check
the README file for instructions about how to setup and run the
application. It has one branch also, I explained the difference in
README.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I tired to develop this same scenario in the gevent/twisted python
frameworks, but it lacks the support for good RabbitMQ clients. So after
long search I got an idea about how to implement this web based chat
system using Tornado Web Framework. I chose this because the python
RabbitMQ client Pika has good support for the tornado IOLoop, so that we
can integrate the RabbitMQ client with our web application and include
the WebSocket support easily.&lt;/p&gt;
&lt;p&gt;I found few other web based Chat implementations on Gevent, but they
are not using the RabbitMQ for the message passing instead they relay up
on simple data structures. But I want this should be a RabbitMQ. Another
important thing was I want to use Websocket, all frameworks like Gevent
or Twisted or Tornado has support for websocket. But in this case we
need RabbitMQ client support also. Pika is the good python RabbitMQ
client, it has different adapters to integrate it with RabbitMQ and
other frameworks. Adapter for Tornado is already there, so that makes
this implementation possible. The Pika adapters for other frameworks
will come soon.&lt;/p&gt;
&lt;p&gt;You may ask another question, why using RabbitMQ instead of a simple
Message passing data structures, Actually this application is a demo app
and I want to test the use of Websoxket with RabbitMQ. I'm looking
forward to develop a Realtime API's using this architectures. Google app
engine or other similar platforms( &lt;a class="reference external" href="http://code.google.com/p/typhoonae/"&gt;Typhoonae&lt;/a&gt;) using Websocket server
similar to this way. So you can also develop a good implementations
using this demo application.&lt;/p&gt;
&lt;p&gt;I hope this demo application helps you to get an idea about Real Time
Web application development.&lt;/p&gt;
</summary><category term="programming"></category><category term="python"></category><category term="Server Architecture"></category></entry><entry><title>Change and Migrate Django Models using South</title><link href="//change-and-migrate-django-models-using-south.html" rel="alternate"></link><updated>2011-06-17T10:41:00+05:30</updated><author><name>haridas</name></author><id>//change-and-migrate-django-models-using-south.html</id><summary type="html">&lt;img alt="/images/south.png" src="/images/south.png" /&gt;
&lt;p&gt;South is very handy django application to manage the django models. If
we are developing web projects using django we need to change the Django
model several times , In normal case we have to do these changes
manually by editing both django model and backend database
appropriately. This is very frustrating if we have to do it several
times.&lt;/p&gt;
&lt;p&gt;The South application makes it very easy to handle the model changes
and fill the initial data's into the database tables. To setup the South
application along with your django project, you need to do very simple
changes to the settings.py file of your django project. To make it
simple you have to do this step before adding any of your django apps to
the project.&lt;/p&gt;
&lt;p&gt;First of all install the south application to your system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install south
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then you have to add your south app to django settings.py file under&lt;/p&gt;
&lt;p&gt;INSTALLED_APPS veriable, ie;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.sites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c"&gt;# Uncomment the next line to enable the admin:&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c"&gt;# Uncomment the next line to enable admin documentation:&lt;/span&gt;
&lt;span class="c"&gt;# &amp;#39;django.contrib.admindocs&amp;#39;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;---HERE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we added the south app to our django project, the commands
associated with this app is comes under the manage.py.&lt;/p&gt;
&lt;p&gt;Next step is to sync all models to the backend database, for that you
have to use the usual method , ie;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Migrate all tables to backend database,&lt;/span&gt;
&lt;span class="go"&gt;it includes our south apps tables.&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it !. we are now ready to use south app for our apps model
management.&lt;/p&gt;
&lt;p&gt;Currently we added tables of default django apps and south app to
backend. Now we are ready to add our applications to django project.
After adding new django application to the sttings.py INSTALLED_APPS
variable, we need to migrate it's models using south management
commands,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Initially you have to add new app under south , for that,&lt;/span&gt;
&lt;span class="go"&gt;python manage.py schemamigration your_app --initial&lt;/span&gt;
&lt;span class="go"&gt;This will setup your app under south, need to run only once,&lt;/span&gt;
&lt;span class="go"&gt;Then migrate models to backend database,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py migrate your_app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the initial addition of your django app under south, to migrate
the future model changes under the same app, you have to do the bellow
steps,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;After any changes to your model,&lt;/span&gt;
&lt;span class="go"&gt;First detect those changes ,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py schemamigration your_app --auto

&lt;span class="go"&gt;Then Migrate to backend,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py migrate your_app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So using south app you are now manged model changes without touching
backend database. In this manner we can manage all django applications
under your project.&lt;/p&gt;
&lt;p&gt;Try this out ! and save your time.&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category><category term="south"></category></entry><entry><title>playing with timezone using pytz</title><link href="//playing-with-timezone-using-pytz.html" rel="alternate"></link><updated>2011-05-11T04:15:00+05:30</updated><author><name>haridas</name></author><id>//playing-with-timezone-using-pytz.html</id><summary type="html">&lt;p&gt;World Timezone Image from www.physicalgeography.net&lt;/p&gt;
&lt;img alt="/images/world_time2-300x172.gif" src="/images/world_time2-300x172.gif" /&gt;
&lt;p&gt;When we develop web applications some times we need multiple timezone
support. If we don’t have any previous experience then it might be a
tough and confusing job. Here I will help you to get some basics of
Timezone conversion.&lt;/p&gt;
&lt;p&gt;I have been used timezone with django application, but the concept is
same for all languages.So here I will explain things using python
timezone module &amp;quot;pytz&amp;quot;. You have to install this module first into your
system by using &amp;quot;easy_install&amp;quot;&lt;/p&gt;
&lt;p&gt;Install python timezone module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install pytz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This python module support all major timezones and it helps to convert
date and time in one timezone to any other timezones.You can use the
human readable tiemzone names in pytz module to represent the local
timezones.( like Asia/Kolkata, Europe/Paris, EST etc. ).&lt;/p&gt;
&lt;p&gt;When we deal with multiple timezone in our application, we might have
backend database where we store these date and time informations. Most
databases are support UTC as it's the common timezone format. And it's
better to keep a unique timezone information when saving the date and
time in database and database engines not going to support all timezone
formats directly. So we need to stick with commonly used &lt;strong&gt;UTC/GMT&lt;/strong&gt;
(Coordinated Universal Time) timezone format , it also helps to remove
the daylight saving issues.&lt;/p&gt;
&lt;p&gt;Here is the strategies used in web applications with multiple timezone
support :-&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Save Date and Time information’s in database as UTC format.&lt;/li&gt;
&lt;li&gt;Convert the UTC time to corresponding local timezones, based on the
user request and location.&lt;/li&gt;
&lt;li&gt;We take local timezone information from browser or user select a
timezone form the list of timezones that supported by our
application. We can collect this information easily with the help of
Javascript.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bellow I'm explaining some real scenarios where we need to change time
zone information's from UTC to local and vice versa,&lt;/p&gt;
&lt;div class="section" id="saving-date-and-time-in-database"&gt;
&lt;h2&gt;&lt;strong&gt;1. Saving Date and Time in Database :-&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We always save date and time information in database as UTC standard.
In django/Rails or other Framworks we have an option to set Projects
default tiemzone as UTC. So in our database the time and date are always
in UTC. If above methods are not working for your application you
manually need to convert the local system time into UTC format and then
save it. Below code sample explain things more clearly,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;haridas@haridas-debian:~$ python&lt;/span&gt;
&lt;span class="go"&gt;Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40)&lt;/span&gt;
&lt;span class="go"&gt;[GCC 4.4.5] on linux2&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#Get local system time and&lt;/span&gt;
&lt;span class="go"&gt;    date.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 7, 9, 42, 23, 751976)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# utcnow() function&lt;/span&gt;
&lt;span class="go"&gt;     give the UTC time of current local time.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="c"&gt;# But this date tupple doesn&amp;#39;t have the timezone&lt;/span&gt;
&lt;span class="go"&gt;      information.&lt;/span&gt;
&lt;span class="go"&gt;      datetime.datetime(2011, 5, 7, 5, 42, 49, 253618) #We call it as Naive&lt;/span&gt;
&lt;span class="go"&gt;     representation(Date object without Timezone information.)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="c"&gt;#This output None value or nothing.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#Adding&lt;/span&gt;
&lt;span class="go"&gt;     timezone information to &amp;quot;local_system_utc&amp;quot;&lt;/span&gt;

&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;
&lt;span class="go"&gt;     datetime.datetime(2011, 5, 7, 5, 42, 49, 253618, tzinfo=&amp;lt;UTC&amp;gt;) #you can&lt;/span&gt;
&lt;span class="go"&gt;     see the tzinfo variable included with the datetime tuple.&lt;/span&gt;
&lt;span class="go"&gt;     #But when saving UTC time inside DB you can use naive representation of&lt;/span&gt;
&lt;span class="go"&gt;     datetime object in UTC.&lt;/span&gt;
&lt;span class="go"&gt;     #You can do the tzinfo addition when retrieving the time from DB.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By this way we can save time and date in Database even-though users are
from different timezone. We need to consider them only when retrieving
the time object from database, ie; we need to convert our UTC time to
user specific timezone. So this conversion is only for view purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converstion-from-utc-to-localtime"&gt;
&lt;h2&gt;&lt;strong&gt;2. Converstion from UTC to localtime&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We need to convert UTC times to corresponding user timezone, follow the
bellow method,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#Our UTC naive time from DB,&lt;/span&gt;
&lt;span class="go"&gt;   for the time being here I&amp;#39;m taking it as current system UTC time..&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;
&lt;span class="go"&gt;    datetime.datetime(2011, 5, 9, 6, 36, 39, 883479) # UTC time in Naive&lt;/span&gt;
&lt;span class="go"&gt;   form.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Europe/Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#Our Local timezone, to&lt;/span&gt;
&lt;span class="go"&gt;   which we want to convert the UTC time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#Add Timezone information to&lt;/span&gt;
&lt;span class="go"&gt;   UTC time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 9, 6, 36, 39, 883479, tzinfo=&amp;lt;UTC&amp;gt;) # The&lt;/span&gt;
&lt;span class="go"&gt;   full datetime tuple&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now_utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;\&lt;span class="n"&gt;_tz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Convert to local&lt;/span&gt;
&lt;span class="go"&gt;   time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_time&lt;/span&gt; &lt;span class="c"&gt;#Current local time in Paris&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 9, 8, 36, 39, 883479, tzinfo=&amp;lt;DstTzInfo&lt;/span&gt;
&lt;span class="go"&gt;   &amp;#39;Europe/Paris&amp;#39; CEST+2:00:00 DST&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="manage-browser-local-time-at-server"&gt;
&lt;h2&gt;&lt;strong&gt;3. Manage Browser Local Time at Server&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Rather than just conversion of UTC time, some times we need to fetch
records from the Database in between particular interval of local time
time, for eg; From 07:00 Morning to 22:30 Evening of local time. Here
our data is in UTC format, so we need to get the corresponding UTC time
of these local time interval and then search the DB, you can follow
bellow method,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;From browser you will get time in epoch format (A unique number to
represent a particular time) or in string format ie; Y-M-D-H-M-S&lt;/li&gt;
&lt;li&gt;Convert this epoch time to python UTC time.&lt;/li&gt;
&lt;li&gt;Then search the Database.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can reconstruct the javascrpt string format of the date in to
python date object by,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   datetime.datetime(year=2011,month=6,day=7,hour=10,minute=26,second=45)&lt;/span&gt;
&lt;span class="go"&gt;    datetime.datetime(2011, 6, 7, 10, 26, 45)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="go"&gt;   datetime.datetime(year=2011,month=6,day=7,hour=10,minute=26,second=45)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;#From DB we will get the corresponding users timezone information , for&lt;/span&gt;
&lt;span class="go"&gt;   eg; we can take &amp;#39;America/Chicago&amp;#39; as our local timezone.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;America/Chicago&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_std_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;\&lt;span class="n"&gt;_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt;\&lt;span class="n"&gt;_dst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_std_date&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 6, 7, 10, 26, 45, tzinfo=&amp;lt;DstTzInfo&lt;/span&gt;
&lt;span class="go"&gt;   &amp;#39;America/Chicago&amp;#39; CDT-1 day, 19:00:00 DST&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;#Now you have standard localtime and it can be easily converted to the&lt;/span&gt;
&lt;span class="go"&gt;   UTC and then do the Database search and other things.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_std&lt;/span&gt;\&lt;span class="n"&gt;_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_utc&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 6, 7, 15, 26, 45, tzinfo=&amp;lt;UTC&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pytz"></category><category term="timezone"></category></entry><entry><title>Programming Vs. Scripting.</title><link href="//programming-vs-scripting.html" rel="alternate"></link><updated>2010-09-28T09:21:00+05:30</updated><author><name>haridas</name></author><id>//programming-vs-scripting.html</id><summary type="html">&lt;img alt="/images/scrpt_vs_pgrms2-300x165.jpg" src="/images/scrpt_vs_pgrms2-300x165.jpg" /&gt;
&lt;p&gt;When I was started to learn C programming language, I only know the term
Programming. After some time I learned about the Javascript and perl for
some internal projects, from there onwards I started to use the two
terms Scripting and Programming. I found some books of Javascript and
Perl describing about this at the beginning itself. But most of them are
not clearly specifying the difference correctly.&lt;/p&gt;
&lt;p&gt;I think these terms were came  due to the difference of how these codes
are being running under the machine, ie; codes running under Interpreter
were normally called as Scripts and in Compilers were called as
Programs.The codes written in scripting languages are very simple to
understand when compared with compiled languages like C/C++ or Java. But
Java and other dynamic languages like Python have both interpretor and
compilers to run its codes, even though we call Python as Scripting
language. From this we can say that the naming hasn't any importance.&lt;/p&gt;
&lt;p&gt;We are using these languages to solve or implement all types of logics.Here we
need to give importance to the problems and how well we can solve it
based on, which algorithm is being used, speed of the language, memory
usage, etc...The important thing is the &lt;cite&gt;Algorithm&lt;/cite&gt;, if it is optimal
then you can select any language that you like. Currently all major
Scripting languages like &lt;cite&gt;Python, Perl ,Ruby&lt;/cite&gt; and &lt;cite&gt;Tcl/Tk&lt;/cite&gt; are being
used for general purposes along with famous programming languages like
&lt;cite&gt;C/C++&lt;/cite&gt; and &lt;cite&gt;Java&lt;/cite&gt;.Other scripting languages are &lt;cite&gt;Php&lt;/cite&gt; (Web
based applications ), &lt;cite&gt;Lua Script&lt;/cite&gt; (Embedded language , very fast,low
memory foot print and also used for Game developments).&lt;/p&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can call the Computer Languages as Scripting language or
Programming language, but remember the Scripting languages can do any
thing and we should not consider it as a secondary one.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="programming"></category><category term="scripting"></category></entry></feed>