<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HN - programming</title><link href="https://haridas.in/" rel="alternate"></link><link href="https://haridas.in/feeds/programming.atom.xml" rel="self"></link><id>https://haridas.in/</id><updated>2017-12-21T00:00:00+05:30</updated><entry><title>Bind With Promise</title><link href="https://haridas.in/bind-with-promise.html" rel="alternate"></link><published>2017-12-21T00:00:00+05:30</published><updated>2017-12-21T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2017-12-21:/bind-with-promise.html</id><summary type="html">&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; function in js is an interesting function that does behave
like a wrapper function, which make the function bound with wrapper function. This wrapper function helps to call the target function with in custom context and arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Bind act similar to the decorators in python, as in decorator also â€¦&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; function in js is an interesting function that does behave
like a wrapper function, which make the function bound with wrapper function. This wrapper function helps to call the target function with in custom context and arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Bind act similar to the decorators in python, as in decorator also there is wrapper function which intercept the target function. But here the &lt;code&gt;bind&lt;/code&gt; is kinda black box we  can&amp;#8217;t get custom behavior from it, nevertheless the standard nature of what bind provide is what needed in the &lt;code&gt;javascript&lt;/code&gt; async execution environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Javascript is known to be called as Lisp like functional behavior exposed via C like syntax. The functions in js can run in any context, that context decides the &lt;code&gt;this&lt;/code&gt; argument, here the &lt;code&gt;bind&lt;/code&gt; give the power to dynamically change the execution context of a function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I came across with bind more when working with the promise,
where we chain the operations using multiple functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Let me show the use of bind with an example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
Updated on 2/Jul/2018, with better and simple examples.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-js" data-lang="js"&gt;class Context {
    constructor(test) {
        this.defaultAction = "print";
    }

    doAction(taskName) {
        console.log("Executing default action: ", this.defaultAction)
    }
}

function doAction(actName, arg2, arg3) {
    console.log("this context class: ", this);
    console.log("arg1: actName = ", actName);
    console.log("arg2: arg2 = ", arg2);
    console.log("arg3: arg3 = ", arg3);

    if (this.doAction)
        this.doAction(actName)
    else
        console.log("Global this context..");
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_with_this_context"&gt;With &lt;code&gt;this&lt;/code&gt; context&lt;/h3&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-js" data-lang="js"&gt;var ctx = new Context(33)
console.log("method: ", ctx.defaultAction)
var doact = doAction.bind(ctx, 'save-to-file');
doact('arg2', 'arg3');&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here the &lt;code&gt;ctx&lt;/code&gt; object will act as &lt;code&gt;this&lt;/code&gt; inside the &lt;code&gt;doAction&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_without_this_context"&gt;Without &lt;code&gt;this&lt;/code&gt; context&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;When calling &lt;code&gt;bind&lt;/code&gt; method, pass the &lt;code&gt;null&lt;/code&gt; object to it, so obvisouly
&lt;code&gt;this&lt;/code&gt; gets null object, and won&amp;#8217;t have much role when actual method
is being invoked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-js" data-lang="js"&gt;var doact = doAction.bind(null, 'save-to-file');
doact('arg2', 'arg3');&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_with_promise"&gt;With Promise&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;How&amp;#8217;s it helpful in the promise chain ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Promise chain that follows the &lt;code&gt;Promise/A+&lt;/code&gt; convention have the following
structure,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-js" data-lang="js"&gt;function handleResult(arg, result) {
    // body
}

function sendNotification(channel, message) {
    // body
}

returnPromiseObj(arg1)
    .then(handleResult.bind(customCtx, someArg))
    .then(sendNotification.bind(slackCtx, channel))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here we are attaching partially filled methods &lt;code&gt;handleResult&lt;/code&gt;,
and &lt;code&gt;sendNotification&lt;/code&gt; with their custom context &lt;code&gt;this&lt;/code&gt; object, so
that the promise chain will take care the result propagation properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_take_away"&gt;Take away&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; can be used to partially fill the arguments ( Term for this in functional programming is &lt;em&gt;currying&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can inject custom &lt;code&gt;this&lt;/code&gt; context rather than the default global &lt;code&gt;this&lt;/code&gt; or from current runtime context.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Really helpful with the &lt;code&gt;Promise&lt;/code&gt; based programming and other cases via &lt;code&gt;currying&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_reference"&gt;Reference&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind" class="bare"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="nodejs"></category><category term="promise"></category><category term="bind"></category></entry><entry><title>Vim Upgrade 2017</title><link href="https://haridas.in/vim-upgrade-2017.html" rel="alternate"></link><published>2017-12-18T00:00:00+05:30</published><updated>2017-12-18T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2017-12-18:/vim-upgrade-2017.html</id><summary type="html">&lt;p class="first last"&gt;Vim upgrade with new set of plugins.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;After using vim for few years the main difficulties I have with my current
pathogen based vim plugin environment is, it's bit difficult to re-produce a
fresh setup on new machine, managing gitmodules is dirty thing and adding new
plugins and playing around with it is not straight. So I realized new plugins and
plugin managers available now are well fit to address these problems. So here
I'm logging the cosmetic and plugin changes done on my latest vim environment.&lt;/p&gt;
&lt;div class="section" id="setup-vim-configurations"&gt;
&lt;h2&gt;Setup Vim configurations&lt;/h2&gt;
&lt;img alt="vim-setup" class="align-left" src="/images/setup-vim.gif" style="width: 100%; height: 400px;" /&gt;
&lt;p&gt;The commands shown in this gif are given bellow.&lt;/p&gt;
&lt;p&gt;For all plugins go to &lt;a class="reference external" href="https://vimawesome.com"&gt;https://vimawesome.com&lt;/a&gt; site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-plug"&gt;
&lt;h2&gt;vim-plug&lt;/h2&gt;
&lt;p&gt;Now switched to new plugin manager &lt;cite&gt;vim-plug&lt;/cite&gt;. This is very minimalistic and
easy to use compared to pathogen. Also don't need to manage the plugins via git
submodules. Reproducing the setup on a new system is much simpler now.  With this
plugin manager you can easily try out new plugins, lazy load the plugins when
need it etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plugin-list"&gt;
&lt;h2&gt;Plugin list&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fzf-vim"&gt;fzf.vim&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ack-vim"&gt;ack.vim&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#syntastic"&gt;Syntastic&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nerdtree"&gt;NerdTree&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#languagespecific"&gt;LanguageSpecific&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vimthemerelated"&gt;VimThemeRelated&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="fzf"&gt;
&lt;span id="fzf-vim"&gt;&lt;/span&gt;&lt;h2&gt;1. FZF&lt;/h2&gt;
&lt;p&gt;Fuzzy file search and buffer search, better than &lt;cite&gt;Command-t&lt;/cite&gt; and there is no
separate manual step needed to set it up when using with &lt;cite&gt;vim-plug&lt;/cite&gt;. This plugin
also relay on &lt;cite&gt;.gitignore&lt;/cite&gt; file to filter out the unnecessary files from search.&lt;/p&gt;
&lt;p&gt;Dependency: golang1.9.x+ installed in your box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="silver-searcher"&gt;
&lt;span id="ack-vim"&gt;&lt;/span&gt;&lt;h2&gt;2. Silver searcher&lt;/h2&gt;
&lt;p&gt;If you not yet have it, then this one is must needed plugin for vim. This plugin
depends on the command &lt;cite&gt;ag (silver searcher)&lt;/cite&gt; on your machine, if it's not installed, install it
from package manager.&lt;/p&gt;
&lt;p&gt;Grep a keyword across the source directory, this is common feature in full fledged
IDE's. Here we use the silver search with the ack.vim plugin to get the ag
capabilities inside vim, also easy navigation on search results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="nerdtree"&gt;&lt;/span&gt;&lt;h2&gt;3. NerdTree&lt;/h2&gt;
&lt;p&gt;Standard plugin to list the project directories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-syntax-check-using-lint-tools"&gt;
&lt;span id="syntastic"&gt;&lt;/span&gt;&lt;h2&gt;3. Code syntax check using lint tools.&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Syntastic: Pretty standard generic syntax issue identifier and reporter.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="language-plugins"&gt;
&lt;span id="languagespecific"&gt;&lt;/span&gt;&lt;h2&gt;4. Language plugins&lt;/h2&gt;
&lt;p&gt;These plugins we can load when we open those language files only, vim-plug have
option to do this when configure the plugin with it. See bellow section for the sample
vim-plug configuration.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;vim.go : Make vim more friendly in vim, do re-format, highlight issues etc.&lt;/li&gt;
&lt;li&gt;rust.vim.git&lt;/li&gt;
&lt;li&gt;vim-ansible-yaml.git&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-theme-related"&gt;
&lt;span id="vimthemerelated"&gt;&lt;/span&gt;&lt;h2&gt;5. Vim Theme Related.&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;vim-color-solaraized&lt;/p&gt;
&lt;p&gt;Nice vim color plugin for all environments and language, i would recommend it
for all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;vim-airline
This will add some nice colors to your bottom vim status bar and shows good
information about the editing status and all.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example vimrc snippat for plugin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plug &lt;span class="s1"&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;on&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;NERDTreeToggle&amp;#39;&lt;/span&gt; }
Plug &lt;span class="s1"&gt;&amp;#39;https://github.com/scrooloose/syntastic.git&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;https://github.com/fatih/vim-go.git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;for&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;go&amp;#39;&lt;/span&gt;}
Plug &lt;span class="s1"&gt;&amp;#39;https://github.com/chase/vim-ansible-yaml.git&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;https://github.com/mileszs/ack.vim.git&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;junegunn/fzf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;dir&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;~/.fzf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;./install --all&amp;#39;&lt;/span&gt; }
Plug &lt;span class="s1"&gt;&amp;#39;junegunn/fzf.vim&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;altercation/vim-colors-solarized&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-setup-this-environment"&gt;
&lt;h2&gt;How to setup this Environment.&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/haridas/Dotfiles.git ~/Dotfiles
ln -s ~/Dotfiles/vim-files/vim ~/.vim
ln -s ~/Dotfiles/vim-files/vimrc ~/.vimrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now ready to install all plugins with single command &lt;cite&gt;:PlugInstall&lt;/cite&gt; from vim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="possible-errors"&gt;
&lt;h2&gt;Possible errors&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sigfault when running :PlugInstall command&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is mainly comes when the ruby binding compiled with vim might have some issue,
try this &lt;cite&gt;:ruby print &amp;quot;hello&amp;quot;&lt;/cite&gt;, this might reproduce the segfault issue. In this case
get a fresh vim version or ensure vim got latest ruby bindings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://vimawesome.com"&gt;https://vimawesome.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="vim"></category></entry><entry><title>Is callback really a bad thing ? It isn't.</title><link href="https://haridas.in/is-callback-really-a-bad-thing-it-isnt.html" rel="alternate"></link><published>2017-05-01T00:00:00+05:30</published><updated>2017-05-01T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2017-05-01:/is-callback-really-a-bad-thing-it-isnt.html</id><summary type="html">&lt;p&gt;TL;DR version&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Fix the callback signature, like callback(err, obj),&lt;/li&gt;
&lt;li&gt;Callback should be the last argument in a function,&lt;/li&gt;
&lt;li&gt;Change the data structure or make use of promise, and similar methods to
reduce the nested nature of callback chain.&lt;/li&gt;
&lt;li&gt;Don't bring baggages from other language, be like JS ninja â€¦&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;TL;DR version&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Fix the callback signature, like callback(err, obj),&lt;/li&gt;
&lt;li&gt;Callback should be the last argument in a function,&lt;/li&gt;
&lt;li&gt;Change the data structure or make use of promise, and similar methods to
reduce the nested nature of callback chain.&lt;/li&gt;
&lt;li&gt;Don't bring baggages from other language, be like JS ninja when coding in
JS ;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Full version,&lt;/p&gt;
&lt;p&gt;My early part of career I used to code in vanila-javascript, Jquery,
Jquery-plugins,  Sproutcore etc. That time I wasn't faced with callback issues,
issues mainly because I wasn't involved with much complicated JS centric codes
and frameworks really helped out to abstract out the complications.
So it's mainly writing simple functions, closures and DOM tricks.&lt;/p&gt;
&lt;p&gt;But lately after coding in node.js for few months, it's very clear that
callbacks are there in most part of the codebase. Understanding the callback and
why it exists is the key, after that it naturally comes for you when writing
codes.&lt;/p&gt;
&lt;p&gt;Key concepts of Node.js / JS engines are&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Event loop,&lt;/li&gt;
&lt;li&gt;Call Stack ( Macro and Micro )&lt;/li&gt;
&lt;li&gt;Non-blocking IO (Network, memory, Disk, IPC)&lt;/li&gt;
&lt;li&gt;Transparent worker threads / web workers&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you dig more down you can see that the language is built on top of the core
OS kernel features like non-blocking IO and related libs (libuv).
And lately the big players like Google, FB Microsoft etc. invested a lot of time
to create more optimized compilers, which helped the boom of node.js at backend side.&lt;/p&gt;
&lt;p&gt;Due to this inherent nature of non-blocking IO and event loop, most of the code
that you write going to be executed nonsequential way, so we need to attach a callback function
which will resume the operation when the results ready.&lt;/p&gt;
&lt;p&gt;We have full freedom to define the callback function for each requirements, but
it's recommended to keep the common signature across project / languagei
to avoid lot of confusions.&lt;/p&gt;
&lt;p&gt;Here I&amp;quot;m making use of the redis library to showcase the callback chain.
Similarly any DB / IO related nodejs libraries follows this method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Brief doc about the what function does.&lt;/span&gt;

&lt;span class="cm"&gt;@arg key:&lt;/span&gt;
&lt;span class="cm"&gt;@arg callback(err, result): The More information about the signature of the&lt;/span&gt;
&lt;span class="cm"&gt;                            callback is much appreciated one.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ioredis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;initializeRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;weightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;heightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;calculateBmi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weightKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heightKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;weightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;heightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Units: Weight in KG, and height in Meters.&lt;/span&gt;
                    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We have to initialize the redis first and then read and do our task.&lt;/span&gt;
&lt;span class="c1"&gt;// You can see from this point onwards we are passing a callback&lt;/span&gt;
&lt;span class="n"&gt;initializeRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Redis initialization failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Actual call to the method.&lt;/span&gt;
        &lt;span class="n"&gt;calculateBmi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;weightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;heightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error on calculation: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Your BMI: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above code you can see that, how the use of callback comes in, and how we set
the signature of the callback to propagate the error and result back to the caller. The
redis db call is IO involved, so it will be scheduled asynchronously, that's the
reason we are attaching the &lt;cite&gt;callback&lt;/cite&gt; with its arguments. If we have complex
logic around this then the callback nested nature will go further and looks
messy. Generally this is called as callback-hell.&lt;/p&gt;
&lt;p&gt;How to avoid callback hell is, sticking to the standard callback structure, even
though this also have nested callbacks, So think non-standard callback signature
increases the complications.&lt;/p&gt;
&lt;p&gt;With standard signature the clarity of how the code execution happens is very clear, and
I feel keeping verbosity is fine to avoid readability issue and better
maintenance. Other normal coding standards will reduce the callback-hell
further, like keeping the reusable components separate (modularization) as much
as possible so that we won't repeat ourself in different part of our
codebase.&lt;/p&gt;
&lt;p&gt;You can make use of the Database API options like &lt;cite&gt;pipeline&lt;/cite&gt;, &lt;cite&gt;multi key&lt;/cite&gt;
retrieval, or picking better DB data structure which reduces the number of IO
interaction ( Which means we are reducing the #callbacks )&lt;/p&gt;
&lt;p&gt;Eg: here we can avoid two calls if we keep the information of a person in
a redis HASH set.&lt;/p&gt;
&lt;p&gt;This will reduce the nested structure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hmget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;userHashKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;heightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;weightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
           &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
           &lt;span class="c1"&gt;// Do your work now..&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Think of the case, if we can't modify the data structure, and still want to
simplify the syntax, then make use of Promise or similar methods, which is
explained bellow.&lt;/p&gt;
&lt;div class="section" id="promises"&gt;
&lt;h2&gt;Promises&lt;/h2&gt;
&lt;p&gt;Promise a method to reduce the verbosity of the callback, mainly recommended by
the community, so it's good to leverage the promise features in our code to
make the code less verbose and less number of if/else blocks. But one thing is the
libraries that we are using, or the modules we are writing should expose
promisified objects or classes, so you can interact with libs as per the promise
coding pattern. Currently promise libraries like &lt;cite&gt;bluebird&lt;/cite&gt; provide options to
promisify an object which doesn't support promise behavior.&lt;/p&gt;
&lt;p&gt;Technically Promise is a kinda method as the word literally means, gives some promise
object which will be met in future. Here we don't need to pass callback when we
creating the object rather, we create the object first, and then we attach the
required handlers, so that when the object actually returns result / error there
will be some handler ( callback ) available to deal with it. In the case of
promise the way that handler attachment is done is shown bellow. Another benefit
is the chaining capabilities of promise object.&lt;/p&gt;
&lt;p&gt;Any object with &lt;cite&gt;then&lt;/cite&gt; method can be called promise if that object follows the
specification given in &lt;a class="reference external" href="https://www.promisejs.org/"&gt;Promise/A+&lt;/a&gt; specification. Promise wraps the async operation and gives
the response object even though the response is not yet ready, it eventually be ready.
Promise object can also be called as &lt;strong&gt;thenable&lt;/strong&gt; object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onFulfilled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onRejected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Where onFulfilled and onRejected are callback with single argument&lt;/span&gt;
&lt;span class="c1"&gt;// onFullfiled gets result.&lt;/span&gt;
&lt;span class="c1"&gt;// onRejected gets reason for failure.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rewriting the above example looks as follows:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Create your own promise object, that behave like thenable object&lt;/span&gt;
&lt;span class="cm"&gt; * and can be used other parts of the codebase&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;getValuePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onFulfilled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;onRejected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;redisPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;heightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;weightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;redisPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Both height and weight are packed in `results` object.&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// If the redis operation have some error, call the&lt;/span&gt;
                    &lt;span class="c1"&gt;// Promise reject.&lt;/span&gt;
                    &lt;span class="n"&gt;onRejected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Successful promise.&lt;/span&gt;
                    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;onFulfilled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;getYourBmi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;getValuePromise&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//console.log(&amp;quot;Bmi calculation: &amp;quot; + val.height)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;getYourBmi&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Your Bmi: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calculation failed with error: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: Here the promise examples are based on the bluebird promise
implementation. Any objects or user defined objects can be converted to the
promisified version using bluebird library.&lt;/p&gt;
&lt;p&gt;I'm surprised to see the specification of the &lt;cite&gt;Promise/A+&lt;/cite&gt;,  it is very small and
concise text document. It clearly says what a promise implementation should
follow. After programming in Node.js with standard node.js callbacks
I'm convinced that use of Promise really make the code better and clean.&lt;/p&gt;
&lt;p&gt;Main benefits are:-&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Less nesting levels or less number of callbacks. ie; Don't need to pass
callback to each and every methods to properly handle the results from
it.&lt;/li&gt;
&lt;li&gt;We can design the data flow and transformation as a pipeline.&lt;/li&gt;
&lt;li&gt;Error propagation and handling similar to that of sync code base.&lt;/li&gt;
&lt;li&gt;Chain the promise with multiple transformation or filters etc.&lt;/li&gt;
&lt;li&gt;Thenable objects won't throw, it nicely pack the error and can be
intercepted via &lt;cite&gt;.catch&lt;/cite&gt; method of the promise object.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;What happens Promise when a promise object is ready with its result before
a 'then' handler is attached to handle it ?&lt;/p&gt;
&lt;blockquote&gt;
This won't happen because Promise/A+ insists so :). As the specification
guarantee that,this scenario shouldn't happen, the implementation has to
ensure this by making the actual code block execution after emptying the
current call stack.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="generators"&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;As you guess this is co-routine implementation in Node.js and included in the
ES6 specification. If you familiar with &lt;cite&gt;python&lt;/cite&gt; you should know the generators.
The concept is same. But with node.js, there is one more things, ie; its inherent
asynchronous execution, so combining async with generator give much better way to
represent complex flows in easy syntax. See few examples bellow. My current
projects we didn't used it, looking forward to try out in future projects. In
&lt;cite&gt;python3&lt;/cite&gt; there is similar behavior available using &lt;em&gt;asyncio&lt;/em&gt; stdlib.&lt;/p&gt;
&lt;p&gt;Main features of generators are:-&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Lazy loading&lt;/li&gt;
&lt;li&gt;Memory efficient due to the lazy loading behavior, best fit to iterate
through chunks of big files or streams.&lt;/li&gt;
&lt;li&gt;Plays well with Asynchronous codes, this is win-win situation for both.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the simple example of how to define a generator and how to consume it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//Generator functions are defined using &amp;quot;function*&amp;quot; syntax.&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;getList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nf"&gt;getList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Prints&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;


&lt;span class="c1"&gt;// Another way to retrieve the generator values are making use of &amp;#39;next&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;// method.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;// Prints&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Indicates generator finished.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets implement our above example using generator and promise.
we are using &lt;em&gt;'co' library&lt;/em&gt; which is a wrapper around generator which
internally loop through the generator till it finishes, so outside we only see
sequential behavior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Here is the generator magic.&lt;/span&gt;
&lt;span class="c1"&gt;// The async calls will be executed synchronously. Ie; it will block till&lt;/span&gt;
&lt;span class="c1"&gt;// the call to async call finishes.&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// First async call&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;setRedis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;heightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;weightKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Blocks here till the redis write operation finishes.&lt;/span&gt;


    &lt;span class="c1"&gt;// Second async call&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="nf"&gt;getYourBmi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Your Bmi: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Errors are wrapped out ensure no callback way of handling the errors&lt;/span&gt;
    &lt;span class="c1"&gt;// from bottom up fashion.&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see how cleanly generators helps to handle the async codes in sequential way.
There are lot of other ways you can make use of this feature in your code,
please check out the co library's github page for more examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://2ality.com/2015/03/es6-generators.html"&gt;https://2ality.com/2015/03/es6-generators.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.promisejs.org/"&gt;https://www.promisejs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.risingstack.com/node-js-at-scale-understanding-node-js-event-loop/"&gt;https://blog.risingstack.com/node-js-at-scale-understanding-node-js-event-loop/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://promisesaplus.com/"&gt;https://promisesaplus.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/tj/co"&gt;https://github.com/tj/co&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="node"></category><category term="callback"></category><category term="promise"></category></entry><entry><title>Creditpay My First app in playstore !</title><link href="https://haridas.in/creditpay-my-first-app-in-playstore.html" rel="alternate"></link><published>2017-04-20T00:00:00+05:30</published><updated>2017-04-20T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2017-04-20:/creditpay-my-first-app-in-playstore.html</id><summary type="html">&lt;p&gt;Yes, this is my first app in google play store. I created it my own needs.
It's simple app which helps to recommend a credit card for use on a particular day.&lt;/p&gt;
&lt;p&gt;Right now the UX is very simple, but included the following features,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Multi device cloud sync using firebase â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Yes, this is my first app in google play store. I created it my own needs.
It's simple app which helps to recommend a credit card for use on a particular day.&lt;/p&gt;
&lt;p&gt;Right now the UX is very simple, but included the following features,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Multi device cloud sync using firebase database.&lt;/li&gt;
&lt;li&gt;O-Auth support&lt;/li&gt;
&lt;li&gt;Easy way to add new card with Card Name, Billing day (eg: 04, if the billing
date is 04/April), and Grace Period ( How many days you get between bill
generation date to actual bill payment date, generally this is 20 days).&lt;/li&gt;
&lt;li&gt;Modify the card details.&lt;/li&gt;
&lt;li&gt;Can be used offline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently the card suggestion is based on the grace period details that we enter
when we add new card. It checks; for each card, how many days are there before
the card bill is generated.&lt;/p&gt;
&lt;p&gt;For example, assume today is 6'th of a month, then we have to pick the card
which gives best score based on the following calculation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a card;&lt;/p&gt;
&lt;p&gt;Billing day = 05'th of a month&lt;/p&gt;
&lt;p&gt;Grace period = 20 days&lt;/p&gt;
&lt;p&gt;Score of a card is: (#days between 6'th of this to 5'th of coming month)
+ (grace period of the card)&lt;/p&gt;
&lt;p&gt;ie; score = 30 + 20 = 50 (This will vary slightly due to varying number days
of each month), and note that this is best score of a card based on the
above given values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another example:-&lt;/p&gt;
&lt;p&gt;Assume today date is 21'st, we want to pick a card, for that card, the score is
= (05 (next month) - 21) + 20 = 14 + 20 = 34 days.&lt;/p&gt;
&lt;p&gt;In ideal case we can maximize this if we made the purchase on 05'nd of the month
using this card. The app is just doing this and displaying the card after
sorting it out based on the score of each card.&lt;/p&gt;
&lt;img alt="yard-login-page" class="align-left" src="/images/creditpay.png" style="width: 50%; height: 550px;" /&gt;
&lt;p&gt;Roadmap:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;UX improvements.&lt;/li&gt;
&lt;li&gt;Display the card with more images and details.&lt;/li&gt;
&lt;li&gt;Methods to improve the offline usage.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you guys interested, give a try and let me know your feedbacks.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</content><category term="programming"></category><category term="android"></category><category term="firebase"></category></entry><entry><title>What I Like about J2EE</title><link href="https://haridas.in/what-i-like-about-j2ee.html" rel="alternate"></link><published>2016-07-25T00:00:00+05:30</published><updated>2016-07-25T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2016-07-25:/what-i-like-about-j2ee.html</id><summary type="html">&lt;p&gt;I started with J2EE coding very late after coding for 6 years mainly in python
and other languages like Nodejs, c++, go, c# etc. As a late starter I happy that  I got
chance to work with the latest technologies in SOA environment. From that experience
I just want to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I started with J2EE coding very late after coding for 6 years mainly in python
and other languages like Nodejs, c++, go, c# etc. As a late starter I happy that  I got
chance to work with the latest technologies in SOA environment. From that experience
I just want to put down some points that I liked about java, as I'm coming
from other languages I felt few things are interesting to me.&lt;/p&gt;
&lt;div class="section" id="interfaces"&gt;
&lt;h2&gt;Interfaces&lt;/h2&gt;
&lt;p&gt;As a Object oriented language it doesn't have multiple inheritance, but it
provides Interfaces. If you check java libraries there are lot of standard
interfaces reused from Java language. Also J2EE provides lot of standard
interfaces to the application or product developers to come up with their on
implementation.&lt;/p&gt;
&lt;p&gt;May be key example for this would be the Servlet interface in J2EE. If you see Servlet
containers(Jetty, Tomcat), it comes with its own implementation of the
&lt;cite&gt;HttpServletRequest&lt;/cite&gt; and &lt;cite&gt;HttpServletResponse&lt;/cite&gt;, all these implementation follows
standard interface given by the J2EE. What it means is we develop our application
independent of servlet container implementation or we can run the web application
on any servlet container as it should be.&lt;/p&gt;
&lt;p&gt;Interfaces are good for more disciplined and consistent software development.
I think the current Oracle vs Google fight is because of this standard interfaces.
Google doesn't want to change the interface to make it look like another cousin
language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="standards"&gt;
&lt;h2&gt;Standards&lt;/h2&gt;
&lt;p&gt;Most of the mainstream languages got their own feature addition process to
propose feature requests for the language. For java it called JSR ( Java
Specification Request). Here goes all the initial design proposals and drafting
of the specification and mostly it follows a reference implementation of the new specification.
I'm curious to see the final implementation of following JSR, and other interesting JSRs.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=369"&gt;JSR-369&lt;/a&gt;: Servlet 4.0 with http2 support ( Under review stage)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=311"&gt;JSR-311&lt;/a&gt;: JAX-RS Java Restful web service specification. Reference
implementation &lt;a class="reference external" href="https://jersey.java.net/"&gt;Jersy&lt;/a&gt;&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=370"&gt;JSR-370&lt;/a&gt;: JAX-RS 2.1 New specification to get HTTP2, non blocking I/O and etc.&lt;/dt&gt;
&lt;dd&gt;This will really make the JAX-RS more powerful and widespread.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=330"&gt;JSR-330&lt;/a&gt;: Defines the standard annotations for dependency injection, &amp;#64;Inject, &amp;#64;Named,
&amp;#64;Provider, &amp;#64;Singleton and &amp;#64;Qualifier and how it should behave.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=229"&gt;JSR-229&lt;/a&gt;: J2EE standard Dependency injection engine, supports the JSR-330
convention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="servlets-servlet-filters-and-web-fragment-for-micro-service-development"&gt;
&lt;h2&gt;Servlets, servlet filters and web-fragment for Micro service development&lt;/h2&gt;
&lt;p&gt;I got surprised by the flexibility of these standard interfaces supplied by the
J2EE. It's more than enough to develop a web service or web framework from the
ground up without much boiler plate codes. Assume if you want to do some request
response validation via swagger schema, it's much simple by adding a servlet
filter for it and wrapper classes to intercept the response stream.&lt;/p&gt;
&lt;p&gt;I worked with MVC frameworks which uses a concept called middleware to intercept the
request/response flow before actual processing, I felt the servlet filter acts the same role
in J2EE platform. I agree the fact that J2EE is a Java plus lot of libraries, may
be we can consider it as a web framework :).&lt;/p&gt;
&lt;p&gt;Usually to package the servlets and filters, there is web.xml file, it
does the url routing logic, and the filter ordering, this is kinda configuration
files in different frameworks, but it's in xml ;).&lt;/p&gt;
&lt;p&gt;Another interesting thing is &lt;a class="reference external" href="https://www.oracle.com/technetwork/articles/javaee/javaee6overview-part2-136353.html"&gt;web-fragment.xml&lt;/a&gt;. This is really good feature
which we leveraged to build a micro web framework with default routes ( /admin,
/health, /doc etc) and supplied to developers as jar file. You can call this as
a micro web framework which can be used in the micro service development
environment where the number of routes in a particular service going to be very
minimal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dependency-injection"&gt;
&lt;h2&gt;Dependency Injection&lt;/h2&gt;
&lt;p&gt;DI was the one area I spend most of my time. I integrated libraries which comes with
DI support into our application. Mainly I used google guice because those
libraries already implemented in google guice DI so we didn't have much choice.&lt;/p&gt;
&lt;p&gt;The thing I liked about the DI is its magics. How it wire the actual
implementation classes to the interfaces. There are standard set of annotations
defined for DI purpose, &lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=330"&gt;JSR-330&lt;/a&gt; defines it, You can import it from the
package &lt;a class="reference external" href="https://docs.oracle.com/javaee/6/api/javax/inject/package-summary.html"&gt;javax.inject&lt;/a&gt;. Currently most of the DI
implementations supports JSR-330, and it's recommended to stick to JSR-330 while
using injections in our code so that we can easily switch the actual DI engine
based on application requirements.&lt;/p&gt;
&lt;p&gt;As described above &lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=330"&gt;JSR-330&lt;/a&gt; defines the annotations that can be used to tag the
injection behavior across the code. Google guice, CDI, and Dagger are the few
famous Dependency Injection library. In which CDI is the standard implementation comes
with J2EE and described in &lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=229"&gt;JSR-229&lt;/a&gt;. Looks like most of the servlet containers
are now support CDI by default. But I felt like CDI is bit more
magic than google guice. Google guice does the manual bindings by default and
it's more explicitly but CDI does the auto scan across the class path to find
the implementations and targets on which it can be injected.&lt;/p&gt;
&lt;p&gt;I will stick to google guice if third party libraries are already making use of
it, if that's not your case then, going with CDI is best for the future support and platform
compatibility across J2EE environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing-and-logging-libraries"&gt;
&lt;h2&gt;Unit Testing and Logging libraries&lt;/h2&gt;
&lt;p&gt;One of my favorite libraries in Java. New annotation based Test methods are
far easier to write. The test runner automatically knows the Test classes and
test methods. You can test each and very part of your application using
Junit and some mocking library. We tested entire micro service from the
servelet filter level.&lt;/p&gt;
&lt;p&gt;Logging library got much more flexibility, and python's logging library was
designed after this one. I liked the design of &lt;a class="reference external" href="https://www.slf4j.org/"&gt;slf4j&lt;/a&gt; how easily we can
configure the backends and its logging behaviors via xml configurations. Slf4j
is the another example of standard Interface which keeps the logging API common
across multiple logging frameworks ( log4j, logback and java.util.logging).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="servlet-containers-and-osgi"&gt;
&lt;h2&gt;Servlet Containers and OSGi&lt;/h2&gt;
&lt;p&gt;There are lot of of servlet container implementations exists,
famous one are Jetty and Tomcat. Jetty is small and more easy to embedded
in your code. Most of the servlet containers are do auto reload if we place the
war files into its ROOT folder.&lt;/p&gt;
&lt;p&gt;Apart from the standard servlet containers, I liked the concept of &lt;a class="reference external" href="https://www.osgi.org/"&gt;OSGi&lt;/a&gt;. OSGi is
more modular and service oriented platform. You can release you project as jar
file with some version details ( As the standard jar doesn't have any notion of
version). We can expose our application interfaces as services to
other teams, they can consume it easily. I tried few POCs with the &lt;a class="reference external" href="https://karaf.apache.org/index.html"&gt;apache
karaf&lt;/a&gt; and &lt;a class="reference external" href="https://karaf.apache.org/projects.html#cellar"&gt;karaf celler&lt;/a&gt; to know more of it.&lt;/p&gt;
&lt;p&gt;I felt OSGi gives all the tools required to go with SOA based microservice
application development. Apache karaf team call their platform as polymorphic
container it can run OSGi bundles, war, jar, spring etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="java-community"&gt;
&lt;h2&gt;Java community&lt;/h2&gt;
&lt;p&gt;Java community is huge and vast with around 2 decades of experience and maturity
in the tools and platforms build on it. And the new language upgrades catching
up with the new trends in computer language arena.  eg: Java8 got lambdas,
functional stream processing APIs etc. And interestingly java9 comes with a REPL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;People who says about java is verbose and rigid compared to
other languages. But I would say that verbosity thing can be easily overcome
by using a good IDE. Regarding the flexibility it's purely with the product
design. I mostly see development flows like this, develop the initial product using any of
the language that you are comfortable with, if the situation arises for more scalability /
reliability / speed you can switch to java or other static languages.
If you consider the SOA platforms this isn't required at all, create your
microservice using the tool or language which fits best on top of a standard
communication protocol ( http / thrift / protocol buffer etc ).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References:-&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://techsticles.blogspot.in/2016/07/oracle-and-fall-of-java-ee.html?utm_content=bufferf1a2e&amp;amp;utm_medium=social&amp;amp;utm_source=linkedin.com&amp;amp;utm_campaign=buffer"&gt;Oracle and Fall of J2EE&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="j2ee"></category><category term="java8"></category></entry><entry><title>Spell Checker for Vim</title><link href="https://haridas.in/spell-checker-for-vim.html" rel="alternate"></link><published>2015-06-28T00:00:00+05:30</published><updated>2015-06-28T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2015-06-28:/spell-checker-for-vim.html</id><summary type="html">&lt;p&gt;As a long time vim user I always have troubles with typos in vim. Vim has inbuilt
spell checker tool, but it's little cumbersome to use. I use vim for
most of the purposes like,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;To write my blog entries.&lt;/li&gt;
&lt;li&gt;Coding&lt;/li&gt;
&lt;li&gt;To write git commit messages, where I get some â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;As a long time vim user I always have troubles with typos in vim. Vim has inbuilt
spell checker tool, but it's little cumbersome to use. I use vim for
most of the purposes like,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;To write my blog entries.&lt;/li&gt;
&lt;li&gt;Coding&lt;/li&gt;
&lt;li&gt;To write git commit messages, where I get some typos. This one is more annoying
than typos in any other places.&lt;/li&gt;
&lt;li&gt;Coding in any languages except Java ;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what usually happens was I miss some types on git commits or comments
that I put while coding. Before using this plugin I use the inbuilt vim spell
checker directly, to access that you have to type this command in the command mode,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:setlocal spell spelllang=en_us
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of the time I forgot this full command and I have to issue &lt;cite&gt;:help spell&lt;/cite&gt; to
get this command :). What was other annoying problem is, after checking the spell
corrections, I need a quick way to disable the spell check highlights. With the
inbuild spell checker you need to type the following command to disable it.&lt;/p&gt;
&lt;p&gt;Unset the spell variable to disable the highlights,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:setlocal spell spellang=
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Eventually these typos are started to come and bite me. So I was started to look
for an easy way to achieve spell check. I don't want to use any new plugin for this
feature. I want to use the inbuilt vim spell checker itself but in more saner way.
So to get that done I wrote simple function in vimscript and put it in the &lt;cite&gt;~/.vimrc&lt;/cite&gt;.
Thats it.&lt;/p&gt;
&lt;p&gt;So after putting this script, I only need to type &lt;cite&gt;&amp;lt;leader&amp;gt;c&lt;/cite&gt; to enable the
spell check and &lt;cite&gt;&amp;lt;leader&amp;gt;c&lt;/cite&gt; again to toggle the spell check.&lt;/p&gt;
&lt;p&gt;Here is the function that you can put it in your vimrc file to get these spell
check bindings&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot; &amp;gt; Spell checker Toggler &amp;lt;

nnoremap &amp;lt;leader&amp;gt;c :call SpellChecker()&amp;lt;cr&amp;gt;

let g:spell_checker_is_active = 0
function! SpellChecker()
    if g:spell_checker_is_active
        setlocal spell spelllang=
        let g:spell_checker_is_active = 0
    else
        setlocal spell spelllang=en_us
        let g:spell_checker_is_active = 1
    endif
endfunction

&amp;quot; &amp;gt; End of spell check toggler &amp;lt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To see this in action see the bellow gif.&lt;/p&gt;
&lt;img alt="" class="align-left" src="images/spell-check.gif" style="width: 100%; height: 400px;" /&gt;
&lt;p&gt;If you are using my vim package from the github, then this feature is already
there. Or if you want only this feature just copy paste above vimscript function
in your vimrc file.&lt;/p&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learnvimscriptthehardway.stevelosh.com/"&gt;Learn Vim The Hardway&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="vim"></category></entry><entry><title>Python and OOM Killer</title><link href="https://haridas.in/python-and-oom-killer.html" rel="alternate"></link><published>2014-10-04T00:00:00+05:30</published><updated>2014-10-04T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2014-10-04:/python-and-oom-killer.html</id><summary type="html">&lt;p&gt;Those who are working with python for few years might have encountered this
problem at least once. What happens is that python processes are getting killed by
the OS's Out Of Memory Killer. OOM Killer does this to
reclaim the memory for OS, since there is no enough RAM space â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Those who are working with python for few years might have encountered this
problem at least once. What happens is that python processes are getting killed by
the OS's Out Of Memory Killer. OOM Killer does this to
reclaim the memory for OS, since there is no enough RAM space available for the
critical OS operations. This OOM killer getting involved with python
processes is not due ot python's problem but because of how the programmer
using python to get their things done.&lt;/p&gt;
&lt;p&gt;Python is a fully Object Oriented and Dynamically typed language. Python's internal
memory manager does lot of optimization to make the program run faster with
effective use of memory. Python providing lot of flexibility for the coder, all
these flexibility costs internally while running (runtime cost) the code. But Python tries to
optimize this cost as much as possible. Programmers who know about this won't
blame python for its lack of performance with memory management compared to
statically typed language.&lt;/p&gt;
&lt;div class="section" id="a-sneak-peek-into-python-memory-manager"&gt;
&lt;h2&gt;A sneak peek into python memory manager&lt;/h2&gt;
&lt;p&gt;Python's memory manager keeps it's own pool of memory(Private heap) for python
objects and this pool of memory was claimed from the OS via raw &lt;cite&gt;malloc&lt;/cite&gt; call at low level.
Python's memory manager abstract the &lt;cite&gt;malloc&lt;/cite&gt; call and provides its own special
&lt;cite&gt;malloc&lt;/cite&gt; method specifically for different types of python objects. Python won't
release the memory back to the OS when an object goes out of scope in python
program. Instead it keeps this memory for future reuse.&lt;/p&gt;
&lt;p&gt;The python garbage collector does reclaim memory back into OS if it meet certain
criteria  - Please read this &lt;a class="reference external" href="https://www.evanjones.ca/memoryallocator/"&gt;article&lt;/a&gt; for more information about python's
memory allocation policies.&lt;/p&gt;
&lt;p&gt;We won't come across this problem if our system has enough RAM and peak memory
usage of the program comes under the RAM size. We usually start worrying about the
python's memory problems once the OOM Killer starts terminating the process.
Immediate steps to solve this problem are,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Optimize the python program by using generators where every possible.&lt;/li&gt;
&lt;li&gt;Learn best python programming paradigms. Usually newbies get into this
problem because of the bad coding practices.&lt;/li&gt;
&lt;li&gt;Know how much memory needs for your application in peak time and add that much
RAM or Increase the SWAP. Use of swap space may not be very good because it
will reduce the performance of the program if program constantly swapping
data from RAM to Disk.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have encountered this problem while working with long running python programs
with it's peak memory usage is very higher than the average memory usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="with-celery"&gt;
&lt;h2&gt;With Celery&lt;/h2&gt;
&lt;p&gt;Celery is a very famous distributed job scheduler in python. Most of them are
using it for their asynchronous task executions and other complex scenarios. Those
who using celery for simple tasks wouldn't have faced the memory issue. But in
our case -- we use celery very heavily.&lt;/p&gt;
&lt;p&gt;RabbitMQ is the AMQP Message queue; backbone to the celery.&lt;/p&gt;
&lt;p&gt;In our case what happened was that, we call celery tasks with &lt;cite&gt;kwargs&lt;/cite&gt; - which
holds very large objects with no defined structure. Celery passes this data
through rabbitmq's queue and deliver to the actual celery's job runner which
runs the task with given &lt;cite&gt;kwargs&lt;/cite&gt;. Since the size of the &lt;cite&gt;kwargs&lt;/cite&gt; was very high
and the structure varies each time the celery's main process keep on increase
its memory foot print. Obviously if we have enough RAM then we can handle the
peak memory requirement but this minimum RAM size wasn't affordable to us,
so we have to find solution to prevent celery's main process from acquiring lot of memory.&lt;/p&gt;
&lt;p&gt;The solution for this problem is, use &lt;cite&gt;kwargs&lt;/cite&gt; (or &lt;cite&gt;message&lt;/cite&gt;) with fixed structure and
small in size. Only pass ids or indexes through the message so that the celery's
main process won't acquire more memory. And celery has option to kill its worker
processes and respawn after some time, you can make use of this also so that
the work processes also release all its memory after some time and starts fresh.&lt;/p&gt;
&lt;p&gt;RabbitMQ also recommends to use message with smaller size so that we get better
performance out of the system. This doesn't mean rabbitmq can't handle large
messages. The smaller message size reduce the IO overload required for the
RabbitMQ.&lt;/p&gt;
&lt;p&gt;I hope this brief explanation will help you to tackle similar problems. If you
have any questions or suggestion please put it on the comment section bellow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://deeplearning.net/software/theano/tutorial/python-memory-management.html"&gt;https://deeplearning.net/software/theano/tutorial/python-memory-management.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.evanjones.ca/memoryallocator/"&gt;https://www.evanjones.ca/memoryallocator/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://arctrix.com/nas/python/gc/"&gt;https://arctrix.com/nas/python/gc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/c-api/memory.html"&gt;https://docs.python.org/2/c-api/memory.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category><category term="oom"></category><category term="celery"></category></entry><entry><title>What happens when we hit the speed limit of python</title><link href="https://haridas.in/what-happens-when-we-hit-the-speed-limit-of-python.html" rel="alternate"></link><published>2014-10-04T00:00:00+05:30</published><updated>2014-10-04T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2014-10-04:/what-happens-when-we-hit-the-speed-limit-of-python.html</id><summary type="html">&lt;p&gt;Python is a beautiful language but we know the limitations of the
python compared with compiled language. So here I'm explaining a scenario
where python was not the ideal choice.&lt;/p&gt;
&lt;p&gt;We are using python for network programming, specifically a TCP client/server
program which read packets from another C based â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is a beautiful language but we know the limitations of the
python compared with compiled language. So here I'm explaining a scenario
where python was not the ideal choice.&lt;/p&gt;
&lt;p&gt;We are using python for network programming, specifically a TCP client/server
program which read packets from another C based server. We picked python because
on the requirements the traffic volume wasn't huge enough to consider compiled
languages like C/C++ or Java, and we are already using python so more comfortable
with it.&lt;/p&gt;
&lt;div class="section" id="the-network-topology"&gt;
&lt;h2&gt;The network topology&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Network =&amp;gt; TCP Server A =&amp;gt; TCP Server B ( Do some operation.) ==&amp;gt; Network.

Where :-
    Server A is implemented in C.
    Server B is the one we implemented.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The data flowing from Server A to Server B via TCP. The Server B is implemented
in python for now. This setup was running for more than a year without any
problems or crashing. Then it started showing problems. The Server B crashing
sometime because of the socket connection between the Server A and Server
B getting closed by the Server A, We don't know why. Bellow listed are the errors
that we are getting, one interesting thing is; these two errors won't happen
together, some time Errno 104, some time Errno 107.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Errno: 104 - Peer closed the socket connection.&lt;/li&gt;
&lt;li&gt;Errno: 107 - Transport endpoint closed.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I initially thought this was happening because of python's long running process
exiting due to memory overflow or some other reasons. We thought this because
python's reputation as a long running daemon is not great. Then we figure
out that long running daemon wasn't the reason for this issue, since the main
python process wasn't consuming more RAM and it's very stable in memory usage.
Our python server using very simple data structures, so python VM very
efficiently handling the Memory.&lt;/p&gt;
&lt;p&gt;Then I started to look into other areas of program, by changing the settings
and tuning parameters to see any of it fixes the issue. All of the options
seems to work for a while but it throws the same error after few days.
I was stuck and no idea about the issue and spend around a week to go through
the program's in and out to see any possible causes. But no clue from it.&lt;/p&gt;
&lt;p&gt;Finally Stack Overflow came into help, IRC wasn't helpful for these type of very
specific issues. Programmers can't live without Google and Stack Overflow.
I put the question on the SO, people helped me to make the question better by
adding the TCP traces picked up using &lt;tt class="docutils literal"&gt;tcpdump&lt;/tt&gt;. With in hours I got the
answer I was looking for. It's mainly due the python socket reading related.
In the Python side we are not clearing the TCP packets from the receive buffer
of TCP socket completely, only reading few bytes (300B to 10KB) at a time.
So which causing the Python server to send receive window size flag of TCP
protocol as ZERO for multiple times In the heavy traffic period.
This might triggering this issue. That was the idea I got from the stack Overflow.&lt;/p&gt;
&lt;p&gt;You can see the &lt;a class="reference external" href="https://stackoverflow.com/questions/22142730/tcp-connection-reset-by-peer-and-transport-end-point-is-not-connected"&gt;stackOverflow post&lt;/a&gt;, I explained more technical
details on the SO question, please have a look on it to get more details about
the issue and sample tcpdump trace file to see what was happened on the network.&lt;/p&gt;
&lt;p&gt;The problem on the python side is that,  it's a single threaded server which
reading the data from the socket, one thing we are right now not doing is reading
until socket is empty due to some implementation restrictions. From the SO
answer I got some quick solutions to try,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Remove unwanted codes from the main loop, so the total time taken to process
one socket read would be as small as possible.&lt;/li&gt;
&lt;li&gt;Tweak with the Kernel parameters for the TCP sending and receiving buffer
size.&lt;/li&gt;
&lt;li&gt;Improve the Code base or re-implement it in C completely or do the main part as
C extension.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The method 1 and 2 was easy go ahead with, So I did it right away. It gives
considerable difference and the crashes reduced considerably. But still it
happened once or twice. So I know that it's not enough and need reimplementation
of the parts which causing this problem. But we are holding  on the
reimplementation since it will take lot of time to change the existing stuff.
Any way the current changes give enough time to try more things to improve the
existing code and investigate the problem more.&lt;/p&gt;
&lt;p&gt;Mean while I did some more investigation locally to understand the issue more.
From that what I understood was, when the network is heavily loaded the Python
server side not clearing the traffic quick enough and which forcing the remote server
to close the TCP socket (Not yet found why it's closing it). Right after the
socket is closed on the remote end,  Python side of the code might be trying
&lt;cite&gt;socket.send&lt;/cite&gt; or &lt;cite&gt;socket.recv&lt;/cite&gt; and it will fail since no active socket. So in
the beginning I mentioned that I'm getting two errors, this is
because some time right after the remote server closed the socket, the next
socket interaction in the python side may be &lt;cite&gt;socket.send&lt;/cite&gt; which was triggering the
error &lt;tt class="docutils literal"&gt;Errno 104&lt;/tt&gt;. If it was &lt;cite&gt;socket.recv&lt;/cite&gt; it would have been &lt;tt class="docutils literal"&gt;Errno 107&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;One other thing I learned after this was that, the TCP server usually handles
the slow remote servers by blocking the new massage write into
the sending buffer. In my environment I understood the remote server A
is not blocking the write(Non-blocking socket) instead closing the socket( This
could be due to timeout).If the TCP server has option to cache the extra
packets into disk then it could have handled this peak traffic period.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-tcp-server-has-to-provide-atleast-these-features"&gt;
&lt;h2&gt;A TCP Server has to provide atleast these features&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Way to handle the buffer overflow if the client is very slow.&lt;/li&gt;
&lt;li&gt;Write the buffer overflowed data into durable queue or file system.&lt;/li&gt;
&lt;li&gt;When the Client comes back, the server has to automatically deliver the
pending messages in FIFO order.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;If these options are there with the TCP server that I was handling, this problem
couldn't have happened. So finally now I can say that Python
could have handled this situation if the traffic spikes some times only - In
our case that was the situation. Python couldn't have done it if the rate of
server is more than the rate at which Python can clear the socket backlog.&lt;/p&gt;
&lt;p&gt;Update (02-May-2014):-&lt;/p&gt;
&lt;p&gt;Please check out this &lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/24jaxr/what_happens_when_we_hit_the_speed_limit_of_python/#ch7rd9y"&gt;reddit&lt;/a&gt; discussion about this post, which give you more
insight into the problem and possible solutions.&lt;/p&gt;
&lt;p&gt;Update ( 03-May-2014):-&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="simulate-the-production-environment"&gt;
&lt;h2&gt;Simulate the Production Environment&lt;/h2&gt;
&lt;p&gt;So finally I got the working sample to simulate my server and client
behaviour. This was only possible from the encouragement I got from reddit and
twitter for my this blog entry. Thank you guys.&lt;/p&gt;
&lt;p&gt;Here I created one C tcp sample server(tcp_server.c), which simulate my actual C
server in the production environment. And one Python TCP client(tcp_server.py)
which simulate the TCP socket reading operation in the production Python server
implementation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Python server tcp_server.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;

&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;span class="n"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_tcp_client&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Connect to sever and push lot of data.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Starting Client&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sending &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;#&lt;/span&gt;
        &lt;span class="c1"&gt;# Does some action on the data. and return the response.&lt;/span&gt;
        &lt;span class="c1"&gt;#&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hi i got the data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_tcp_client_with_fix&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    The TCP client with fix applied. So it will read complete data from&lt;/span&gt;
&lt;span class="sd"&gt;    socket and avoid the errors like &amp;#39;errno 104&amp;#39; or &amp;#39;errno 107&amp;#39;.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Starting the newly implemented client...&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# make the socket non-blocking&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sending &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;t_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;rsock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rsock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rsock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rsock&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;t_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rsock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;t_data&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# EAGAIN&lt;/span&gt;
                    &lt;span class="c1"&gt;# Nothing more to read;&lt;/span&gt;
                    &lt;span class="k"&gt;pass&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c1"&gt;#&lt;/span&gt;
        &lt;span class="c1"&gt;# Doese some action on the package `data`&lt;/span&gt;
        &lt;span class="c1"&gt;#&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Handled &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; bytes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;rsock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;new_client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Start the new client with fix applied.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;new_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_client&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;start_tcp_client_with_fix&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;start_tcp_client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    tcp_server.c - Implements the TCP server in my production environment.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;netdb.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;


&lt;span class="cp"&gt;#define PORT &amp;quot;8000&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define HOST &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define MAX_LISTEN 5&lt;/span&gt;
&lt;span class="cp"&gt;#define SIZE 512&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;get_in_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sa_family&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sin6_addr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;send_sock_msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sock_fd&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;receiver_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;msghdr&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;iovec&lt;/span&gt; &lt;span class="n"&gt;iov&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);&lt;/span&gt;

    &lt;span class="n"&gt;receiver_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;receiver_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_LOOPBACK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;receiver_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;receiver_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_namelen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;receiver_addr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_iov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iov&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_iovlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_iov&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;iov_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_iov&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;iov_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_controllen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg_flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sendmsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_sd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ttl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INET6_ADDRSTRLEN&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;addrinfo&lt;/span&gt; &lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;serverinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_storage&lt;/span&gt; &lt;span class="n"&gt;their_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// COnnectors address info.&lt;/span&gt;
    &lt;span class="kt"&gt;socklen_t&lt;/span&gt; &lt;span class="n"&gt;sin_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ai_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_UNSPEC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ai_socktype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ai_flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AI_PASSIVE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getaddrinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverinfo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;getaddrinfo: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gai_strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Loop through different results and pick up the first one.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serverinfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_next&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;server: socket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F_SETFL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_NONBLOCK&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error:fnctl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;setsockopt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addrlen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;server: bind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;server: failed to bind &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;freeaddrinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverinfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// No need for it further.&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAX_LISTEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;listen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;server: waiting for connections...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;sin_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;their_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;new_sd&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;their_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sin_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_sd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;accept ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;inet_ntop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;their_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ss_family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;get_in_addr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;their_addr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;server: got connection from %s &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt; &lt;span class="c1"&gt;// This is child process.&lt;/span&gt;
            &lt;span class="c1"&gt;// Child doesn&amp;#39;t need the listner socket. I&amp;#39;m not sure thought.&lt;/span&gt;
            &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;server.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logfile&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logfile open error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;             * Change the new client socket non-blocking.&lt;/span&gt;
&lt;span class="cm"&gt;             *&lt;/span&gt;
&lt;span class="cm"&gt;             * This will simulte the server scenario by writing the send&lt;/span&gt;
&lt;span class="cm"&gt;             * buffer as much as it can, and returns -1 if it&amp;#39;s full. So&lt;/span&gt;
&lt;span class="cm"&gt;             * that point the * server is reset the connection by closing&lt;/span&gt;
&lt;span class="cm"&gt;             * the socket. So that&amp;#39;s the current server behaviour in my&lt;/span&gt;
&lt;span class="cm"&gt;             * environment. Check the python client side, how it handling&lt;/span&gt;
&lt;span class="cm"&gt;             * to avoid the connection reset by the server.&lt;/span&gt;
&lt;span class="cm"&gt;             */&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F_SETFL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_NONBLOCK&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error:fnctl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numbytes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;numbytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send_sock_msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_sd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Kernel sending buffer is full.&amp;quot;&lt;/span&gt;\
                       &lt;span class="s"&gt;&amp;quot;Closing the connection.: %d %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;numbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_sd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Server sending the msg no: %d %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;numbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_sd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_sd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Parent doesn&amp;#39;t need child&amp;#39;s socket.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-run-the-code"&gt;
&lt;h2&gt;How to Run the code.&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Start the C server. Which listening on the port 8000 and handles the&lt;/span&gt;
&lt;span class="c1"&gt;# Client connections on another thread.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

$ gcc tcp_server.c
$ ./a.out

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# On another shell environemnt run python client.&lt;/span&gt;
&lt;span class="c1"&gt;# It has two options -&lt;/span&gt;

&lt;span class="c1"&gt;#    1. Run the Python client which gives the error 104 and 107 issue. Which&lt;/span&gt;
&lt;span class="c1"&gt;#       is the issue I&amp;#39;m getting right now on the production machine.&lt;/span&gt;

&lt;span class="c1"&gt;#    2. Another implementation of the Python client which fixes the issue and&lt;/span&gt;
&lt;span class="c1"&gt;#       read the socket data without causing socket error 104 and 107&lt;/span&gt;

$ python tcp_server.py  &lt;span class="c1"&gt;# Simulate the tcp client with socket problem.&lt;/span&gt;

&lt;span class="c1"&gt;# OUTPUT #&lt;/span&gt;

Starting Client
sending &lt;span class="m"&gt;1&lt;/span&gt;
Hello Worl
sending &lt;span class="m"&gt;2&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;tcp_server.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;98&lt;/span&gt;, in &amp;lt;module&amp;gt;
    start_tcp_client&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;tcp_server.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;31&lt;/span&gt;, in start_tcp_client
    sock.send&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hi i got the data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
socket.error: &lt;span class="o"&gt;[&lt;/span&gt;Errno &lt;span class="m"&gt;104&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Connection reset by peer


&lt;span class="c1"&gt;#    This will crash after while since the server closes the socket on its&lt;/span&gt;
&lt;span class="c1"&gt;#    side due to the kernel sending buffer is full on the server side.&lt;/span&gt;

$ python tcp_server.py -c &lt;span class="c1"&gt;# This client has the option to fix that issue.&lt;/span&gt;

&lt;span class="c1"&gt;#OUTPUT#&lt;/span&gt;

Starting the newly implemented client...
sending &lt;span class="m"&gt;1&lt;/span&gt;
Handled &lt;span class="m"&gt;169&lt;/span&gt; bytes
sending &lt;span class="m"&gt;2&lt;/span&gt;
Handled &lt;span class="m"&gt;156&lt;/span&gt; bytes
sending &lt;span class="m"&gt;3&lt;/span&gt;
Handled &lt;span class="m"&gt;1079&lt;/span&gt; bytes
sending &lt;span class="m"&gt;4&lt;/span&gt;
Handled &lt;span class="m"&gt;208&lt;/span&gt; bytes
sending &lt;span class="m"&gt;5&lt;/span&gt;
Handled &lt;span class="m"&gt;364&lt;/span&gt; bytes
sending &lt;span class="m"&gt;6&lt;/span&gt;
Handled &lt;span class="m"&gt;286&lt;/span&gt; bytes
....

Goese on like this without any interrupt or network buffer overflow.

&lt;span class="c1"&gt;#    This will read the socket data in non-blocking mode and read entire&lt;/span&gt;
&lt;span class="c1"&gt;#    data from the socket till it throws EAGAIN exception.&lt;/span&gt;

&lt;span class="c1"&gt;#    This time the client won&amp;#39;t throw any excetion and the server and client&lt;/span&gt;
&lt;span class="c1"&gt;#    work smoothly. So finally I got the protype to fix the actual production&lt;/span&gt;
&lt;span class="c1"&gt;#    system.&lt;/span&gt;

&lt;span class="c1"&gt;#    To See what is happening while running this scripts run `tcpdump`&lt;/span&gt;
&lt;span class="c1"&gt;#    caommand.&lt;/span&gt;

$ sudo tcpdump -i any port &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can get the above code from this &lt;a class="reference external" href="https://github.com/haridas/non-blocking-tcp-server-sample"&gt;github repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;references&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://linux.die.net/man/2/sendmsg"&gt;https://linux.die.net/man/2/sendmsg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$ man socket&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category><category term="networking"></category><category term="tcp"></category></entry><entry><title>RabbitMQ's Exchange-to-Exchange binding</title><link href="https://haridas.in/rabbitmqs-exchange-to-exchange-binding.html" rel="alternate"></link><published>2014-04-30T00:00:00+05:30</published><updated>2014-04-30T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2014-04-30:/rabbitmqs-exchange-to-exchange-binding.html</id><summary type="html">&lt;p&gt;I'm a long time user of RabbitMQ for different type of tasks
like chat system, worker queue, logging etc. But lately I was looking for an
option to track all messages passing through set of exchanges without
interfering those exchanges. The need for it's that I want to analyze the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm a long time user of RabbitMQ for different type of tasks
like chat system, worker queue, logging etc. But lately I was looking for an
option to track all messages passing through set of exchanges without
interfering those exchanges. The need for it's that I want to analyze the
messages passing in those exchanges. For that case Exchange-to-Queue binding
is not enough for me, Because on that case I have to create one queue for each
exchange available on the server.I want to avoid this. Then I came across this interesting
RabbitMQ extension feature ( It's not there in the AMQP standard yet) which allow
you to bind Exchange-to-Exchange.&lt;/p&gt;
&lt;p&gt;So using this exchange-to-exchange binding I can create a dummy exchange and
bind it with those exchanges that I'm instead in. The routing keys used with
the queue binding is applicable while binding the exchanges together.
The messages are routed to the other binded exchanges by applying those routing
keys. And obviously I created a dummy queue to persist those messages coming on
the dummy exchange.&lt;/p&gt;
&lt;p&gt;By this way my external monitoring and quality checking code only monitor the
dummy queue for the messages and it consumes and discard it from the queue. By
the way this setup is not for permanent use.&lt;/p&gt;
&lt;p&gt;I'm using this method to do the following things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;To create more complex routing topologies for your application.&lt;/li&gt;
&lt;li&gt;To do the integration testing of complex systems which has asynchronous work
flows.&lt;/li&gt;
&lt;li&gt;We can use this for do some debugging operations of production system without
affecting the live machine. We can bind and start tap the messages at any
time from the live system. After use we can remove those bindings.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the simple diagram showing the exchange-to-exchange binding. The orange
lines showing the exchange-to-exchange binding.&lt;/p&gt;
&lt;img alt="Exchange-to-Exchange-Binding" class="align-left" src="/images/Exchange-to-Exchange-Binding.png" style="width: 100%;" /&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
</content><category term="programming"></category><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>Some Programming Strategies</title><link href="https://haridas.in/some-programming-strategies.html" rel="alternate"></link><published>2013-01-26T00:00:00+05:30</published><updated>2013-01-26T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2013-01-26:/some-programming-strategies.html</id><summary type="html">&lt;p&gt;Here I want to share some of my thoughts that helps me to make good decisions in
every point of my programming life. This might looks like obvious to some but
it was not in real life.&lt;/p&gt;
&lt;p&gt;The code samples are in Python, But concepts are applicable to most of â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here I want to share some of my thoughts that helps me to make good decisions in
every point of my programming life. This might looks like obvious to some but
it was not in real life.&lt;/p&gt;
&lt;p&gt;The code samples are in Python, But concepts are applicable to most of the
programming languages.&lt;/p&gt;
&lt;div class="section" id="use-of-exception-handler-and-if-else-statement"&gt;
&lt;h2&gt;1. Use of Exception Handler and if-else statement&lt;/h2&gt;
&lt;p&gt;While writing a program we have to make sure that it won't fail for the edge
cases. So usually what most of them do is -- put a &lt;cite&gt;if&lt;/cite&gt; condition to check for
such scenarios. When the program runs, it has to check these conditions every time
to make sure that it was not the special case. If your language
has Exception handling system -- you can make use of it to handle the edge
cases.&lt;/p&gt;
&lt;p&gt;C doesn't have an exception handling system. It relay on error codes to notify the
calling function about what happens to the call. It returns 0 for a successful call or
a positive number, which represents an error. So the calling function has
to check for return code using &lt;cite&gt;if-else&lt;/cite&gt; condition. There is no other option out
there.&lt;/p&gt;
&lt;p&gt;But for those languages which has Exception handling system, we can make use of
it. But in that case we may mix up both if-else and Exception handling systems
to handle errors or edge cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Simple example&lt;/strong&gt; :-&lt;/p&gt;
&lt;p&gt;Consider a daemonizing program, which check for pid file while starting/stopping.
It calls the bellow function to get the pid. The calling function has main
exception handler to make sure that its logic won't break.&lt;/p&gt;
&lt;p&gt;When the bellow function got called -&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;While starting the daemon program&lt;/li&gt;
&lt;li&gt;While stopping the daemon program.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What does the main daemon program do in each case -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;While starting.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last loweralpha simple"&gt;
&lt;li&gt;If it found the pid file, it means the daemon is running. Program
stops by saying another instance of same program is running.&lt;/li&gt;
&lt;li&gt;If it gets an error while reading the file, then there was no pid file, so
the program is not running (An exception might happen while reading the pid
file). Create new pid file and start the program.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;While Stopping.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first loweralpha simple"&gt;
&lt;li&gt;If it found the pid file, remove it before stopping the program.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="last"&gt;b. If it didn't find the pid file, what it will do ?. It means there is no
daemon running. Just report that to user.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bellow mentioned are the code block that gets called by the main daemon
program to get the pid. See how we can handle the exceptions or errors using
Exception handler and/or if-else statement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Method 1&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This is bad way of using exceptions, kinda defensive programming.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pid_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;daemon.pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;

    &lt;span class="c1"&gt;# No file in the path, may be other IO error.&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Faild to Read file&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Somebody put non integer values in the pid file. Whom to blame ?&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;WrongPID&lt;/span&gt;

    &lt;span class="c1"&gt;# This catch all exception not necessarily required&lt;/span&gt;
    &lt;span class="c1"&gt;# Since the calling function or main code has it. This is like&lt;/span&gt;
    &lt;span class="c1"&gt;# over use of exception handler feature.&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;SomeUnKnownError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Using If/else method. The calling function has to check for None return&lt;/span&gt;
&lt;span class="c1"&gt;# value or an Exception case.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pid_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;daemon.pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file.pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# The programming languages which support exceptions&lt;/span&gt;
            &lt;span class="c1"&gt;# internally  raises exception when it fails one operation.&lt;/span&gt;
            &lt;span class="c1"&gt;# So we can&amp;#39;t expect C like behaviour here.&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Method 3&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Actually we know what going to happen, if some error happen while&lt;/span&gt;
&lt;span class="c1"&gt;# reading the pid file, it gets handled by the calling functions&amp;#39; exception&lt;/span&gt;
&lt;span class="c1"&gt;# handler. We are dealing with programming&lt;/span&gt;
&lt;span class="c1"&gt;# language which has Exception handling system. So make use of it&lt;/span&gt;
&lt;span class="c1"&gt;# effectively.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pid_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;daemon.pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like the  &lt;strong&gt;Method 3&lt;/strong&gt;, since it works for most of the time. It fail
rarely and at that time exception handler in the calling function should handle
it and decide its logic based on it. I'm not considering the edge cases due to race
conditions, since it was not for a real-time system :).&lt;/p&gt;
&lt;p&gt;We know that both are important tools to make better good error free programs.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;When we use if-else statement&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;We know for certain what going to happen. Even though there are chance for
different cases. ( C Error code mechanism is the good example ).&lt;/li&gt;
&lt;li&gt;We use if-else commonly to control the flow of the execution based on the
input.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;When we use Exeption handler&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;If we want to handle an error, otherwise leave it to system if you don't want
to handle errors happened on your code. Those programming languages  which support
Exceptions -- handles the exception itself on top level and report
that to user unless you want your own way of error reporting.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="code-optimization"&gt;
&lt;h2&gt;2. Code Optimization&lt;/h2&gt;
&lt;p&gt;Find out main code paths -- most of the time your program going to execute those
sections. Try to optimize those portions first -- that also not in the first
iteration of implementation. There should be remaining codes that handles edge
cases or Failure/Error cases, those portions not necessarily being optimized till
they are making any considerable noise on the performance :).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="number-of-lines-of-code"&gt;
&lt;h2&gt;3. Number of lines of code.&lt;/h2&gt;
&lt;p&gt;Don't try to reduce number of line of code, instead reduce number of lines
of code per one job/task. Write simple functions/methods that do only
one job not multiple jobs, otherwise you may have good reason to do it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; 05/Feb/2013&lt;/p&gt;
&lt;p&gt;This may violate the DRY ( Don't repeat yourself ) principle, but there is
a good reason for it.&lt;/p&gt;
&lt;p&gt;People usually try to reduce the number of lines by doing lot of jobs in single
code block and make the program  more complex,  and such code blocks has to
maintain pre-requirements for all the different cases, in which most of the
time one of those case may going to happen. So all extra work done there would cost
us when it executes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="learn-more-about-operating-system-and-compilers"&gt;
&lt;h2&gt;4. Learn More about Operating System and Compilers&lt;/h2&gt;
&lt;p&gt;Understand the machine and try to understand how things are happening deep
inside the machine. That would be very useful to understand different bottle
neck cases. And it would help you to find out reasons for why strange things are
happening while running your code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apply-basic-management-skills"&gt;
&lt;h2&gt;5. Apply basic Management skills&lt;/h2&gt;
&lt;p&gt;Apply Management skills to your programming. Pick right tool for right purpose
and think that way. I'm not 100% unbiased, but I'm working on it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chuck-all-rules-described-above"&gt;
&lt;h2&gt;6. Chuck all rules described above :).&lt;/h2&gt;
&lt;p&gt;It happens some time!, and it's not a bad thing though. We do programs that way
-- when we develop a new prototype or finding a solution for a particular issue, where
how we are going to implement doesn't make any importance but when we are
going to finish it does make. I think most of them might have gone through
such situations. For sure the good programming practices comes behind it.&lt;/p&gt;
&lt;p&gt;Let me know your views about these points through comment.&lt;/p&gt;
&lt;p&gt;Reference :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/328976/thorough-use-of-if-statements-or-try-catch-blocks"&gt;https://stackoverflow.com/questions/328976/thorough-use-of-if-statements-or-try-catch-blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2008/08/21/robust-exception-handling/"&gt;https://eli.thegreenplace.net/2008/08/21/robust-exception-handling/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="programming"></category></entry><entry><title>Vim as your IDE</title><link href="https://haridas.in/vim-as-your-ide.html" rel="alternate"></link><published>2012-11-08T00:00:00+05:30</published><updated>2012-11-08T00:00:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2012-11-08:/vim-as-your-ide.html</id><summary type="html">&lt;p&gt;To follow this article the reader should at least have a basic idea of how to use
Vim and its command modes. Or if you are new to Vim, you can &lt;a class="reference external" href="https://haridas.in/how-i-came-in-to-vim.html"&gt;read&lt;/a&gt; my first blog to
know how I came in to Vim and its fundamental differences with other editors â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;To follow this article the reader should at least have a basic idea of how to use
Vim and its command modes. Or if you are new to Vim, you can &lt;a class="reference external" href="https://haridas.in/how-i-came-in-to-vim.html"&gt;read&lt;/a&gt; my first blog to
know how I came in to Vim and its fundamental differences with other editors.&lt;/p&gt;
&lt;p&gt;Here I'm trying to explain how to make the Vim more productive by adding some extra
features through Vim plugins. After this setup the Vim would have most of the
features that a modern IDE offers. I'm a python developer so this Vim setup
is a little inclined to python side. But I'm including general plugins
only to make it suitable for most of the programming languages.&lt;/p&gt;
&lt;p&gt;The installation and configuration setups are being described at the end,
if you want to take a look at it, go here &lt;a class="reference internal" href="#setup-vim-from-scratch"&gt;Setup Vim from Scratch&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update on Dec-18-2017&lt;/p&gt;
&lt;p&gt;The plugin and vim environment got new changes. I captured it
on a separate blog (&lt;a class="reference external" href="https://haridas.in/vim-upgrade-2017.html"&gt;https://haridas.in/vim-upgrade-2017.html&lt;/a&gt;).
Please follow new blog entry now on.&lt;/p&gt;
&lt;p&gt;Support for vim environment specified in this blog entry is deprecated now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The basic Vim or Vi installation comes with most of the Gnu/Linux machines are
more than enough for good productive works. And Vim has plugin structure, so we
can extend the Vim through plugins. The plugins further improve the productivity and
reduces lot of key strokes.&lt;/p&gt;
&lt;p&gt;The Gnu/Linux's Console or Terminal based Vim has some limitation to show good
fonts and colors. So you have to install GTK version of the Vim(Gvim). Gvim gives
you all the good looking features to your Vim. Just take a look
at my Konsole and GTK Vim screen shots.&lt;/p&gt;
&lt;div class="section" id="vim-on-kde-konsole"&gt;
&lt;h2&gt;Vim on KDE Konsole&lt;/h2&gt;
&lt;img alt="vim-on-console" class="align-left" src="/images/vim-console.jpg" style="width: 100%; height: 400px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="gvim"&gt;
&lt;h2&gt;Gvim&lt;/h2&gt;
&lt;img alt="Gvim image" class="align-left" src="/images/gvim.jpg" style="width: 100%; height: 400px;" /&gt;
&lt;p&gt;Here is the list of plugins that I have been configured on my Vim.
It includes good color theme also. All of this Vim setup are there
on my Github project. Towards the end I described how to make use of my Github project to
get all of this features on your Vim. Before that first understand the
functionalities and use case of different plugins and then we can go to the
installation step.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UPDATE (16/June/2013):-&lt;/p&gt;
&lt;p&gt;After using GVIM for a while, I came back to the Konsole itself since it's
more convenient for me. But one problem with terminal is that it only
support only 256 colors. But don't need to worry actually it's more than
enough. On the command mode of the vim run this command to enable 256
colors - &amp;quot;:set t_Co=256&amp;quot;. Actually this special setting is not required for
the default themes, but if we are using new themes with more colors and
font settings then those themes may not work properly on the terminal mode.
So this settings will make sure that it will work even though it will
degrade the features gracefully. My .vimrc has been updated with these
changes so you will get it from github.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="topics"&gt;
&lt;h3&gt;Topics&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Plugins&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#minibuferexplorer"&gt;MinibuferExplorer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#command-t"&gt;Command-t&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#syntastic"&gt;Syntastic&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#snipmate"&gt;Snipmate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fugitive"&gt;Fugitive&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nerdtree"&gt;NerdTree&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nerdcommenter"&gt;Nerdcommenter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rope"&gt;Rope&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tagbar"&gt;Tagbar&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#simplepairs"&gt;SimplePairs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#others"&gt;Others&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setup-vim-from-scratch"&gt;Setup Vim from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#some-vim-shortcuts"&gt;Some Vim Shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;A Side Note&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In my .vimrc file, I disabled the use of arrow keys in the Vim command mode.
That was forced me to learn the Vim classic &lt;strong&gt;hjkl&lt;/strong&gt; arrow keys, it really
worked for me. Now I don't required the key board arrow keys any more
even in Vim editing mode.&lt;/p&gt;
&lt;p&gt;If you want to change this behaviour, just remove below sections from my
.vimrc file.&lt;/p&gt;
&lt;img alt="" src="/images/vimrc1.jpg" style="width: 100%;" /&gt;
&lt;p&gt;Similarly, you can just go through my .vimrc file to see other options,
I tried to document my .vimrc file as much as possible. You can play
around with it to make it suitable for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="minibuferexplorer-file-tabs"&gt;
&lt;span id="minibuferexplorer"&gt;&lt;/span&gt;&lt;h2&gt;1. MinibuferExplorer (File Tabs)&lt;/h2&gt;
&lt;p&gt;This is like Tabs on other IDE's. We can see the opened files on vim using this
plugin. By default, we have to use &lt;cite&gt;:ls&lt;/cite&gt; to see opened buffers. So this
plugin makes it very convenient to view the opened files as a tabs.&lt;/p&gt;
&lt;p&gt;Vim has slightly different concept about the Tabs compared to other IDE's.
Vim has support for tabs by default. That tab is different from the normal
IDE's Tab. Actually the difference is that the vim tabs are
a collection of opened buffers(or files.). So we can consider it as a group of
tabs in other IDE context.&lt;/p&gt;
&lt;p&gt;But most of the time we only requires one vim tab and set of opened
buffers(files.). The MinibuferExplorar will help you to see those opened buffers as
a virtual tabs. See the screen shot below.&lt;/p&gt;
&lt;img alt="" src="/images/minibufexplorer.jpg" style="width: 90%; height: 356px;" /&gt;
&lt;p&gt;You can use &lt;cite&gt;CTRL + h/j/k/l&lt;/cite&gt; or &lt;cite&gt;CTRL + w&lt;/cite&gt; to navigate around the different
split windows and the mini buffer Explorer. To open
a hidden buffer on a vertical split window, just go to the MinibuferExplorer and
pick a file buffer(You can use normal &lt;cite&gt;hj&lt;/cite&gt; keys to move horizontally on
MiniBufferExplorer) then press &lt;cite&gt;v&lt;/cite&gt;. Or Press &lt;cite&gt;s&lt;/cite&gt; to open the
buffer or file on a horizontal split window.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-t-file-search"&gt;
&lt;span id="command-t"&gt;&lt;/span&gt;&lt;h2&gt;2. Command-t (File Search)&lt;/h2&gt;
&lt;p&gt;Very awesome plugin for Vim. Which help us to search files very quickly.
To get better speed it was implemented in C. To install this plugin
you need one extra compilation of this plugin because of C code. Don't worry
I explained this in the setup section.&lt;/p&gt;
&lt;img alt="" src="images/command-t.jpg" style="width: 100%;" /&gt;
&lt;p&gt;Once we have enabled this plugin you can see the search list using your
&lt;cite&gt;&amp;lt;leader&amp;gt; + t&lt;/cite&gt;. I'm using my leader key as &lt;strong&gt;,&lt;/strong&gt; (Comma), so for me the
command will looks like &lt;cite&gt;,t&lt;/cite&gt; (comma + t). Normally the leader key is &amp;quot;\&amp;quot; on
your default Vim comes with your Distro. You can change this setting in .vimrc
file.&lt;/p&gt;
&lt;p&gt;Actually the leader key provides a extension to use all the keys in the
keyboard as your own shortcuts. This leader key is activated in the normal mode of the
vim.&lt;/p&gt;
&lt;p&gt;Command-t only list all opened buffers by typing &lt;cite&gt;,b&lt;/cite&gt; in normal mode. It's very
useful if we opened lot of files on your Vim.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="syntastic-syntax-checker"&gt;
&lt;span id="syntastic"&gt;&lt;/span&gt;&lt;h2&gt;3. Syntastic (Syntax Checker)&lt;/h2&gt;
&lt;p&gt;Another very useful plugin for all programming languages.
This plugin will help you to keep the syntax of a program correct --
like auto correct in other IDE's. This package is a general one so
we can expand it very easily by support for new languages. By default it
supports lot of programming languages. So this plugin is a must one for Vim.&lt;/p&gt;
&lt;p&gt;For example, if you are editing a RST file (All my blog posts are in
reStructured Text format) and you made some syntax errors in it and then you saved
it, after the save operation the Syntastic Plugin will check for any syntax
errors on your file automatically and show you the location of the error and
its reason very neatly.&lt;/p&gt;
&lt;p&gt;Take a look at a portion of the rst file of this blog post. I made a syntax
error in the image tag,&lt;/p&gt;
&lt;img alt="" src="/images/syntastic.jpg" style="width: 100%;" /&gt;
&lt;p&gt;Similarly Synstastic will help you to follow the standard coding methods defined by
different programming communities. For eg; Python code has &lt;strong&gt;PEP8&lt;/strong&gt; standard, so while
writing the python code, if we are not following it, Synstastic will show you the
errors. After a while you would learn the PEP8 standard without any extra work :).&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="snipmate-code-templates"&gt;
&lt;span id="snipmate"&gt;&lt;/span&gt;&lt;h2&gt;4. Snipmate (Code Templates)&lt;/h2&gt;
&lt;p&gt;A simple way to avoid typing some repetitive sequence of codes. For example, in
python, we initialize a class by typing &lt;cite&gt;class&lt;/cite&gt; keyword, name, etc... Instead
of doing all those drama, we can just populate the default set of class
structure from snipmate by typing &lt;strong&gt;cl&lt;/strong&gt; &amp;lt;tab&amp;gt;. Try out it by opening a python
test file.&lt;/p&gt;
&lt;p&gt;The Snimpate plugin provide a lot of such shortcuts for different programming
languages. We can also define our own snippets. For web developers it would be
very easy if we have snippets for &amp;lt;table&amp;gt;, &amp;lt;div&amp;gt; tag completions. By default
Snipmate does have support for different html tags. Please check
the snippets folder(&lt;cite&gt;~/.vim/bundle/snippets/&lt;/cite&gt;) to see all available
snippets for a particular language or markup.&lt;/p&gt;
&lt;p&gt;More examples;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim test.py
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/python&lt;/span&gt;
&lt;span class="n"&gt;cl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After typing &lt;cite&gt;cl&lt;/cite&gt; press tab and see the magic of full class structure.
Similarly you can define your own snippets. For eg;
&lt;cite&gt;for&lt;/cite&gt; &amp;lt;tab&amp;gt; to expand the &lt;cite&gt;for&lt;/cite&gt; statement of your language.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fugitive-git"&gt;
&lt;span id="fugitive"&gt;&lt;/span&gt;&lt;h2&gt;5. Fugitive (Git)&lt;/h2&gt;
&lt;p&gt;This plugin is for git repository management inside Vim itself. It provides set
of short commands, that we can directly use in the Vim command mode to see and do the
git related operations. We don't need to go outside the editing environment to
manage those stuffs.&lt;/p&gt;
&lt;p&gt;Also it have very nice git diff view inside vim itself, it is very nice
to use.&lt;/p&gt;
&lt;p&gt;To see all available git commands under this plugin just type
&lt;cite&gt;:G&amp;lt;tab&amp;gt;&lt;/cite&gt;, Provided the current path is under git.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nerdtree-file-browser"&gt;
&lt;span id="nerdtree"&gt;&lt;/span&gt;&lt;h2&gt;6. NerdTree (File Browser)&lt;/h2&gt;
&lt;p&gt;This will display your project directory structure in tree format. It provides
lot of shortcuts to navigate through the source tree easily. It is an another
common Plugin required for an IDE. Check the below image to see how it looks
like.&lt;/p&gt;
&lt;p&gt;Shortcuts - I mapped the following keys in .vimrc file to show and hide the
Nerdtree when ever required. You can re-map this to your own choice.&lt;/p&gt;
&lt;img alt="" src="/images/nerd_tree.jpg" style="width: 100%;" /&gt;
&lt;p&gt;To open and close the Nerdtree press &lt;strong&gt;CTRL + n&lt;/strong&gt;. Also you can see other
available commands for this plugin by typing, &lt;tt class="docutils literal"&gt;ESC + :NERD &amp;lt;tab&amp;gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nerdcommenter-commenting"&gt;
&lt;span id="nerdcommenter"&gt;&lt;/span&gt;&lt;h2&gt;7. NerdCommenter (Commenting)&lt;/h2&gt;
&lt;p&gt;This plugin is only to comment out multi line code blocks together. In normal
vim there is no such thing(&lt;a class="reference internal" href="#update"&gt;Update&lt;/a&gt;), so if we want to comment multiple lines
we have to go through each lines.&lt;/p&gt;
&lt;p&gt;This plugin makes it handy, so you only need to select the code block using
mouse or keyboard (Vim visual mode) and type the following commands to comment
it out or uncomment.&lt;/p&gt;
&lt;p&gt;Comment entire selected code block : &lt;tt class="docutils literal"&gt;&amp;lt;leader&amp;gt;cc,&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Toggle the commented state : &lt;tt class="docutils literal"&gt;&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="target" id="update"&gt;Update&lt;/span&gt;: Please see the comments of this post, there is a way to comment out
multiple lines in the default Vim itself, But it's not a programming language
dependent.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="rope"&gt;&lt;/span&gt;&lt;h2&gt;8. Rope&lt;/h2&gt;
&lt;p&gt;Rope is a special Plugin for Python project navigation. Most of the IDE's have
similar feature to see the definition of a function or class by clicking on it or
via some shortcut keys.&lt;/p&gt;
&lt;p&gt;By default, if we open a Python project in Vim it won't have support for this
feature. When we trying to use this feature first time, the Rope will prompt
you to create a Ropeproject under current directory. And keep the
configurations specific to Rope Project in &lt;strong&gt;./.ropeproject&lt;/strong&gt; folder under
current directory.&lt;/p&gt;
&lt;p&gt;The Plugin helps us to create the settings easily, after that we can use this plugin to
view definition of all functions or classes comes under the rope project path.&lt;/p&gt;
&lt;p&gt;In my Vim I mapped the &lt;strong&gt;&amp;lt;leader&amp;gt;j&lt;/strong&gt; to :RopeGotoDefinition. For eg.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep your cursor on top of the &lt;cite&gt;os&lt;/cite&gt; and press the &amp;lt;leader&amp;gt;j or type
:RopeGotoDefinition, Vim will take you into the os file from the system path
Similarly we can go to definitions of any python entity comes under the Rope
path settings. You can update the Rope settings for this python project from
&lt;strong&gt;./.ropeproject/config.py&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;This plugin also required for the modern IDE feature list. :)&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tagbar-class-browser"&gt;
&lt;span id="tagbar"&gt;&lt;/span&gt;&lt;h2&gt;9. Tagbar (Class Browser)&lt;/h2&gt;
&lt;p&gt;This plugin is similar to the NerdTree, but instead of listing project
directory structure it list the objects and functions names inside a file. Like Class
browser in other IDE's.&lt;/p&gt;
&lt;img alt="" src="/images/tagbar.jpg" style="width: 100%;" /&gt;
&lt;p&gt;I mapped &lt;cite&gt;&amp;lt;leader&amp;gt;l&lt;/cite&gt; to open tagbar and same combination to close it also.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="simple-pairs"&gt;
&lt;span id="simplepairs"&gt;&lt;/span&gt;&lt;h2&gt;10. Simple Pairs.&lt;/h2&gt;
&lt;p&gt;This is a simple plugin to auto complete single quote, double quote,
parentheses. This is a very handy to save few key press.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;span id="others"&gt;&lt;/span&gt;&lt;h2&gt;Others&lt;/h2&gt;
&lt;p&gt;This section is to discus about already existing awesome features build in
with the Vim. You can consider me as a beginner in this area :).
If you are looking for learning more advanced details of the Vim editor,
you don't need to search on google, you can find it out under its documentation
itself.&lt;/p&gt;
&lt;p&gt;To see all documentation type &lt;cite&gt;ESC + :help&lt;/cite&gt;. The documentation is very
huge, so Vim provides search option across all its documentation. To see
a documentation about a topic, type &lt;cite&gt;ESC + :help &amp;lt;topic&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;For eg;&lt;/p&gt;
&lt;p&gt;To see about the documentation of &lt;em&gt;jumps&lt;/em&gt; , type : &lt;cite&gt;ESC + :help jumps&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;I wrote above example, because it is an another interesting feature required
for modern IDE. The thing is that it was already build in with Vim.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Jump List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found this feature accidentally. It is to jump across different files and
the same time it have an option for jump back through all the files that we
came across.&lt;/p&gt;
&lt;p&gt;To understand this feature - If we used Rope plugin to see definition of
a function outside the current file, it will open a new buffer in Vim and
it take you to that file. What if we want to come back to the same location of
previous file ?. This requires jump back operation. Press &lt;cite&gt;CTRL + o&lt;/cite&gt;, you can
see the magic. Press &lt;cite&gt;CTRL + &amp;lt;tab&amp;gt;&lt;/cite&gt; to go forward again.&lt;/p&gt;
&lt;p&gt;There is much more things are there about jumplist, Vim internally keeps the
list of our locations across different files. you can see that by typing
&lt;cite&gt;:jumps&lt;/cite&gt;. Different instances of the Vim will share the same jump list.&lt;/p&gt;
&lt;p&gt;Similar to this, lot of things are out there to learn. This Others section
is not going to end here :). But for now I'm stopping here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the explanation of Vim feature is over now, lets take a look at how to setup
the Vim to get all these above features and make Vim ready to extend with new
plugins.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="setup-vim-from-scratch"&gt;
&lt;h3&gt;Setup Vim from Scratch&lt;/h3&gt;
&lt;p&gt;All required packages are there in my Vim &lt;a class="reference external" href="https://github.com/haridas/Dotfiles/tree/master/vim-files"&gt;github&lt;/a&gt; project. I put all those
settings and plugins in standard way. So you can extend or remove them when
ever required.&lt;/p&gt;
&lt;p&gt;Before doing this, please take a backup of your current Vim settings from your home
directory.&lt;/p&gt;
&lt;p&gt;We can start the installation by picking my Git Repository,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;git clone git://github.com/haridas/Dotfiles.git

&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; Dotfiles
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I kept all the required plugins as git submodules. So we will get the new
changes from the plugin projects by updating the submodule project.
While cloning my main repo, it won't retrieve the submodules or external plugin git
projects. But we have all the settings and paths in my git projects itself.
So we can easily fetch the current stable code from all the external projects.
To do that, type below commands inside your Dotfiles folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;path to gitproject&amp;gt;/Dotfiles&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;git submodule init
&lt;span class="gp"&gt;$&lt;/span&gt;git submodule update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have all the files required to get start with Vim, Next thing is to
link my git files as your vim files. To do that just create soft link of
the Vim system files and then point it to my git repository files.
Here is the steps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;ln -s &amp;lt;path-to&amp;gt;Dotfiles/vim-files/vim .vim
&lt;span class="gp"&gt;$&lt;/span&gt;ln -s &amp;lt;path-to&amp;gt;Dotfiles/vim-files/vim/vimrc .vimrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it, now open your vim, you can see all the features described above are
being available, except command-t. Because it requires a compilation.
The compilation step is very simple. Follow me,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;path-to&amp;gt;Dotfiles/vim-files/vim/bundle/command-t/ruby/command-t
&lt;span class="gp"&gt;$&lt;/span&gt; ruby extconf.rb
&lt;span class="gp"&gt;$&lt;/span&gt; make
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The make will succeed only when you have gcc installed ,
and your Vim has ruby support. To check the ruby support, open your vim and type,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;ruby&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is no error then you have ruby support with your vim.
The latest version of Vim has support for major
dynamic languages like Python, Ruby and others. So that it won't give you any
head ache.&lt;/p&gt;
&lt;p&gt;If the dynamic language support is not there with your Vim, then you have to
install complete vim from your package manager.&lt;/p&gt;
&lt;p&gt;If you are using Debian based system you can follow this command. Other
platforms has also the same option using their package manager tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;apt-cache search python &lt;span class="p"&gt;|&lt;/span&gt; grep vim
&lt;span class="gp"&gt;$&lt;/span&gt;apt-cache search ruby &lt;span class="p"&gt;|&lt;/span&gt; grep vim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the list install any of the GUI based package.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update-06-nov-2014"&gt;
&lt;h2&gt;Update: 06-Nov-2014&lt;/h2&gt;
&lt;p&gt;Syntastic&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are seeing the syntax highlighter is not catching the errors on your program
then it means, the required syntax checkers aren't installed. Please check this link
and find the corresponding syntax checkers to be installed on your machine.&lt;/p&gt;
&lt;p&gt;eg; For &lt;cite&gt;python&lt;/cite&gt;, you have to install &lt;cite&gt;&amp;quot;pyflakes&amp;quot;&lt;/cite&gt; (&lt;cite&gt;&amp;quot;pip install pyflakes&amp;quot;&lt;/cite&gt;)&lt;/p&gt;
&lt;p&gt;Read the FAQ section of the syntastic doc - [&lt;a class="reference external" href="https://github.com/scrooloose/syntastic#3-faq"&gt;FAQ Link&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Check all the supported parsers by the syntastic - [&lt;a class="reference external" href="https://github.com/scrooloose/syntastic/wiki/Syntax-Checkers"&gt;Syntax Checkers&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Command-t&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;If you are setting this up on a freshly installed machine then you have
to install &lt;cite&gt;ruby-dev&lt;/cite&gt; package from your package manager.&lt;/p&gt;
&lt;dl class="last docutils"&gt;
&lt;dt&gt;On Debian based machines&lt;/dt&gt;
&lt;dd&gt;&lt;cite&gt;sudo apt-get install ruby-dev&lt;/cite&gt;&lt;/dd&gt;
&lt;dt&gt;On Redhat based machines&lt;/dt&gt;
&lt;dd&gt;&lt;cite&gt;yum install ruby-devel&lt;/cite&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="some-vim-shortcuts"&gt;
&lt;h3&gt;Some Vim shortcuts&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In normal mode
==============

:23,30m200  -- Move a section of code to another line.

df, (reverse dF,)   -- Delete all characters till , on the current line.

I  -- Go to beginning of the line as insert mode.

$   -- In command mode, go to end of the line.

gg  -- Go to beginning of the file

G  -- Go to end of the file.

CTRL + o, CTRL + i  -- Jumps back and forward, very useful.

CTRL + h/j/k/l  -- Move the selection to different split windows and
MinibuferExplorer.

CTRL + F    -- Page down scroll.

CTRL + B    -- Page back scroll.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;All these hard works to setup your Vim would be useful to you only when you
realize the fact that the Vim basic editing features will save you a lot of
your time and increase the productivity. For that you don't required above discussed
plugin features. The plugins will only reduce some keystrokes via we will get some
productivity improvements. But it won't turn you from other editors to Vim.
Vim default features are more than enough to attract you to use Vim.
I hope you understood my feeling. :)&lt;/p&gt;
&lt;p&gt;Enjoy the Vim hacking.&lt;/p&gt;
&lt;p&gt;Back to &lt;a class="reference internal" href="#topics"&gt;Topics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 1&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aug-20-2012&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Please check the comments from &lt;a class="reference external" href="https://news.ycombinator.com/item?id=4370175"&gt;Hacker News&lt;/a&gt; and &lt;a class="reference external" href="https://www.reddit.com/r/programming/comments/y21ey/this_is_the_most_comprehensible_guide_ive_seen/"&gt;Reddit&lt;/a&gt; also.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aug-22-2012&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reworded some portions of the blog. Please let me know if you found any
problems with this blog.Thanks to every one for your valuable suggestions
to improve my blog.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="linux"></category><category term="vim"></category><category term="editor"></category></entry><entry><title>How I came in to Vim</title><link href="https://haridas.in/how-i-came-in-to-vim.html" rel="alternate"></link><published>2012-05-27T16:30:00+05:30</published><updated>2012-05-27T16:30:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2012-05-27:/how-i-came-in-to-vim.html</id><summary type="html">&lt;p&gt;I know most of them in the programming world are very fascinated to Vim editor
rather than typical IDE's like Eclipse, Visual Studios etc. Every one using Vim
has a story to tell, How they came in to Vim. Here is my story.&lt;/p&gt;
&lt;p&gt;I was started to use the Vim â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I know most of them in the programming world are very fascinated to Vim editor
rather than typical IDE's like Eclipse, Visual Studios etc. Every one using Vim
has a story to tell, How they came in to Vim. Here is my story.&lt;/p&gt;
&lt;p&gt;I was started to use the Vim editor from my College time onwards. Since then for
a long time I was just used it whenever there is no  other option available, and
I did't realized the importance of Vim editor.&lt;/p&gt;
&lt;p&gt;After I started my Job as Server Administrator, I have to use Vim regularly to
work with servers and other configuration files. But I used it because there is
no other thing available at remote severs :). And some times when I watching
hackers video, most of them are using Vim editor to show their works,
I always wonder why they are using it instead of common IDE's. In the same time
I have an interest in Programming, so I tried to  automate my  works using
different Scripting and Programming languages, that eventually turned me to a Programmer.&lt;/p&gt;
&lt;p&gt;When I was started to working as a Django developer I used to work with Eclipse with
python binding. At these times I very rarely used the Vim editor, most of time
I was engaged in Eclipse editor. Then I moved to another company as
a Python and Django backend developer, there I met &lt;a class="reference external" href="https://twitter.com/satyajitranjeev"&gt;&amp;#64;Satyajit Ranjeev&lt;/a&gt; My Team
Lead and a Big fan of Vim, He already using Vim as his main editor and he encouraged me and others to use
the Vim editor. But for few weeks I didn't mind it, and was worked with eclipse
itself.&lt;/p&gt;
&lt;p&gt;Finally one day evening I realized the fact that why the Vim gets this much interest
among programmers and other hackers. That was a sudden move, with in that day
Itself I learned the basic navigation key bindings and &lt;a class="reference external" href="https://twitter.com/satyajitranjeev"&gt;&amp;#64;Satyajit Ranjeev&lt;/a&gt; helped
me to setup the Vim as a general IDE for all my works. After that we together
working and learning to improve the Vim skills every day and I'm enjoying the
facts that I'm using it for my project works right after the first day of my
basic learning. When I look back I can see that I missed the Vim editor
for long time. Any way right now I became a big fan of Vim :). I used Vim to
type this blog entry.&lt;/p&gt;
&lt;p&gt;The main facts that I liked with the Vim editors while comparing with other
editors are,&lt;/p&gt;
&lt;div class="section" id="basic-navigation"&gt;
&lt;h2&gt;Basic Navigation&lt;/h2&gt;
&lt;p&gt;Actually this feature is the one which brought me to Vim. There is no need to
use Mouse, We can do every thing using key board. The mouse usage is far less
productive and more stressful if we compare the same operation with keyboard.
Mouse has an importance when user has no or very less idea about the GUI, then
He/She can do better with mouse. But that case is valid for short term usage
only.&lt;/p&gt;
&lt;p&gt;If you are comfortable with touch typing then it's very easy to catch the Vim commands.
This includes, navigating through,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;li&gt;Pages&lt;/li&gt;
&lt;li&gt;Lines&lt;/li&gt;
&lt;li&gt;Words&lt;/li&gt;
&lt;li&gt;Characters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And do all &lt;strong&gt;CRUD&lt;/strong&gt; operations very quickly by using simple keystroke.&lt;/p&gt;
&lt;p&gt;You might think that, we can do that with the keyboard arrow keys, that is
possible, but vim has its own way to do it. It got different modes of
working, &lt;strong&gt;Insert Mode&lt;/strong&gt; - For typing contents, &lt;strong&gt;Command mode&lt;/strong&gt; - In this mode we use
different shortcuts to do lot of operations, &lt;strong&gt;Search Mode&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;p&gt;Using Vim is far faster and easy to work with any text editing
operations.Programmers are always doing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="availability"&gt;
&lt;h2&gt;Availability&lt;/h2&gt;
&lt;p&gt;By default all Gnu/Linux ship with the Vim editor. So we don't need to move to
other editors when you are working with Gnu/Linux. Mac and Windows also got Vim
editors so just download it and give a try.
Also you can integrate the Vim key bindings with all major IDE's like
&lt;a class="reference external" href="https://www.viplugin.com/viplugin/"&gt;Eclipse&lt;/a&gt;, &lt;a class="reference external" href="https://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329"&gt;Visual Studio&lt;/a&gt;, etc..&lt;/p&gt;
&lt;p&gt;Also the vim keyboard bindings for navigation are also being used with web
browsers(&lt;a class="reference external" href="https://chrome.google.com/webstore/detail/dbepggeogbaibhgnhhndojpepiihcmeb"&gt;Chrome&lt;/a&gt;, &lt;a class="reference external" href="https://www.vimperator.org/vimperator"&gt;Firefox&lt;/a&gt;), and even you can use this key bindings with
OS command prompt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="light-weight-fast-and-highly-configurable"&gt;
&lt;h2&gt;Light weight, Fast and highly configurable&lt;/h2&gt;
&lt;p&gt;Even after adding lot of extensions with default Vim to make it general IDE
like look and feel, its size would be very less compared to other IDE's.And we
can customize the Vim editor very easily using its configuration file &lt;strong&gt;.vimrc&lt;/strong&gt;
under the user home directory. And of course Vim is very fast.&lt;/p&gt;
&lt;p&gt;One problem with Vim is, the learning curve. It has got lot of very advanced shortcuts
and key bindings that can  be understood after using it for a while,But the
basic shortcuts required to get start with Vim is very simple.
We will learn new and new keyboard bindings through out the life span :).&lt;/p&gt;
&lt;p&gt;You can have a look at this &lt;a class="reference external" href="https://kevinw.github.com/2010/12/15/this-is-your-brain-on-vim/"&gt;Article&lt;/a&gt; which describes how the Vim key bindings
became integral part of our life ;).&lt;/p&gt;
&lt;p&gt;My Vim Story-2 blog entry will come soon which describe the details how to
setup the Vim to make it suitable for all type of programmers.&lt;/p&gt;
&lt;p&gt;Till then... Bye :)&lt;/p&gt;
&lt;p&gt;EDIT:&lt;/p&gt;
&lt;p&gt;Finished the second part of my Vim blog - &lt;a class="reference external" href="https://haridas.in/vim-as-your-ide.html"&gt;How to setup Vim as your IDE&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="linux"></category><category term="vim"></category><category term="editor"></category></entry><entry><title>Wordpress blog migrated to Pelican</title><link href="https://haridas.in/wordpress-blog-migrated-to-pelican.html" rel="alternate"></link><published>2012-05-07T13:33:00+05:30</published><updated>2012-05-07T13:33:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2012-05-07:/wordpress-blog-migrated-to-pelican.html</id><summary type="html">&lt;p&gt;Initially this blog was running on wordpress, And you know the reasons for
that. Wordpress is the most successful and feature rich blog engine. So
I chose it without thinking twice, I didn't even search for a python alternative blog
engines at that time. But after a while I felt â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Initially this blog was running on wordpress, And you know the reasons for
that. Wordpress is the most successful and feature rich blog engine. So
I chose it without thinking twice, I didn't even search for a python alternative blog
engines at that time. But after a while I felt the difficulties while adding some
changes to the wordpress code, bugs with the wordpress plugins and more
importantly the Web based editor is very annoying while typing new contents.&lt;/p&gt;
&lt;p&gt;If we are considering the technical points, wordpress is a dynamic blog engine,
it is an overkill for simple blogs and other wiki based sites. Main issue is the speed of
page rendering.The static pages are way faster than the dynamic pages. I know
wordpress has caching feature to improve the speed of the page rendering,but it
is not a simple solution.&lt;/p&gt;
&lt;p&gt;Actually above points are all came to my mind after seeing the static site
generators and their awesome features.&lt;/p&gt;
&lt;div class="section" id="advantage-of-static-site-generators-over-dynamic-blog-engines"&gt;
&lt;h2&gt;Advantage of static site generators over Dynamic blog engines&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Serve html files directly, so very fast.&lt;/li&gt;
&lt;li&gt;Easy maintenance of the site, very less pain with server setup.&lt;/li&gt;
&lt;li&gt;Use your favourite text editor for blog posting. I'm a VIM fan :).&lt;/li&gt;
&lt;li&gt;It uses Markdown or Restructured Text Syntax for blog entry. So we just need to type
the post in normal text with simple formating. So we don't need to worry about the
html formatting while typing the content.This feature were attracted me more
because the wordpress web editor sucks, and here I can use Vim.&lt;/li&gt;
&lt;li&gt;Host it on Github,Bitbucket. The entire blog is a set of text files that
enables easy version controlling.&lt;/li&gt;
&lt;li&gt;Very easy to customize the Themes  or other internal structure.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next challenge that I faced was the selection of one static site generator from
bunch of choice. There are lot of them are implemented in
Python or Ruby. I was searched for few days to come up with a suitable one.
Finally I picked up a Python based engine &lt;a class="reference external" href="https://pelican.notmyidea.org/"&gt;Pelican&lt;/a&gt; as my favorite. It doesn't
mean that others are bad implementation, but Pelican suits my taste better.&lt;/p&gt;
&lt;p&gt;Here is the list of few major static site generators that I went through as
part of the selection process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jekyll"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll is a Ruby based system developed at github.com and it is very commonly
used in Ruby world. I tried to use it because of its native github
support, but finally I realized that we can do the same thing with other site
generators, And other problems that I found on Jekyll was,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Its structure is difficult compared to other site generators.&lt;/li&gt;
&lt;li&gt;It's a Ruby based one, I'm more comfortable with Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="hyde"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://hyde.github.com"&gt;Hyde&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hyde is a  Python based static site generator like Jekyll but less complex.
But Hyde lacks good documentation, and mainly a way to migrate from other
blog engines. I can see that the project getting more interest recently.
I hope it will get in to good position very soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://pelican.notmyidea.org/"&gt;Pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After checking different static site generators I was very confused with
different types of static site generators that I came across. Finally I got the
one I'm looking for, Pelican (Another Python based static site generator.). The
reason for picking Pelican was very simple.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Good Documentation&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;li&gt;Very easy way to use the Markdown texts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The documentation has everything required to migrate your blog from other blog
engines.And I liked the way it structured the blog posts and its contents.It
got clear upper hand over other site generators, I don't need to think twice to
select it.&lt;/p&gt;
&lt;p&gt;Currently I hosted this site under Github, you can &lt;a class="reference external" href="https://github.com/haridas/haridas.github.com"&gt;fork&lt;/a&gt; this project and give
a fresh try to see how quickly you can setup a blog.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="wordpress"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>How to use Python Virtualenv and Ruby Version Manager</title><link href="https://haridas.in/how-to-use-python-virtualenv-and-ruby-version-manager.html" rel="alternate"></link><published>2011-08-31T06:20:00+05:30</published><updated>2011-08-31T06:20:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2011-08-31:/how-to-use-python-virtualenv-and-ruby-version-manager.html</id><summary type="html">&lt;p&gt;First thing I want tell you that here I'm not comparing these two tools
instead only describing how to install and use them.&lt;/p&gt;
&lt;p&gt;We use these tools to isolate the multiple Python or Ruby versions from
system default Python or Ruby installation. We use Virtualenv for Python
and RVM(Ruby â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;First thing I want tell you that here I'm not comparing these two tools
instead only describing how to install and use them.&lt;/p&gt;
&lt;p&gt;We use these tools to isolate the multiple Python or Ruby versions from
system default Python or Ruby installation. We use Virtualenv for Python
and RVM(Ruby Version Manager) for Ruby.&lt;/p&gt;
&lt;p&gt;Let's consider, our server has slightly old version of packages but we
are currently working with latest version of Python or Ruby packages for
our project, then most probably our project package dependency might be
conflict with corresponding packages installed in the system default
path. To get this work, updating the system packages might not be a good
method, because it may broke our existing projects that depends up on
the system packages and it's very dangerous...!. This problem is common
now because of rapid development and feature updation of packages. To
solve this issues and use the packaging system more flexibly both Python
and Ruby providing their own tools.&lt;/p&gt;
&lt;p&gt;We can first check the Python Virtualenv tool for python projects.&lt;/p&gt;
&lt;div class="section" id="virtualenv"&gt;
&lt;h2&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Virtualenv package isolate python package system and corresponding
binaries in to a user defined folder.&lt;/p&gt;
&lt;p&gt;First install &lt;cite&gt;virtualenv&lt;/cite&gt; package by using default pythons package
installation tool or you can use &lt;cite&gt;pip&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create new virtual environment,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;virtualenv python_project
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will create new folder 'python_project', inside this
folder we have three other folders 'bin' for python and other binaries ,
'include' for python header files and finally 'lib' folder holds all
python standard packages. When we will install new python packages under
this virtual environment those files also been comes under this lib
folder.&lt;/p&gt;
&lt;p&gt;To activate and use this virtual environment,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; python_project
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ./bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above command will change the current shell session by updating the
system PATH and it also change the shell prompt, to get a notion of we
are in the virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp gp-VirtualEnv"&gt;(virtual)&lt;/span&gt;&lt;span class="gp"&gt;host@name$&lt;/span&gt; which python
&lt;span class="go"&gt;PATH-to-DIR/python_project/bin/python&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(virtual)&lt;/span&gt;&lt;span class="gp"&gt;host@name$&lt;/span&gt; which easy_install
&lt;span class="go"&gt;PATH-to-DIR/python_project/bin/easy_install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can see that &lt;cite&gt;python&lt;/cite&gt; and &lt;cite&gt;easy_install&lt;/cite&gt; commands were from
our virtual environment. When creating a virtual environment the basic
python interpreter and package installation tools (&lt;cite&gt;easy_install&lt;/cite&gt;
and &lt;cite&gt;pip&lt;/cite&gt;) were created under the bin directory so you can directly
use them to install new packages under virtual environment easily that
never going to affect the python packages installed in the default
system path(/usr/lib/python-2.x/).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp gp-VirtualEnv"&gt;(virtual)&lt;/span&gt;&lt;span class="gp"&gt;host@name$&lt;/span&gt; deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will deactivate our virtual environment and the control will be
return to system shell prompt, after removing all changes in the system
PATH variable.&lt;/p&gt;
&lt;p&gt;So like this you can create any number of virtual environments with
different package installed in it depending on your project
requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;There is another package 'virtualenvwrapper' to organize and use the
multiple virtual environments by single set of shell commands. Here is
the brief description about virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;To install virtualenvwrapper, as usual you can use easy_install or pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the installation append the following two lines to .bashrc or
.profile file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;export WORKON_HOME=&amp;quot;~/.virtualenvs&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;source /usr/local/bin/virtualenvwrapper.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now from next shell session onwards following commands would be
available to us, which helps to manage the multiple virtual
environments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Create a new virtual environment and enter into it.&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;mkvirtualenv test_proj

&lt;span class="go"&gt;To deactiave&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;deactivate

&lt;span class="go"&gt;If we created multiple virtual environments, to list it by using,&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;workon

&lt;span class="go"&gt;To Activate particular virtual environment from above list.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;workon

&lt;span class="go"&gt;To remove the virtual environment&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rmvirtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This package also provide PRE and POST hooks for all of its commands ,
we can use those hooks to inject our codes while running the
virtualenvwrapper commands.&lt;/p&gt;
&lt;p&gt;This viritualenvwrapper is an additional package that really help both
administrators and programmers to manage multiple project environments
with different versions of python packages were installed.&lt;/p&gt;
&lt;p&gt;Now take a look at how we can do the similar thing in Ruby ,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby-version-manager-rvm"&gt;
&lt;h2&gt;&lt;strong&gt;Ruby Version Manager - RVM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;RVM tool handle multiple ruby versions (ruby-1.8.2, ruby-1.9.1,
ruby-1.9.2 etc..) in our system and help us change the version of ruby
in our system without affecting the ruby installed in our system default
path. for eg; by default our system have ruby-1.8.2 installed, but we
want ruby-1.9.2 for our project. So after installing the ruby-1.9.2
using &lt;cite&gt;rvm&lt;/cite&gt; we can change system default ruby version to ruby-1.9.2,
we can revert this back to system ruby when we requires.&lt;/p&gt;
&lt;p&gt;So in this manner we can install multiple ruby versions and switch
between them, once we switch to a particular version of ruby then that
ruby is available for that system user. This is the brief description
how RVM works in our system. Lets move to setup part.&lt;/p&gt;
&lt;p&gt;You can install RVM from &lt;cite&gt;root&lt;/cite&gt; (Multi user mode)user privilege or
from a &lt;cite&gt;user&lt;/cite&gt; privilege(Single user mode). The single user mode were
recommended, because the RVM only avaiable to that user only, but in
Multi-user mode of RVM installation make it available to all users in
the system.Here we will install RVM in single user mode.&lt;/p&gt;
&lt;p&gt;To install RVM you can use git if it available in your system,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;bash &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -s https://rvm.beginrescueend.com/install/rvm&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OR (If we dont have git installed )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Fetch installer script and run it ourself.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; curl -s https://rvm.beginrescueend.com/install/rvm -o rvm-installer

&lt;span class="gp"&gt;$&lt;/span&gt;chmod +x rvm-installer
&lt;span class="gp"&gt;$&lt;/span&gt;./rvm-installer --version latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installation you can see that a folder (&lt;cite&gt;.rvm&lt;/cite&gt;) were created
in your home directory. This folder holds all RVM related files. Then to
activate &lt;cite&gt;rvm&lt;/cite&gt; command for this user you have do one more step.&lt;/p&gt;
&lt;p&gt;Add following line to your &lt;cite&gt;.bashrc&lt;/cite&gt; file, so new shell session
onwards the &lt;cite&gt;rvm&lt;/cite&gt; commands were available to this user. OR you can
just run bellow code in your current shell to activate it for this user
session only.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; source &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; #&lt;/span&gt;
&lt;span class="go"&gt;   This loads RVM into a shell session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open a new shell session,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;

&lt;span class="go"&gt;Current system ruby version&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm install &lt;span class="m"&gt;1&lt;/span&gt;.9.2

&lt;span class="go"&gt;This will install new ruby-1.9.2&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm install &lt;span class="m"&gt;1&lt;/span&gt;.9.1

&lt;span class="go"&gt;This will install new ruby-1.9.1&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm list
&lt;span class="go"&gt;rvm rubies&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.1-p431 [ i386 ]&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.2-p290 [ i386 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can see that we have three versions of ruby in our system,
ruby-1.9.1 and ruby-1.9.2 were installed via RVM and ruby-1.8.7 from our
system. To switch between these versions,&lt;/p&gt;
&lt;p&gt;To use ruby-1.9.1 in one shell session only, try bellow commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;rvm use &lt;span class="m"&gt;1&lt;/span&gt;.9.1
&lt;span class="gp"&gt;$&lt;/span&gt;ruby --version
&lt;span class="go"&gt;ruby 1.9.1p431 (2011-02-18 revision 30908) [i686-linux]&lt;/span&gt;
&lt;span class="go"&gt;[/shell]&lt;/span&gt;
&lt;span class="go"&gt;To make this version change permanent for all user shell sessions use,&lt;/span&gt;
&lt;span class="go"&gt;[shell]&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rvm --default use &lt;span class="m"&gt;1&lt;/span&gt;.9.1
&lt;span class="gp"&gt;$&lt;/span&gt;rvm default list
&lt;span class="go"&gt;rvm rubies&lt;/span&gt;
&lt;span class="go"&gt;=&amp;gt; ruby-1.9.1-p431 [ i386 ]&lt;/span&gt;
&lt;span class="go"&gt;ruby-1.9.2-p290 [ i386 ]&lt;/span&gt;

&lt;span class="go"&gt;This change will available to current and all new current user&lt;/span&gt;
&lt;span class="go"&gt;   sessions.&lt;/span&gt;
&lt;span class="go"&gt;To get back to system ruby version&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;rvm reset

&lt;span class="gp"&gt;$&lt;/span&gt;ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using RVM we can now set your suitable version of ruby, after that you
can install ruby gem packages using &lt;cite&gt;gem&lt;/cite&gt; command of current ruby
version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ruby --version
&lt;span class="go"&gt;ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; gem --version
&lt;span class="go"&gt;1.3.7&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rvm --default use &lt;span class="m"&gt;1&lt;/span&gt;.9.2
&lt;span class="go"&gt;Using /home/haridas/.rvm/gems/ruby-1.9.2-p290&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; gem --version
&lt;span class="go"&gt;1.8.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check the gem versions while we switching between different version of
ruby.&lt;/p&gt;
&lt;p&gt;Ok, thats it. Try out these tools.... have a happy hacking....:)&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category><category term="ruby"></category></entry><entry><title>RabbitChat - Web based chat system</title><link href="https://haridas.in/rabbitchat-web-based-chat-system.html" rel="alternate"></link><published>2011-07-28T12:10:00+05:30</published><updated>2011-07-28T12:10:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2011-07-28:/rabbitchat-web-based-chat-system.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;RabbitChat&lt;/strong&gt; is a simple Web based chat system developed in Tornado
Hight speed Python web framework. It uses Websoket for Full-duplex
communication over http and RabbitMQ Broker for message transaction
between server and connected clients.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="/images/RabbitChat-Arch.png" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;If you want to try this now, checkout a copy of project from this
github â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;RabbitChat&lt;/strong&gt; is a simple Web based chat system developed in Tornado
Hight speed Python web framework. It uses Websoket for Full-duplex
communication over http and RabbitMQ Broker for message transaction
between server and connected clients.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="/images/RabbitChat-Arch.png" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;If you want to try this now, checkout a copy of project from this
github url &lt;cite&gt;git&amp;#64;github.com:haridas/RabbitChat.git&lt;/cite&gt;. Or download it
directly from &lt;a class="reference external" href="https://github.com/haridas/RabbitChat"&gt;https://github.com/haridas/RabbitChat&lt;/a&gt;. Please check
the README file for instructions about how to setup and run the
application. It has one branch also, I explained the difference in
README.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I tired to develop this same scenario in the gevent/twisted python
frameworks, but it lacks the support for good RabbitMQ clients. So after
long search I got an idea about how to implement this web based chat
system using Tornado Web Framework. I chose this because the python
RabbitMQ client Pika has good support for the tornado IOLoop, so that we
can integrate the RabbitMQ client with our web application and include
the WebSocket support easily.&lt;/p&gt;
&lt;p&gt;I found few other web based Chat implementations on Gevent, but they
are not using the RabbitMQ for the message passing instead they relay up
on simple data structures. But I want this should be a RabbitMQ. Another
important thing was I want to use Websocket, all frameworks like Gevent
or Twisted or Tornado has support for websocket. But in this case we
need RabbitMQ client support also. Pika is the good python RabbitMQ
client, it has different adapters to integrate it with RabbitMQ and
other frameworks. Adapter for Tornado is already there, so that makes
this implementation possible. The Pika adapters for other frameworks
will come soon.&lt;/p&gt;
&lt;p&gt;You may ask another question, why using RabbitMQ instead of a simple
Message passing data structures, Actually this application is a demo app
and I want to test the use of Websoxket with RabbitMQ. I'm looking
forward to develop a Realtime API's using this architectures. Google app
engine or other similar platforms( &lt;a class="reference external" href="https://code.google.com/p/typhoonae/"&gt;Typhoonae&lt;/a&gt;) using Websocket server
similar to this way. So you can also develop a good implementations
using this demo application.&lt;/p&gt;
&lt;p&gt;I hope this demo application helps you to get an idea about Real Time
Web application development.&lt;/p&gt;
</content><category term="programming"></category><category term="programming"></category><category term="python"></category><category term="Server Architecture"></category></entry><entry><title>Change and Migrate Django Models using South</title><link href="https://haridas.in/change-and-migrate-django-models-using-south.html" rel="alternate"></link><published>2011-06-17T10:41:00+05:30</published><updated>2011-06-17T10:41:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2011-06-17:/change-and-migrate-django-models-using-south.html</id><summary type="html">&lt;img alt="" src="/images/south.png" style="width: 100%;" /&gt;
&lt;p&gt;South is very handy django application to manage the django models. If
we are developing web projects using django we need to change the Django
model several times , In normal case we have to do these changes
manually by editing both django model and backend database
appropriately. This is very â€¦&lt;/p&gt;</summary><content type="html">&lt;img alt="" src="/images/south.png" style="width: 100%;" /&gt;
&lt;p&gt;South is very handy django application to manage the django models. If
we are developing web projects using django we need to change the Django
model several times , In normal case we have to do these changes
manually by editing both django model and backend database
appropriately. This is very frustrating if we have to do it several
times.&lt;/p&gt;
&lt;p&gt;The South application makes it very easy to handle the model changes
and fill the initial data's into the database tables. To setup the South
application along with your django project, you need to do very simple
changes to the settings.py file of your django project. To make it
simple you have to do this step before adding any of your django apps to
the project.&lt;/p&gt;
&lt;p&gt;First of all install the south application to your system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install south
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then you have to add your south app to django settings.py file under&lt;/p&gt;
&lt;p&gt;INSTALLED_APPS veriable, ie;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.sites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment the next line to enable the admin:&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment the next line to enable admin documentation:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;django.contrib.admindocs&amp;#39;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;---HERE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we added the south app to our django project, the commands
associated with this app is comes under the manage.py.&lt;/p&gt;
&lt;p&gt;Next step is to sync all models to the backend database, for that you
have to use the usual method , ie;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Migrate all tables to backend database,&lt;/span&gt;
&lt;span class="go"&gt;it includes our south apps tables.&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it !. we are now ready to use south app for our apps model
management.&lt;/p&gt;
&lt;p&gt;Currently we added tables of default django apps and south app to
backend. Now we are ready to add our applications to django project.
After adding new django application to the sttings.py INSTALLED_APPS
variable, we need to migrate it's models using south management
commands,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Initially you have to add new app under south , for that,&lt;/span&gt;
&lt;span class="go"&gt;python manage.py schemamigration your_app --initial&lt;/span&gt;
&lt;span class="go"&gt;This will setup your app under south, need to run only once,&lt;/span&gt;
&lt;span class="go"&gt;Then migrate models to backend database,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py migrate your_app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the initial addition of your django app under south, to migrate
the future model changes under the same app, you have to do the bellow
steps,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;After any changes to your model,&lt;/span&gt;
&lt;span class="go"&gt;First detect those changes ,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py schemamigration your_app --auto

&lt;span class="go"&gt;Then Migrate to backend,&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;python manage.py migrate your_app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So using south app you are now manged model changes without touching
backend database. In this manner we can manage all django applications
under your project.&lt;/p&gt;
&lt;p&gt;Try this out ! and save your time.&lt;/p&gt;
</content><category term="programming"></category><category term="python"></category><category term="django"></category><category term="south"></category></entry><entry><title>playing with timezone using pytz</title><link href="https://haridas.in/playing-with-timezone-using-pytz.html" rel="alternate"></link><published>2011-05-11T04:15:00+05:30</published><updated>2011-05-11T04:15:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2011-05-11:/playing-with-timezone-using-pytz.html</id><summary type="html">&lt;p&gt;World Timezone Image from www.physicalgeography.net&lt;/p&gt;
&lt;img alt="" src="/images/world_time2-300x172.gif" style="width: 100%;" /&gt;
&lt;p&gt;When we develop web applications some times we need multiple timezone
support. If we donâ€™t have any previous experience then it might be a
tough and confusing job. Here I will help you to get some basics of
Timezone conversion.&lt;/p&gt;
&lt;p&gt;I have â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;World Timezone Image from www.physicalgeography.net&lt;/p&gt;
&lt;img alt="" src="/images/world_time2-300x172.gif" style="width: 100%;" /&gt;
&lt;p&gt;When we develop web applications some times we need multiple timezone
support. If we donâ€™t have any previous experience then it might be a
tough and confusing job. Here I will help you to get some basics of
Timezone conversion.&lt;/p&gt;
&lt;p&gt;I have been used timezone with django application, but the concept is
same for all languages.So here I will explain things using python
timezone module &amp;quot;pytz&amp;quot;. You have to install this module first into your
system by using &amp;quot;easy_install&amp;quot;&lt;/p&gt;
&lt;p&gt;Install python timezone module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;easy_install pytz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This python module support all major timezones and it helps to convert
date and time in one timezone to any other timezones.You can use the
human readable tiemzone names in pytz module to represent the local
timezones.( like Asia/Kolkata, Europe/Paris, EST etc. ).&lt;/p&gt;
&lt;p&gt;When we deal with multiple timezone in our application, we might have
backend database where we store these date and time informations. Most
databases are support UTC as it's the common timezone format. And it's
better to keep a unique timezone information when saving the date and
time in database and database engines not going to support all timezone
formats directly. So we need to stick with commonly used &lt;strong&gt;UTC/GMT&lt;/strong&gt;
(Coordinated Universal Time) timezone format , it also helps to remove
the daylight saving issues.&lt;/p&gt;
&lt;p&gt;Here is the strategies used in web applications with multiple timezone
support :-&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Save Date and Time informationâ€™s in database as UTC format.&lt;/li&gt;
&lt;li&gt;Convert the UTC time to corresponding local timezones, based on the
user request and location.&lt;/li&gt;
&lt;li&gt;We take local timezone information from browser or user select a
timezone form the list of timezones that supported by our
application. We can collect this information easily with the help of
Javascript.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bellow I'm explaining some real scenarios where we need to change time
zone information's from UTC to local and vice versa,&lt;/p&gt;
&lt;div class="section" id="saving-date-and-time-in-database"&gt;
&lt;h2&gt;&lt;strong&gt;1. Saving Date and Time in Database :-&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We always save date and time information in database as UTC standard.
In django/Rails or other Framworks we have an option to set Projects
default tiemzone as UTC. So in our database the time and date are always
in UTC. If above methods are not working for your application you
manually need to convert the local system time into UTC format and then
save it. Below code sample explain things more clearly,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;haridas@haridas-debian:~$ python&lt;/span&gt;
&lt;span class="go"&gt;Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40)&lt;/span&gt;
&lt;span class="go"&gt;[GCC 4.4.5] on linux2&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#Get local system time and&lt;/span&gt;
&lt;span class="go"&gt;    date.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 7, 9, 42, 23, 751976)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# utcnow() function&lt;/span&gt;
&lt;span class="go"&gt;     give the UTC time of current local time.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="c1"&gt;# But this date tupple doesn&amp;#39;t have the timezone&lt;/span&gt;
&lt;span class="go"&gt;      information.&lt;/span&gt;
&lt;span class="go"&gt;      datetime.datetime(2011, 5, 7, 5, 42, 49, 253618) #We call it as Naive&lt;/span&gt;
&lt;span class="go"&gt;     representation(Date object without Timezone information.)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="c1"&gt;#This output None value or nothing.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Adding&lt;/span&gt;
&lt;span class="go"&gt;     timezone information to &amp;quot;local_system_utc&amp;quot;&lt;/span&gt;

&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_system_utc&lt;/span&gt;
&lt;span class="go"&gt;     datetime.datetime(2011, 5, 7, 5, 42, 49, 253618, tzinfo=&amp;lt;UTC&amp;gt;) #you can&lt;/span&gt;
&lt;span class="go"&gt;     see the tzinfo variable included with the datetime tuple.&lt;/span&gt;
&lt;span class="go"&gt;     #But when saving UTC time inside DB you can use naive representation of&lt;/span&gt;
&lt;span class="go"&gt;     datetime object in UTC.&lt;/span&gt;
&lt;span class="go"&gt;     #You can do the tzinfo addition when retrieving the time from DB.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By this way we can save time and date in Database even-though users are
from different timezone. We need to consider them only when retrieving
the time object from database, ie; we need to convert our UTC time to
user specific timezone. So this conversion is only for view purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converstion-from-utc-to-localtime"&gt;
&lt;h2&gt;&lt;strong&gt;2. Converstion from UTC to localtime&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We need to convert UTC times to corresponding user timezone, follow the
bellow method,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#Our UTC naive time from DB,&lt;/span&gt;
&lt;span class="go"&gt;   for the time being here I&amp;#39;m taking it as current system UTC time..&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;
&lt;span class="go"&gt;    datetime.datetime(2011, 5, 9, 6, 36, 39, 883479) # UTC time in Naive&lt;/span&gt;
&lt;span class="go"&gt;   form.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Europe/Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Our Local timezone, to&lt;/span&gt;
&lt;span class="go"&gt;   which we want to convert the UTC time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Add Timezone information to&lt;/span&gt;
&lt;span class="go"&gt;   UTC time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;now_utc&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 9, 6, 36, 39, 883479, tzinfo=&amp;lt;UTC&amp;gt;) # The&lt;/span&gt;
&lt;span class="go"&gt;   full datetime tuple&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now_utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;\&lt;span class="n"&gt;_tz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Convert to local&lt;/span&gt;
&lt;span class="go"&gt;   time.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_time&lt;/span&gt; &lt;span class="c1"&gt;#Current local time in Paris&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 5, 9, 8, 36, 39, 883479, tzinfo=&amp;lt;DstTzInfo&lt;/span&gt;
&lt;span class="go"&gt;   &amp;#39;Europe/Paris&amp;#39; CEST+2:00:00 DST&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="manage-browser-local-time-at-server"&gt;
&lt;h2&gt;&lt;strong&gt;3. Manage Browser Local Time at Server&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Rather than just conversion of UTC time, some times we need to fetch
records from the Database in between particular interval of local time
time, for eg; From 07:00 Morning to 22:30 Evening of local time. Here
our data is in UTC format, so we need to get the corresponding UTC time
of these local time interval and then search the DB, you can follow
bellow method,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;From browser you will get time in epoch format (A unique number to
represent a particular time) or in string format ie; Y-M-D-H-M-S&lt;/li&gt;
&lt;li&gt;Convert this epoch time to python UTC time.&lt;/li&gt;
&lt;li&gt;Then search the Database.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can reconstruct the javascrpt string format of the date in to
python date object by,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   datetime.datetime(year=2011,month=6,day=7,hour=10,minute=26,second=45)&lt;/span&gt;
&lt;span class="go"&gt;    datetime.datetime(2011, 6, 7, 10, 26, 45)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="go"&gt;   datetime.datetime(year=2011,month=6,day=7,hour=10,minute=26,second=45)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;#From DB we will get the corresponding users timezone information , for&lt;/span&gt;
&lt;span class="go"&gt;   eg; we can take &amp;#39;America/Chicago&amp;#39; as our local timezone.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;America/Chicago&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_std_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;\&lt;span class="n"&gt;_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt;\&lt;span class="n"&gt;_dst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_std_date&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 6, 7, 10, 26, 45, tzinfo=&amp;lt;DstTzInfo&lt;/span&gt;
&lt;span class="go"&gt;   &amp;#39;America/Chicago&amp;#39; CDT-1 day, 19:00:00 DST&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;#Now you have standard localtime and it can be easily converted to the&lt;/span&gt;
&lt;span class="go"&gt;   UTC and then do the Database search and other things.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_std&lt;/span&gt;\&lt;span class="n"&gt;_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_utc&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2011, 6, 7, 15, 26, 45, tzinfo=&amp;lt;UTC&amp;gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category><category term="pytz"></category><category term="timezone"></category></entry><entry><title>Programming Vs. Scripting.</title><link href="https://haridas.in/programming-vs-scripting.html" rel="alternate"></link><published>2010-09-28T09:21:00+05:30</published><updated>2010-09-28T09:21:00+05:30</updated><author><name>HN</name></author><id>tag:haridas.in,2010-09-28:/programming-vs-scripting.html</id><summary type="html">&lt;p&gt;When I was started to learn C programming language, I only know the term
Programming. After some time I learned basics of the Javascript and perl for
some internal projects, from there onwards I started to use the two
terms Scripting and Programming. I found some books of Javascript and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was started to learn C programming language, I only know the term
Programming. After some time I learned basics of the Javascript and perl for
some internal projects, from there onwards I started to use the two
terms Scripting and Programming. I found some books of Javascript and
Perl describing about this at the beginning. But most of them are
not clearly specifying the difference correctly.&lt;/p&gt;
&lt;p&gt;I think these terms were came  due to the difference of how these codes
are being running under the machine, ie; codes running under Interpreter
were normally called as Scripts and in Compilers were called as
Programs.The codes written in scripting languages are very simple to
understand compared to compiled languages like C/C++ or Java.&lt;/p&gt;
&lt;p&gt;We are using these languages to solve or implement all types of problems. There we
need to give importance to the problems and how well we can solve it using an
efficient algorithm, It also counts the speed of the language, memory
usage, etc. The important is the &lt;cite&gt;Algorithm&lt;/cite&gt;, if it is an optimal algorithm
then you can select any language that you like. Currently all major
Scripting languages like &lt;cite&gt;Python, Perl ,Ruby&lt;/cite&gt; and &lt;cite&gt;Tcl/Tk&lt;/cite&gt; are being
used for general purposes along with famous programming languages like
&lt;cite&gt;C/C++&lt;/cite&gt; and &lt;cite&gt;Java&lt;/cite&gt;.Other scripting languages are &lt;cite&gt;Php&lt;/cite&gt; (Web
based applications ), &lt;cite&gt;Lua Script&lt;/cite&gt; (Embedded language , very fast,low
memory foot print).&lt;/p&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can call different Computer Languages as Scripting language or
Programming language, but remember that the Scripting language can do any
thing that a programming language could accomplish. And after all we have to be
more rational while picking good tool set to solve our problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-14-jan-2014"&gt;
&lt;h2&gt;Update - 14/Jan/2014&lt;/h2&gt;
&lt;p&gt;This entry was the my first blog. That time I was just started to learn different
languages in more depth. I was mainly trying the Python and other scripting
languages, its beauty, easy to use and popularity on the Internet made me to
think that it can do everything. Now After few years of experience in different
parts of the Computer Science problems and work experience I can easily see
that what I was wrote above was not going to work out practically.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="programming"></category><category term="scripting"></category></entry></feed>